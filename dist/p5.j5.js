/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/j5.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/ansi-styles/index.js":
/*!*******************************************!*\
  !*** ./node_modules/ansi-styles/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {\nconst colorConvert = __webpack_require__(/*! color-convert */ \"./node_modules/ansi-styles/node_modules/color-convert/index.js\");\n\nconst wrapAnsi16 = (fn, offset) => function () {\n\tconst code = fn.apply(colorConvert, arguments);\n\treturn `\\u001B[${code + offset}m`;\n};\n\nconst wrapAnsi256 = (fn, offset) => function () {\n\tconst code = fn.apply(colorConvert, arguments);\n\treturn `\\u001B[${38 + offset};5;${code}m`;\n};\n\nconst wrapAnsi16m = (fn, offset) => function () {\n\tconst rgb = fn.apply(colorConvert, arguments);\n\treturn `\\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;\n};\n\nfunction assembleStyles() {\n\tconst codes = new Map();\n\tconst styles = {\n\t\tmodifier: {\n\t\t\treset: [0, 0],\n\t\t\t// 21 isn't widely supported and 22 does the same thing\n\t\t\tbold: [1, 22],\n\t\t\tdim: [2, 22],\n\t\t\titalic: [3, 23],\n\t\t\tunderline: [4, 24],\n\t\t\tinverse: [7, 27],\n\t\t\thidden: [8, 28],\n\t\t\tstrikethrough: [9, 29]\n\t\t},\n\t\tcolor: {\n\t\t\tblack: [30, 39],\n\t\t\tred: [31, 39],\n\t\t\tgreen: [32, 39],\n\t\t\tyellow: [33, 39],\n\t\t\tblue: [34, 39],\n\t\t\tmagenta: [35, 39],\n\t\t\tcyan: [36, 39],\n\t\t\twhite: [37, 39],\n\t\t\tgray: [90, 39],\n\n\t\t\t// Bright color\n\t\t\tredBright: [91, 39],\n\t\t\tgreenBright: [92, 39],\n\t\t\tyellowBright: [93, 39],\n\t\t\tblueBright: [94, 39],\n\t\t\tmagentaBright: [95, 39],\n\t\t\tcyanBright: [96, 39],\n\t\t\twhiteBright: [97, 39]\n\t\t},\n\t\tbgColor: {\n\t\t\tbgBlack: [40, 49],\n\t\t\tbgRed: [41, 49],\n\t\t\tbgGreen: [42, 49],\n\t\t\tbgYellow: [43, 49],\n\t\t\tbgBlue: [44, 49],\n\t\t\tbgMagenta: [45, 49],\n\t\t\tbgCyan: [46, 49],\n\t\t\tbgWhite: [47, 49],\n\n\t\t\t// Bright color\n\t\t\tbgBlackBright: [100, 49],\n\t\t\tbgRedBright: [101, 49],\n\t\t\tbgGreenBright: [102, 49],\n\t\t\tbgYellowBright: [103, 49],\n\t\t\tbgBlueBright: [104, 49],\n\t\t\tbgMagentaBright: [105, 49],\n\t\t\tbgCyanBright: [106, 49],\n\t\t\tbgWhiteBright: [107, 49]\n\t\t}\n\t};\n\n\t// Fix humans\n\tstyles.color.grey = styles.color.gray;\n\n\tfor (const groupName of Object.keys(styles)) {\n\t\tconst group = styles[groupName];\n\n\t\tfor (const styleName of Object.keys(group)) {\n\t\t\tconst style = group[styleName];\n\n\t\t\tstyles[styleName] = {\n\t\t\t\topen: `\\u001B[${style[0]}m`,\n\t\t\t\tclose: `\\u001B[${style[1]}m`\n\t\t\t};\n\n\t\t\tgroup[styleName] = styles[styleName];\n\n\t\t\tcodes.set(style[0], style[1]);\n\t\t}\n\n\t\tObject.defineProperty(styles, groupName, {\n\t\t\tvalue: group,\n\t\t\tenumerable: false\n\t\t});\n\n\t\tObject.defineProperty(styles, 'codes', {\n\t\t\tvalue: codes,\n\t\t\tenumerable: false\n\t\t});\n\t}\n\n\tconst ansi2ansi = n => n;\n\tconst rgb2rgb = (r, g, b) => [r, g, b];\n\n\tstyles.color.close = '\\u001B[39m';\n\tstyles.bgColor.close = '\\u001B[49m';\n\n\tstyles.color.ansi = {\n\t\tansi: wrapAnsi16(ansi2ansi, 0)\n\t};\n\tstyles.color.ansi256 = {\n\t\tansi256: wrapAnsi256(ansi2ansi, 0)\n\t};\n\tstyles.color.ansi16m = {\n\t\trgb: wrapAnsi16m(rgb2rgb, 0)\n\t};\n\n\tstyles.bgColor.ansi = {\n\t\tansi: wrapAnsi16(ansi2ansi, 10)\n\t};\n\tstyles.bgColor.ansi256 = {\n\t\tansi256: wrapAnsi256(ansi2ansi, 10)\n\t};\n\tstyles.bgColor.ansi16m = {\n\t\trgb: wrapAnsi16m(rgb2rgb, 10)\n\t};\n\n\tfor (let key of Object.keys(colorConvert)) {\n\t\tif (typeof colorConvert[key] !== 'object') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst suite = colorConvert[key];\n\n\t\tif (key === 'ansi16') {\n\t\t\tkey = 'ansi';\n\t\t}\n\n\t\tif ('ansi16' in suite) {\n\t\t\tstyles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);\n\t\t\tstyles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);\n\t\t}\n\n\t\tif ('ansi256' in suite) {\n\t\t\tstyles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);\n\t\t\tstyles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);\n\t\t}\n\n\t\tif ('rgb' in suite) {\n\t\t\tstyles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);\n\t\t\tstyles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);\n\t\t}\n\t}\n\n\treturn styles;\n}\n\n// Make the export immutable\nObject.defineProperty(module, 'exports', {\n\tenumerable: true,\n\tget: assembleStyles\n});\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))\n\n//# sourceURL=webpack:///./node_modules/ansi-styles/index.js?");

/***/ }),

/***/ "./node_modules/ansi-styles/node_modules/color-convert/conversions.js":
/*!****************************************************************************!*\
  !*** ./node_modules/ansi-styles/node_modules/color-convert/conversions.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* MIT license */\nvar cssKeywords = __webpack_require__(/*! color-name */ \"./node_modules/color-name/index.js\");\n\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\n\nvar reverseKeywords = {};\nfor (var key in cssKeywords) {\n\tif (cssKeywords.hasOwnProperty(key)) {\n\t\treverseKeywords[cssKeywords[key]] = key;\n\t}\n}\n\nvar convert = module.exports = {\n\trgb: {channels: 3, labels: 'rgb'},\n\thsl: {channels: 3, labels: 'hsl'},\n\thsv: {channels: 3, labels: 'hsv'},\n\thwb: {channels: 3, labels: 'hwb'},\n\tcmyk: {channels: 4, labels: 'cmyk'},\n\txyz: {channels: 3, labels: 'xyz'},\n\tlab: {channels: 3, labels: 'lab'},\n\tlch: {channels: 3, labels: 'lch'},\n\thex: {channels: 1, labels: ['hex']},\n\tkeyword: {channels: 1, labels: ['keyword']},\n\tansi16: {channels: 1, labels: ['ansi16']},\n\tansi256: {channels: 1, labels: ['ansi256']},\n\thcg: {channels: 3, labels: ['h', 'c', 'g']},\n\tapple: {channels: 3, labels: ['r16', 'g16', 'b16']},\n\tgray: {channels: 1, labels: ['gray']}\n};\n\n// hide .channels and .labels properties\nfor (var model in convert) {\n\tif (convert.hasOwnProperty(model)) {\n\t\tif (!('channels' in convert[model])) {\n\t\t\tthrow new Error('missing channels property: ' + model);\n\t\t}\n\n\t\tif (!('labels' in convert[model])) {\n\t\t\tthrow new Error('missing channel labels property: ' + model);\n\t\t}\n\n\t\tif (convert[model].labels.length !== convert[model].channels) {\n\t\t\tthrow new Error('channel and label counts mismatch: ' + model);\n\t\t}\n\n\t\tvar channels = convert[model].channels;\n\t\tvar labels = convert[model].labels;\n\t\tdelete convert[model].channels;\n\t\tdelete convert[model].labels;\n\t\tObject.defineProperty(convert[model], 'channels', {value: channels});\n\t\tObject.defineProperty(convert[model], 'labels', {value: labels});\n\t}\n}\n\nconvert.rgb.hsl = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar min = Math.min(r, g, b);\n\tvar max = Math.max(r, g, b);\n\tvar delta = max - min;\n\tvar h;\n\tvar s;\n\tvar l;\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tl = (min + max) / 2;\n\n\tif (max === min) {\n\t\ts = 0;\n\t} else if (l <= 0.5) {\n\t\ts = delta / (max + min);\n\t} else {\n\t\ts = delta / (2 - max - min);\n\t}\n\n\treturn [h, s * 100, l * 100];\n};\n\nconvert.rgb.hsv = function (rgb) {\n\tvar rdif;\n\tvar gdif;\n\tvar bdif;\n\tvar h;\n\tvar s;\n\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar v = Math.max(r, g, b);\n\tvar diff = v - Math.min(r, g, b);\n\tvar diffc = function (c) {\n\t\treturn (v - c) / 6 / diff + 1 / 2;\n\t};\n\n\tif (diff === 0) {\n\t\th = s = 0;\n\t} else {\n\t\ts = diff / v;\n\t\trdif = diffc(r);\n\t\tgdif = diffc(g);\n\t\tbdif = diffc(b);\n\n\t\tif (r === v) {\n\t\t\th = bdif - gdif;\n\t\t} else if (g === v) {\n\t\t\th = (1 / 3) + rdif - bdif;\n\t\t} else if (b === v) {\n\t\t\th = (2 / 3) + gdif - rdif;\n\t\t}\n\t\tif (h < 0) {\n\t\t\th += 1;\n\t\t} else if (h > 1) {\n\t\t\th -= 1;\n\t\t}\n\t}\n\n\treturn [\n\t\th * 360,\n\t\ts * 100,\n\t\tv * 100\n\t];\n};\n\nconvert.rgb.hwb = function (rgb) {\n\tvar r = rgb[0];\n\tvar g = rgb[1];\n\tvar b = rgb[2];\n\tvar h = convert.rgb.hsl(rgb)[0];\n\tvar w = 1 / 255 * Math.min(r, Math.min(g, b));\n\n\tb = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n\n\treturn [h, w * 100, b * 100];\n};\n\nconvert.rgb.cmyk = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar c;\n\tvar m;\n\tvar y;\n\tvar k;\n\n\tk = Math.min(1 - r, 1 - g, 1 - b);\n\tc = (1 - r - k) / (1 - k) || 0;\n\tm = (1 - g - k) / (1 - k) || 0;\n\ty = (1 - b - k) / (1 - k) || 0;\n\n\treturn [c * 100, m * 100, y * 100, k * 100];\n};\n\n/**\n * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n * */\nfunction comparativeDistance(x, y) {\n\treturn (\n\t\tMath.pow(x[0] - y[0], 2) +\n\t\tMath.pow(x[1] - y[1], 2) +\n\t\tMath.pow(x[2] - y[2], 2)\n\t);\n}\n\nconvert.rgb.keyword = function (rgb) {\n\tvar reversed = reverseKeywords[rgb];\n\tif (reversed) {\n\t\treturn reversed;\n\t}\n\n\tvar currentClosestDistance = Infinity;\n\tvar currentClosestKeyword;\n\n\tfor (var keyword in cssKeywords) {\n\t\tif (cssKeywords.hasOwnProperty(keyword)) {\n\t\t\tvar value = cssKeywords[keyword];\n\n\t\t\t// Compute comparative distance\n\t\t\tvar distance = comparativeDistance(rgb, value);\n\n\t\t\t// Check if its less, if so set as closest\n\t\t\tif (distance < currentClosestDistance) {\n\t\t\t\tcurrentClosestDistance = distance;\n\t\t\t\tcurrentClosestKeyword = keyword;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn currentClosestKeyword;\n};\n\nconvert.keyword.rgb = function (keyword) {\n\treturn cssKeywords[keyword];\n};\n\nconvert.rgb.xyz = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\n\t// assume sRGB\n\tr = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);\n\tg = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);\n\tb = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);\n\n\tvar x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n\tvar y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n\tvar z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n\treturn [x * 100, y * 100, z * 100];\n};\n\nconvert.rgb.lab = function (rgb) {\n\tvar xyz = convert.rgb.xyz(rgb);\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.hsl.rgb = function (hsl) {\n\tvar h = hsl[0] / 360;\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar t1;\n\tvar t2;\n\tvar t3;\n\tvar rgb;\n\tvar val;\n\n\tif (s === 0) {\n\t\tval = l * 255;\n\t\treturn [val, val, val];\n\t}\n\n\tif (l < 0.5) {\n\t\tt2 = l * (1 + s);\n\t} else {\n\t\tt2 = l + s - l * s;\n\t}\n\n\tt1 = 2 * l - t2;\n\n\trgb = [0, 0, 0];\n\tfor (var i = 0; i < 3; i++) {\n\t\tt3 = h + 1 / 3 * -(i - 1);\n\t\tif (t3 < 0) {\n\t\t\tt3++;\n\t\t}\n\t\tif (t3 > 1) {\n\t\t\tt3--;\n\t\t}\n\n\t\tif (6 * t3 < 1) {\n\t\t\tval = t1 + (t2 - t1) * 6 * t3;\n\t\t} else if (2 * t3 < 1) {\n\t\t\tval = t2;\n\t\t} else if (3 * t3 < 2) {\n\t\t\tval = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n\t\t} else {\n\t\t\tval = t1;\n\t\t}\n\n\t\trgb[i] = val * 255;\n\t}\n\n\treturn rgb;\n};\n\nconvert.hsl.hsv = function (hsl) {\n\tvar h = hsl[0];\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar smin = s;\n\tvar lmin = Math.max(l, 0.01);\n\tvar sv;\n\tvar v;\n\n\tl *= 2;\n\ts *= (l <= 1) ? l : 2 - l;\n\tsmin *= lmin <= 1 ? lmin : 2 - lmin;\n\tv = (l + s) / 2;\n\tsv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);\n\n\treturn [h, sv * 100, v * 100];\n};\n\nconvert.hsv.rgb = function (hsv) {\n\tvar h = hsv[0] / 60;\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar hi = Math.floor(h) % 6;\n\n\tvar f = h - Math.floor(h);\n\tvar p = 255 * v * (1 - s);\n\tvar q = 255 * v * (1 - (s * f));\n\tvar t = 255 * v * (1 - (s * (1 - f)));\n\tv *= 255;\n\n\tswitch (hi) {\n\t\tcase 0:\n\t\t\treturn [v, t, p];\n\t\tcase 1:\n\t\t\treturn [q, v, p];\n\t\tcase 2:\n\t\t\treturn [p, v, t];\n\t\tcase 3:\n\t\t\treturn [p, q, v];\n\t\tcase 4:\n\t\t\treturn [t, p, v];\n\t\tcase 5:\n\t\t\treturn [v, p, q];\n\t}\n};\n\nconvert.hsv.hsl = function (hsv) {\n\tvar h = hsv[0];\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar vmin = Math.max(v, 0.01);\n\tvar lmin;\n\tvar sl;\n\tvar l;\n\n\tl = (2 - s) * v;\n\tlmin = (2 - s) * vmin;\n\tsl = s * vmin;\n\tsl /= (lmin <= 1) ? lmin : 2 - lmin;\n\tsl = sl || 0;\n\tl /= 2;\n\n\treturn [h, sl * 100, l * 100];\n};\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function (hwb) {\n\tvar h = hwb[0] / 360;\n\tvar wh = hwb[1] / 100;\n\tvar bl = hwb[2] / 100;\n\tvar ratio = wh + bl;\n\tvar i;\n\tvar v;\n\tvar f;\n\tvar n;\n\n\t// wh + bl cant be > 1\n\tif (ratio > 1) {\n\t\twh /= ratio;\n\t\tbl /= ratio;\n\t}\n\n\ti = Math.floor(6 * h);\n\tv = 1 - bl;\n\tf = 6 * h - i;\n\n\tif ((i & 0x01) !== 0) {\n\t\tf = 1 - f;\n\t}\n\n\tn = wh + f * (v - wh); // linear interpolation\n\n\tvar r;\n\tvar g;\n\tvar b;\n\tswitch (i) {\n\t\tdefault:\n\t\tcase 6:\n\t\tcase 0: r = v; g = n; b = wh; break;\n\t\tcase 1: r = n; g = v; b = wh; break;\n\t\tcase 2: r = wh; g = v; b = n; break;\n\t\tcase 3: r = wh; g = n; b = v; break;\n\t\tcase 4: r = n; g = wh; b = v; break;\n\t\tcase 5: r = v; g = wh; b = n; break;\n\t}\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.cmyk.rgb = function (cmyk) {\n\tvar c = cmyk[0] / 100;\n\tvar m = cmyk[1] / 100;\n\tvar y = cmyk[2] / 100;\n\tvar k = cmyk[3] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = 1 - Math.min(1, c * (1 - k) + k);\n\tg = 1 - Math.min(1, m * (1 - k) + k);\n\tb = 1 - Math.min(1, y * (1 - k) + k);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.rgb = function (xyz) {\n\tvar x = xyz[0] / 100;\n\tvar y = xyz[1] / 100;\n\tvar z = xyz[2] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n\tg = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n\tb = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n\t// assume sRGB\n\tr = r > 0.0031308\n\t\t? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\n\t\t: r * 12.92;\n\n\tg = g > 0.0031308\n\t\t? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\n\t\t: g * 12.92;\n\n\tb = b > 0.0031308\n\t\t? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\n\t\t: b * 12.92;\n\n\tr = Math.min(Math.max(0, r), 1);\n\tg = Math.min(Math.max(0, g), 1);\n\tb = Math.min(Math.max(0, b), 1);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.lab = function (xyz) {\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.lab.xyz = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar x;\n\tvar y;\n\tvar z;\n\n\ty = (l + 16) / 116;\n\tx = a / 500 + y;\n\tz = y - b / 200;\n\n\tvar y2 = Math.pow(y, 3);\n\tvar x2 = Math.pow(x, 3);\n\tvar z2 = Math.pow(z, 3);\n\ty = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n\tx = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n\tz = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n\n\tx *= 95.047;\n\ty *= 100;\n\tz *= 108.883;\n\n\treturn [x, y, z];\n};\n\nconvert.lab.lch = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar hr;\n\tvar h;\n\tvar c;\n\n\thr = Math.atan2(b, a);\n\th = hr * 360 / 2 / Math.PI;\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tc = Math.sqrt(a * a + b * b);\n\n\treturn [l, c, h];\n};\n\nconvert.lch.lab = function (lch) {\n\tvar l = lch[0];\n\tvar c = lch[1];\n\tvar h = lch[2];\n\tvar a;\n\tvar b;\n\tvar hr;\n\n\thr = h / 360 * 2 * Math.PI;\n\ta = c * Math.cos(hr);\n\tb = c * Math.sin(hr);\n\n\treturn [l, a, b];\n};\n\nconvert.rgb.ansi16 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\tvar value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization\n\n\tvalue = Math.round(value / 50);\n\n\tif (value === 0) {\n\t\treturn 30;\n\t}\n\n\tvar ansi = 30\n\t\t+ ((Math.round(b / 255) << 2)\n\t\t| (Math.round(g / 255) << 1)\n\t\t| Math.round(r / 255));\n\n\tif (value === 2) {\n\t\tansi += 60;\n\t}\n\n\treturn ansi;\n};\n\nconvert.hsv.ansi16 = function (args) {\n\t// optimization here; we already know the value and don't need to get\n\t// it converted for us.\n\treturn convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\n\nconvert.rgb.ansi256 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\n\t// we use the extended greyscale palette here, with the exception of\n\t// black and white. normal palette only has 4 greyscale shades.\n\tif (r === g && g === b) {\n\t\tif (r < 8) {\n\t\t\treturn 16;\n\t\t}\n\n\t\tif (r > 248) {\n\t\t\treturn 231;\n\t\t}\n\n\t\treturn Math.round(((r - 8) / 247) * 24) + 232;\n\t}\n\n\tvar ansi = 16\n\t\t+ (36 * Math.round(r / 255 * 5))\n\t\t+ (6 * Math.round(g / 255 * 5))\n\t\t+ Math.round(b / 255 * 5);\n\n\treturn ansi;\n};\n\nconvert.ansi16.rgb = function (args) {\n\tvar color = args % 10;\n\n\t// handle greyscale\n\tif (color === 0 || color === 7) {\n\t\tif (args > 50) {\n\t\t\tcolor += 3.5;\n\t\t}\n\n\t\tcolor = color / 10.5 * 255;\n\n\t\treturn [color, color, color];\n\t}\n\n\tvar mult = (~~(args > 50) + 1) * 0.5;\n\tvar r = ((color & 1) * mult) * 255;\n\tvar g = (((color >> 1) & 1) * mult) * 255;\n\tvar b = (((color >> 2) & 1) * mult) * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.ansi256.rgb = function (args) {\n\t// handle greyscale\n\tif (args >= 232) {\n\t\tvar c = (args - 232) * 10 + 8;\n\t\treturn [c, c, c];\n\t}\n\n\targs -= 16;\n\n\tvar rem;\n\tvar r = Math.floor(args / 36) / 5 * 255;\n\tvar g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n\tvar b = (rem % 6) / 5 * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hex = function (args) {\n\tvar integer = ((Math.round(args[0]) & 0xFF) << 16)\n\t\t+ ((Math.round(args[1]) & 0xFF) << 8)\n\t\t+ (Math.round(args[2]) & 0xFF);\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.hex.rgb = function (args) {\n\tvar match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n\tif (!match) {\n\t\treturn [0, 0, 0];\n\t}\n\n\tvar colorString = match[0];\n\n\tif (match[0].length === 3) {\n\t\tcolorString = colorString.split('').map(function (char) {\n\t\t\treturn char + char;\n\t\t}).join('');\n\t}\n\n\tvar integer = parseInt(colorString, 16);\n\tvar r = (integer >> 16) & 0xFF;\n\tvar g = (integer >> 8) & 0xFF;\n\tvar b = integer & 0xFF;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hcg = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar max = Math.max(Math.max(r, g), b);\n\tvar min = Math.min(Math.min(r, g), b);\n\tvar chroma = (max - min);\n\tvar grayscale;\n\tvar hue;\n\n\tif (chroma < 1) {\n\t\tgrayscale = min / (1 - chroma);\n\t} else {\n\t\tgrayscale = 0;\n\t}\n\n\tif (chroma <= 0) {\n\t\thue = 0;\n\t} else\n\tif (max === r) {\n\t\thue = ((g - b) / chroma) % 6;\n\t} else\n\tif (max === g) {\n\t\thue = 2 + (b - r) / chroma;\n\t} else {\n\t\thue = 4 + (r - g) / chroma + 4;\n\t}\n\n\thue /= 6;\n\thue %= 1;\n\n\treturn [hue * 360, chroma * 100, grayscale * 100];\n};\n\nconvert.hsl.hcg = function (hsl) {\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar c = 1;\n\tvar f = 0;\n\n\tif (l < 0.5) {\n\t\tc = 2.0 * s * l;\n\t} else {\n\t\tc = 2.0 * s * (1.0 - l);\n\t}\n\n\tif (c < 1.0) {\n\t\tf = (l - 0.5 * c) / (1.0 - c);\n\t}\n\n\treturn [hsl[0], c * 100, f * 100];\n};\n\nconvert.hsv.hcg = function (hsv) {\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\n\tvar c = s * v;\n\tvar f = 0;\n\n\tif (c < 1.0) {\n\t\tf = (v - c) / (1 - c);\n\t}\n\n\treturn [hsv[0], c * 100, f * 100];\n};\n\nconvert.hcg.rgb = function (hcg) {\n\tvar h = hcg[0] / 360;\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tif (c === 0.0) {\n\t\treturn [g * 255, g * 255, g * 255];\n\t}\n\n\tvar pure = [0, 0, 0];\n\tvar hi = (h % 1) * 6;\n\tvar v = hi % 1;\n\tvar w = 1 - v;\n\tvar mg = 0;\n\n\tswitch (Math.floor(hi)) {\n\t\tcase 0:\n\t\t\tpure[0] = 1; pure[1] = v; pure[2] = 0; break;\n\t\tcase 1:\n\t\t\tpure[0] = w; pure[1] = 1; pure[2] = 0; break;\n\t\tcase 2:\n\t\t\tpure[0] = 0; pure[1] = 1; pure[2] = v; break;\n\t\tcase 3:\n\t\t\tpure[0] = 0; pure[1] = w; pure[2] = 1; break;\n\t\tcase 4:\n\t\t\tpure[0] = v; pure[1] = 0; pure[2] = 1; break;\n\t\tdefault:\n\t\t\tpure[0] = 1; pure[1] = 0; pure[2] = w;\n\t}\n\n\tmg = (1.0 - c) * g;\n\n\treturn [\n\t\t(c * pure[0] + mg) * 255,\n\t\t(c * pure[1] + mg) * 255,\n\t\t(c * pure[2] + mg) * 255\n\t];\n};\n\nconvert.hcg.hsv = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar v = c + g * (1.0 - c);\n\tvar f = 0;\n\n\tif (v > 0.0) {\n\t\tf = c / v;\n\t}\n\n\treturn [hcg[0], f * 100, v * 100];\n};\n\nconvert.hcg.hsl = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar l = g * (1.0 - c) + 0.5 * c;\n\tvar s = 0;\n\n\tif (l > 0.0 && l < 0.5) {\n\t\ts = c / (2 * l);\n\t} else\n\tif (l >= 0.5 && l < 1.0) {\n\t\ts = c / (2 * (1 - l));\n\t}\n\n\treturn [hcg[0], s * 100, l * 100];\n};\n\nconvert.hcg.hwb = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\tvar v = c + g * (1.0 - c);\n\treturn [hcg[0], (v - c) * 100, (1 - v) * 100];\n};\n\nconvert.hwb.hcg = function (hwb) {\n\tvar w = hwb[1] / 100;\n\tvar b = hwb[2] / 100;\n\tvar v = 1 - b;\n\tvar c = v - w;\n\tvar g = 0;\n\n\tif (c < 1) {\n\t\tg = (v - c) / (1 - c);\n\t}\n\n\treturn [hwb[0], c * 100, g * 100];\n};\n\nconvert.apple.rgb = function (apple) {\n\treturn [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];\n};\n\nconvert.rgb.apple = function (rgb) {\n\treturn [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];\n};\n\nconvert.gray.rgb = function (args) {\n\treturn [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\n};\n\nconvert.gray.hsl = convert.gray.hsv = function (args) {\n\treturn [0, 0, args[0]];\n};\n\nconvert.gray.hwb = function (gray) {\n\treturn [0, 100, gray[0]];\n};\n\nconvert.gray.cmyk = function (gray) {\n\treturn [0, 0, 0, gray[0]];\n};\n\nconvert.gray.lab = function (gray) {\n\treturn [gray[0], 0, 0];\n};\n\nconvert.gray.hex = function (gray) {\n\tvar val = Math.round(gray[0] / 100 * 255) & 0xFF;\n\tvar integer = (val << 16) + (val << 8) + val;\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.rgb.gray = function (rgb) {\n\tvar val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n\treturn [val / 255 * 100];\n};\n\n\n//# sourceURL=webpack:///./node_modules/ansi-styles/node_modules/color-convert/conversions.js?");

/***/ }),

/***/ "./node_modules/ansi-styles/node_modules/color-convert/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/ansi-styles/node_modules/color-convert/index.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var conversions = __webpack_require__(/*! ./conversions */ \"./node_modules/ansi-styles/node_modules/color-convert/conversions.js\");\nvar route = __webpack_require__(/*! ./route */ \"./node_modules/ansi-styles/node_modules/color-convert/route.js\");\n\nvar convert = {};\n\nvar models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\tvar result = fn(args);\n\n\t\t// we're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (var len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(function (fromModel) {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\tObject.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});\n\n\tvar routes = route(fromModel);\n\tvar routeModels = Object.keys(routes);\n\n\trouteModels.forEach(function (toModel) {\n\t\tvar fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nmodule.exports = convert;\n\n\n//# sourceURL=webpack:///./node_modules/ansi-styles/node_modules/color-convert/index.js?");

/***/ }),

/***/ "./node_modules/ansi-styles/node_modules/color-convert/route.js":
/*!**********************************************************************!*\
  !*** ./node_modules/ansi-styles/node_modules/color-convert/route.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var conversions = __webpack_require__(/*! ./conversions */ \"./node_modules/ansi-styles/node_modules/color-convert/conversions.js\");\n\n/*\n\tthis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/\n\nfunction buildGraph() {\n\tvar graph = {};\n\t// https://jsperf.com/object-keys-vs-for-in-with-closure/3\n\tvar models = Object.keys(conversions);\n\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tgraph[models[i]] = {\n\t\t\t// http://jsperf.com/1-vs-infinity\n\t\t\t// micro-opt, but this is simple.\n\t\t\tdistance: -1,\n\t\t\tparent: null\n\t\t};\n\t}\n\n\treturn graph;\n}\n\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n\tvar graph = buildGraph();\n\tvar queue = [fromModel]; // unshift -> queue -> pop\n\n\tgraph[fromModel].distance = 0;\n\n\twhile (queue.length) {\n\t\tvar current = queue.pop();\n\t\tvar adjacents = Object.keys(conversions[current]);\n\n\t\tfor (var len = adjacents.length, i = 0; i < len; i++) {\n\t\t\tvar adjacent = adjacents[i];\n\t\t\tvar node = graph[adjacent];\n\n\t\t\tif (node.distance === -1) {\n\t\t\t\tnode.distance = graph[current].distance + 1;\n\t\t\t\tnode.parent = current;\n\t\t\t\tqueue.unshift(adjacent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn graph;\n}\n\nfunction link(from, to) {\n\treturn function (args) {\n\t\treturn to(from(args));\n\t};\n}\n\nfunction wrapConversion(toModel, graph) {\n\tvar path = [graph[toModel].parent, toModel];\n\tvar fn = conversions[graph[toModel].parent][toModel];\n\n\tvar cur = graph[toModel].parent;\n\twhile (graph[cur].parent) {\n\t\tpath.unshift(graph[cur].parent);\n\t\tfn = link(conversions[graph[cur].parent][cur], fn);\n\t\tcur = graph[cur].parent;\n\t}\n\n\tfn.conversion = path;\n\treturn fn;\n}\n\nmodule.exports = function (fromModel) {\n\tvar graph = deriveBFS(fromModel);\n\tvar conversion = {};\n\n\tvar models = Object.keys(graph);\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tvar toModel = models[i];\n\t\tvar node = graph[toModel];\n\n\t\tif (node.parent === null) {\n\t\t\t// no possible conversion, or this node is the source model.\n\t\t\tcontinue;\n\t\t}\n\n\t\tconversion[toModel] = wrapConversion(toModel, graph);\n\t}\n\n\treturn conversion;\n};\n\n\n\n//# sourceURL=webpack:///./node_modules/ansi-styles/node_modules/color-convert/route.js?");

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack:///./node_modules/base64-js/index.js?");

/***/ }),

/***/ "./node_modules/browser-process-hrtime/index.js":
/*!******************************************************!*\
  !*** ./node_modules/browser-process-hrtime/index.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process, global) {module.exports = process.hrtime || hrtime\n\n// polyfil for window.performance.now\nvar performance = global.performance || {}\nvar performanceNow =\n  performance.now        ||\n  performance.mozNow     ||\n  performance.msNow      ||\n  performance.oNow       ||\n  performance.webkitNow  ||\n  function(){ return (new Date()).getTime() }\n\n// generate timestamp or delta\n// see http://nodejs.org/api/process.html#process_process_hrtime\nfunction hrtime(previousTimestamp){\n  var clocktime = performanceNow.call(performance)*1e-3\n  var seconds = Math.floor(clocktime)\n  var nanoseconds = Math.floor((clocktime%1)*1e9)\n  if (previousTimestamp) {\n    seconds = seconds - previousTimestamp[0]\n    nanoseconds = nanoseconds - previousTimestamp[1]\n    if (nanoseconds<0) {\n      seconds--\n      nanoseconds += 1e9\n    }\n  }\n  return [seconds,nanoseconds]\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/browser-process-hrtime/index.js?");

/***/ }),

/***/ "./node_modules/browser-serialport/index.js":
/*!**************************************************!*\
  !*** ./node_modules/browser-serialport/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process, Buffer) {\n\nvar EE = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\n\nvar DATABITS = [7, 8];\nvar STOPBITS = [1, 2];\nvar PARITY = ['none', 'even', 'mark', 'odd', 'space'];\nvar FLOWCONTROLS = ['RTSCTS'];\n\nvar _options = {\n  baudrate: 9600,\n  parity: 'none',\n  rtscts: false,\n  databits: 8,\n  stopbits: 1,\n  buffersize: 256\n};\n\nfunction convertOptions(options){\n  switch (options.dataBits) {\n    case 7:\n      options.dataBits = 'seven';\n      break;\n    case 8:\n      options.dataBits = 'eight';\n      break;\n  }\n\n  switch (options.stopBits) {\n    case 1:\n      options.stopBits = 'one';\n      break;\n    case 2:\n      options.stopBits = 'two';\n      break;\n  }\n\n  switch (options.parity) {\n    case 'none':\n      options.parity = 'no';\n      break;\n  }\n\n  return options;\n}\n\nfunction SerialPort(path, options, openImmediately, callback) {\n\n  EE.call(this);\n\n  var self = this;\n\n  var args = Array.prototype.slice.call(arguments);\n  callback = args.pop();\n  if (typeof(callback) !== 'function') {\n    callback = null;\n  }\n\n  options = (typeof options !== 'function') && options || {};\n\n  openImmediately = (openImmediately === undefined || openImmediately === null) ? true : openImmediately;\n\n  callback = callback || function (err) {\n    if (err) {\n      self.emit('error', err);\n    }\n  };\n\n  var err;\n\n  options.baudRate = options.baudRate || options.baudrate || _options.baudrate;\n\n  options.dataBits = options.dataBits || options.databits || _options.databits;\n  if (DATABITS.indexOf(options.dataBits) === -1) {\n    err = new Error('Invalid \"databits\": ' + options.dataBits);\n    callback(err);\n    return;\n  }\n\n  options.stopBits = options.stopBits || options.stopbits || _options.stopbits;\n  if (STOPBITS.indexOf(options.stopBits) === -1) {\n    err = new Error('Invalid \"stopbits\": ' + options.stopbits);\n    callback(err);\n    return;\n  }\n\n  options.parity = options.parity || _options.parity;\n  if (PARITY.indexOf(options.parity) === -1) {\n    err = new Error('Invalid \"parity\": ' + options.parity);\n    callback(err);\n    return;\n  }\n\n  if (!path) {\n    err = new Error('Invalid port specified: ' + path);\n    callback(err);\n    return;\n  }\n\n  options.rtscts = _options.rtscts;\n\n  if (options.flowControl || options.flowcontrol) {\n    var fc = options.flowControl || options.flowcontrol;\n\n    if (typeof fc === 'boolean') {\n      options.rtscts = true;\n    } else {\n      var clean = fc.every(function (flowControl) {\n        var fcup = flowControl.toUpperCase();\n        var idx = FLOWCONTROLS.indexOf(fcup);\n        if (idx < 0) {\n          var err = new Error('Invalid \"flowControl\": ' + fcup + '. Valid options: ' + FLOWCONTROLS.join(', '));\n          callback(err);\n          return false;\n        } else {\n\n          // \"XON\", \"XOFF\", \"XANY\", \"DTRDTS\", \"RTSCTS\"\n          switch (idx) {\n            case 0: options.rtscts = true; break;\n          }\n          return true;\n        }\n      });\n      if(!clean){\n        return;\n      }\n    }\n  }\n\n  options.bufferSize = options.bufferSize || options.buffersize || _options.buffersize;\n\n  // defaults to chrome.serial if no options.serial passed\n  // inlined instead of on _options to allow mocking global chrome.serial for optional options test\n  options.serial = options.serial || (typeof chrome !== 'undefined' && chrome.serial);\n\n  if (!options.serial) {\n    throw new Error('No access to serial ports. Try loading as a Chrome Application.');\n  }\n\n  this.options = convertOptions(options);\n\n  this.options.serial.onReceiveError.addListener(function(info){\n\n    switch (info.error) {\n\n      case 'disconnected':\n      case 'device_lost':\n      case 'system_error':\n        err = new Error('Disconnected');\n        // send notification of disconnect\n        if (self.options.disconnectedCallback) {\n          self.options.disconnectedCallback(err);\n        } else {\n          self.emit('disconnect', err);\n        }\n        if(self.connectionId >= 0){\n          self.close();\n        }\n        break;\n      case 'timeout':\n        break;\n    }\n\n  });\n\n  this.path = path;\n\n  if (openImmediately) {\n    process.nextTick(function () {\n      self.open(callback);\n    });\n  }\n}\n\nutil.inherits(SerialPort, EE);\n\nSerialPort.prototype.connectionId = -1;\n\nSerialPort.prototype.open = function (callback) {\n  var options = {\n    bitrate: parseInt(this.options.baudRate, 10),\n    dataBits: this.options.dataBits,\n    parityBit: this.options.parity,\n    stopBits: this.options.stopBits,\n    ctsFlowControl: this.options.rtscts\n  };\n\n  this.options.serial.connect(this.path, options, this.proxy('onOpen', callback));\n};\n\nSerialPort.prototype.onOpen = function (callback, openInfo) {\n  if(chrome.runtime.lastError){\n    if(typeof callback === 'function'){\n      callback(chrome.runtime.lastError);\n    }else{\n      this.emit('error', chrome.runtime.lastError);\n    }\n    return;\n  }\n\n  this.connectionId = openInfo.connectionId;\n\n  if (this.connectionId === -1) {\n    this.emit('error', new Error('Could not open port.'));\n    return;\n  }\n\n  this.emit('open', openInfo);\n\n  this._reader = this.proxy('onRead');\n\n  this.options.serial.onReceive.addListener(this._reader);\n\n  if(typeof callback === 'function'){\n    callback(chrome.runtime.lastError, openInfo);\n  }\n};\n\nSerialPort.prototype.onRead = function (readInfo) {\n  if (readInfo && this.connectionId === readInfo.connectionId) {\n\n    if (this.options.dataCallback) {\n      this.options.dataCallback(toBuffer(readInfo.data));\n    } else {\n      this.emit('data', toBuffer(readInfo.data));\n    }\n\n  }\n};\n\nSerialPort.prototype.write = function (buffer, callback) {\n  if (this.connectionId < 0) {\n    var err = new Error('Serialport not open.');\n    if(typeof callback === 'function'){\n      callback(err);\n    }else{\n      this.emit('error', err);\n    }\n    return;\n  }\n\n  if (typeof buffer === 'string') {\n    buffer = str2ab(buffer);\n  }\n\n  //Make sure its not a browserify faux Buffer.\n  if (buffer instanceof ArrayBuffer === false) {\n    buffer = buffer2ArrayBuffer(buffer);\n  }\n\n  this.options.serial.send(this.connectionId, buffer, function(info) {\n    if (typeof callback === 'function') {\n      callback(chrome.runtime.lastError, info);\n    }\n  });\n};\n\n\nSerialPort.prototype.close = function (callback) {\n  if (this.connectionId < 0) {\n    var err = new Error('Serialport not open.');\n    if(typeof callback === 'function'){\n      callback(err);\n    }else{\n      this.emit('error', err);\n    }\n    return;\n  }\n\n  this.options.serial.disconnect(this.connectionId, this.proxy('onClose', callback));\n};\n\nSerialPort.prototype.onClose = function (callback, result) {\n  this.connectionId = -1;\n  this.emit('close');\n\n  this.removeAllListeners();\n  if(this._reader){\n    this.options.serial.onReceive.removeListener(this._reader);\n    this._reader = null;\n  }\n\n  if (typeof callback === 'function') {\n    callback(chrome.runtime.lastError, result);\n  }\n};\n\nSerialPort.prototype.flush = function (callback) {\n  if (this.connectionId < 0) {\n    var err = new Error('Serialport not open.');\n    if(typeof callback === 'function'){\n      callback(err);\n    }else{\n      this.emit('error', err);\n    }\n    return;\n  }\n\n  var self = this;\n\n  this.options.serial.flush(this.connectionId, function(result) {\n    if (chrome.runtime.lastError) {\n      if (typeof callback === 'function') {\n        callback(chrome.runtime.lastError, result);\n      } else {\n        self.emit('error', chrome.runtime.lastError);\n      }\n      return;\n    } else {\n      callback(null, result);\n    }\n  });\n};\n\nSerialPort.prototype.drain = function (callback) {\n  if (this.connectionId < 0) {\n    var err = new Error('Serialport not open.');\n    if(typeof callback === 'function'){\n      callback(err);\n    }else{\n      this.emit('error', err);\n    }\n    return;\n  }\n\n  if (typeof callback === 'function') {\n    callback();\n  }\n};\n\n\nSerialPort.prototype.proxy = function () {\n  var self = this;\n  var proxyArgs = [];\n\n  //arguments isnt actually an array.\n  for (var i = 0; i < arguments.length; i++) {\n      proxyArgs[i] = arguments[i];\n  }\n\n  var functionName = proxyArgs.splice(0, 1)[0];\n\n  var func = function() {\n    var funcArgs = [];\n    for (var i = 0; i < arguments.length; i++) {\n        funcArgs[i] = arguments[i];\n    }\n    var allArgs = proxyArgs.concat(funcArgs);\n\n    self[functionName].apply(self, allArgs);\n  };\n\n  return func;\n};\n\nSerialPort.prototype.set = function (options, callback) {\n  this.options.serial.setControlSignals(this.connectionId, options, function(result){\n    callback(chrome.runtime.lastError, result);\n  });\n};\n\nSerialPort.prototype.isOpen = function () {\n  return this.connectionId > -1;\n};\n\nfunction SerialPortList(callback) {\n  if (typeof chrome != 'undefined' && chrome.serial) {\n    chrome.serial.getDevices(function(ports) {\n      var portObjects = new Array(ports.length);\n      for (var i = 0; i < ports.length; i++) {\n        portObjects[i] = {\n          comName: ports[i].path,\n          manufacturer: ports[i].displayName,\n          serialNumber: '',\n          pnpId: '',\n          locationId:'',\n          vendorId: '0x' + (ports[i].vendorId||0).toString(16),\n          productId: '0x' + (ports[i].productId||0).toString(16)\n        };\n      }\n      callback(chrome.runtime.lastError, portObjects);\n    });\n  } else {\n    callback(new Error('No access to serial ports. Try loading as a Chrome Application.'), null);\n  }\n}\n\n// Convert string to ArrayBuffer\nfunction str2ab(str) {\n  var buf = new ArrayBuffer(str.length);\n  var bufView = new Uint8Array(buf);\n  for (var i = 0; i < str.length; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return buf;\n}\n\n// Convert buffer to ArrayBuffer\nfunction buffer2ArrayBuffer(buffer) {\n  var buf = new ArrayBuffer(buffer.length);\n  var bufView = new Uint8Array(buf);\n  for (var i = 0; i < buffer.length; i++) {\n    bufView[i] = buffer[i];\n  }\n  return buf;\n}\n\nfunction toBuffer(ab) {\n  var buffer = new Buffer(ab.byteLength);\n  var view = new Uint8Array(ab);\n  for (var i = 0; i < buffer.length; ++i) {\n      buffer[i] = view[i];\n  }\n  return buffer;\n}\n\nmodule.exports = {\n  SerialPort: SerialPort,\n  list: SerialPortList,\n  buffer2ArrayBuffer: buffer2ArrayBuffer,\n  used: [] //TODO: Populate this somewhere.\n};\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack:///./node_modules/browser-serialport/index.js?");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/isarray/index.js\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/buffer/index.js?");

/***/ }),

/***/ "./node_modules/chalk/index.js":
/*!*************************************!*\
  !*** ./node_modules/chalk/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {\nconst escapeStringRegexp = __webpack_require__(/*! escape-string-regexp */ \"./node_modules/escape-string-regexp/index.js\");\nconst ansiStyles = __webpack_require__(/*! ansi-styles */ \"./node_modules/ansi-styles/index.js\");\nconst supportsColor = __webpack_require__(/*! supports-color */ \"./node_modules/supports-color/browser.js\");\n\nconst template = __webpack_require__(/*! ./templates.js */ \"./node_modules/chalk/templates.js\");\n\nconst isSimpleWindowsTerm = process.platform === 'win32' && !(process.env.TERM || '').toLowerCase().startsWith('xterm');\n\n// `supportsColor.level` → `ansiStyles.color[name]` mapping\nconst levelMapping = ['ansi', 'ansi', 'ansi256', 'ansi16m'];\n\n// `color-convert` models to exclude from the Chalk API due to conflicts and such\nconst skipModels = new Set(['gray']);\n\nconst styles = Object.create(null);\n\nfunction applyOptions(obj, options) {\n\toptions = options || {};\n\n\t// Detect level if not set manually\n\tconst scLevel = supportsColor ? supportsColor.level : 0;\n\tobj.level = options.level === undefined ? scLevel : options.level;\n\tobj.enabled = 'enabled' in options ? options.enabled : obj.level > 0;\n}\n\nfunction Chalk(options) {\n\t// We check for this.template here since calling `chalk.constructor()`\n\t// by itself will have a `this` of a previously constructed chalk object\n\tif (!this || !(this instanceof Chalk) || this.template) {\n\t\tconst chalk = {};\n\t\tapplyOptions(chalk, options);\n\n\t\tchalk.template = function () {\n\t\t\tconst args = [].slice.call(arguments);\n\t\t\treturn chalkTag.apply(null, [chalk.template].concat(args));\n\t\t};\n\n\t\tObject.setPrototypeOf(chalk, Chalk.prototype);\n\t\tObject.setPrototypeOf(chalk.template, chalk);\n\n\t\tchalk.template.constructor = Chalk;\n\n\t\treturn chalk.template;\n\t}\n\n\tapplyOptions(this, options);\n}\n\n// Use bright blue on Windows as the normal blue color is illegible\nif (isSimpleWindowsTerm) {\n\tansiStyles.blue.open = '\\u001B[94m';\n}\n\nfor (const key of Object.keys(ansiStyles)) {\n\tansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');\n\n\tstyles[key] = {\n\t\tget() {\n\t\t\tconst codes = ansiStyles[key];\n\t\t\treturn build.call(this, this._styles ? this._styles.concat(codes) : [codes], key);\n\t\t}\n\t};\n}\n\nansiStyles.color.closeRe = new RegExp(escapeStringRegexp(ansiStyles.color.close), 'g');\nfor (const model of Object.keys(ansiStyles.color.ansi)) {\n\tif (skipModels.has(model)) {\n\t\tcontinue;\n\t}\n\n\tstyles[model] = {\n\t\tget() {\n\t\t\tconst level = this.level;\n\t\t\treturn function () {\n\t\t\t\tconst open = ansiStyles.color[levelMapping[level]][model].apply(null, arguments);\n\t\t\t\tconst codes = {\n\t\t\t\t\topen,\n\t\t\t\t\tclose: ansiStyles.color.close,\n\t\t\t\t\tcloseRe: ansiStyles.color.closeRe\n\t\t\t\t};\n\t\t\t\treturn build.call(this, this._styles ? this._styles.concat(codes) : [codes], model);\n\t\t\t};\n\t\t}\n\t};\n}\n\nansiStyles.bgColor.closeRe = new RegExp(escapeStringRegexp(ansiStyles.bgColor.close), 'g');\nfor (const model of Object.keys(ansiStyles.bgColor.ansi)) {\n\tif (skipModels.has(model)) {\n\t\tcontinue;\n\t}\n\n\tconst bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);\n\tstyles[bgModel] = {\n\t\tget() {\n\t\t\tconst level = this.level;\n\t\t\treturn function () {\n\t\t\t\tconst open = ansiStyles.bgColor[levelMapping[level]][model].apply(null, arguments);\n\t\t\t\tconst codes = {\n\t\t\t\t\topen,\n\t\t\t\t\tclose: ansiStyles.bgColor.close,\n\t\t\t\t\tcloseRe: ansiStyles.bgColor.closeRe\n\t\t\t\t};\n\t\t\t\treturn build.call(this, this._styles ? this._styles.concat(codes) : [codes], model);\n\t\t\t};\n\t\t}\n\t};\n}\n\nconst proto = Object.defineProperties(() => {}, styles);\n\nfunction build(_styles, key) {\n\tconst builder = function () {\n\t\treturn applyStyle.apply(builder, arguments);\n\t};\n\n\tbuilder._styles = _styles;\n\n\tconst self = this;\n\n\tObject.defineProperty(builder, 'level', {\n\t\tenumerable: true,\n\t\tget() {\n\t\t\treturn self.level;\n\t\t},\n\t\tset(level) {\n\t\t\tself.level = level;\n\t\t}\n\t});\n\n\tObject.defineProperty(builder, 'enabled', {\n\t\tenumerable: true,\n\t\tget() {\n\t\t\treturn self.enabled;\n\t\t},\n\t\tset(enabled) {\n\t\t\tself.enabled = enabled;\n\t\t}\n\t});\n\n\t// See below for fix regarding invisible grey/dim combination on Windows\n\tbuilder.hasGrey = this.hasGrey || key === 'gray' || key === 'grey';\n\n\t// `__proto__` is used because we must return a function, but there is\n\t// no way to create a function with a different prototype\n\tbuilder.__proto__ = proto; // eslint-disable-line no-proto\n\n\treturn builder;\n}\n\nfunction applyStyle() {\n\t// Support varags, but simply cast to string in case there's only one arg\n\tconst args = arguments;\n\tconst argsLen = args.length;\n\tlet str = String(arguments[0]);\n\n\tif (argsLen === 0) {\n\t\treturn '';\n\t}\n\n\tif (argsLen > 1) {\n\t\t// Don't slice `arguments`, it prevents V8 optimizations\n\t\tfor (let a = 1; a < argsLen; a++) {\n\t\t\tstr += ' ' + args[a];\n\t\t}\n\t}\n\n\tif (!this.enabled || this.level <= 0 || !str) {\n\t\treturn str;\n\t}\n\n\t// Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,\n\t// see https://github.com/chalk/chalk/issues/58\n\t// If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.\n\tconst originalDim = ansiStyles.dim.open;\n\tif (isSimpleWindowsTerm && this.hasGrey) {\n\t\tansiStyles.dim.open = '';\n\t}\n\n\tfor (const code of this._styles.slice().reverse()) {\n\t\t// Replace any instances already present with a re-opening code\n\t\t// otherwise only the part of the string until said closing code\n\t\t// will be colored, and the rest will simply be 'plain'.\n\t\tstr = code.open + str.replace(code.closeRe, code.open) + code.close;\n\n\t\t// Close the styling before a linebreak and reopen\n\t\t// after next line to fix a bleed issue on macOS\n\t\t// https://github.com/chalk/chalk/pull/92\n\t\tstr = str.replace(/\\r?\\n/g, `${code.close}$&${code.open}`);\n\t}\n\n\t// Reset the original `dim` if we changed it to work around the Windows dimmed gray issue\n\tansiStyles.dim.open = originalDim;\n\n\treturn str;\n}\n\nfunction chalkTag(chalk, strings) {\n\tif (!Array.isArray(strings)) {\n\t\t// If chalk() was called by itself or with a string,\n\t\t// return the string itself as a string.\n\t\treturn [].slice.call(arguments, 1).join(' ');\n\t}\n\n\tconst args = [].slice.call(arguments, 2);\n\tconst parts = [strings.raw[0]];\n\n\tfor (let i = 1; i < strings.length; i++) {\n\t\tparts.push(String(args[i - 1]).replace(/[{}\\\\]/g, '\\\\$&'));\n\t\tparts.push(String(strings.raw[i]));\n\t}\n\n\treturn template(chalk, parts.join(''));\n}\n\nObject.defineProperties(Chalk.prototype, styles);\n\nmodule.exports = Chalk(); // eslint-disable-line new-cap\nmodule.exports.supportsColor = supportsColor;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/chalk/index.js?");

/***/ }),

/***/ "./node_modules/chalk/templates.js":
/*!*****************************************!*\
  !*** ./node_modules/chalk/templates.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nconst TEMPLATE_REGEX = /(?:\\\\(u[a-f0-9]{4}|x[a-f0-9]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi;\nconst STYLE_REGEX = /(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g;\nconst STRING_REGEX = /^(['\"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/;\nconst ESCAPE_REGEX = /\\\\(u[0-9a-f]{4}|x[0-9a-f]{2}|.)|([^\\\\])/gi;\n\nconst ESCAPES = {\n\tn: '\\n',\n\tr: '\\r',\n\tt: '\\t',\n\tb: '\\b',\n\tf: '\\f',\n\tv: '\\v',\n\t0: '\\0',\n\t'\\\\': '\\\\',\n\te: '\\u001b',\n\ta: '\\u0007'\n};\n\nfunction unescape(c) {\n\tif ((c[0] === 'u' && c.length === 5) || (c[0] === 'x' && c.length === 3)) {\n\t\treturn String.fromCharCode(parseInt(c.slice(1), 16));\n\t}\n\n\treturn ESCAPES[c] || c;\n}\n\nfunction parseArguments(name, args) {\n\tconst results = [];\n\tconst chunks = args.trim().split(/\\s*,\\s*/g);\n\tlet matches;\n\n\tfor (const chunk of chunks) {\n\t\tif (!isNaN(chunk)) {\n\t\t\tresults.push(Number(chunk));\n\t\t} else if ((matches = chunk.match(STRING_REGEX))) {\n\t\t\tresults.push(matches[2].replace(ESCAPE_REGEX, (m, escape, chr) => escape ? unescape(escape) : chr));\n\t\t} else {\n\t\t\tthrow new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);\n\t\t}\n\t}\n\n\treturn results;\n}\n\nfunction parseStyle(style) {\n\tSTYLE_REGEX.lastIndex = 0;\n\n\tconst results = [];\n\tlet matches;\n\n\twhile ((matches = STYLE_REGEX.exec(style)) !== null) {\n\t\tconst name = matches[1];\n\n\t\tif (matches[2]) {\n\t\t\tconst args = parseArguments(name, matches[2]);\n\t\t\tresults.push([name].concat(args));\n\t\t} else {\n\t\t\tresults.push([name]);\n\t\t}\n\t}\n\n\treturn results;\n}\n\nfunction buildStyle(chalk, styles) {\n\tconst enabled = {};\n\n\tfor (const layer of styles) {\n\t\tfor (const style of layer.styles) {\n\t\t\tenabled[style[0]] = layer.inverse ? null : style.slice(1);\n\t\t}\n\t}\n\n\tlet current = chalk;\n\tfor (const styleName of Object.keys(enabled)) {\n\t\tif (Array.isArray(enabled[styleName])) {\n\t\t\tif (!(styleName in current)) {\n\t\t\t\tthrow new Error(`Unknown Chalk style: ${styleName}`);\n\t\t\t}\n\n\t\t\tif (enabled[styleName].length > 0) {\n\t\t\t\tcurrent = current[styleName].apply(current, enabled[styleName]);\n\t\t\t} else {\n\t\t\t\tcurrent = current[styleName];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn current;\n}\n\nmodule.exports = (chalk, tmp) => {\n\tconst styles = [];\n\tconst chunks = [];\n\tlet chunk = [];\n\n\t// eslint-disable-next-line max-params\n\ttmp.replace(TEMPLATE_REGEX, (m, escapeChar, inverse, style, close, chr) => {\n\t\tif (escapeChar) {\n\t\t\tchunk.push(unescape(escapeChar));\n\t\t} else if (style) {\n\t\t\tconst str = chunk.join('');\n\t\t\tchunk = [];\n\t\t\tchunks.push(styles.length === 0 ? str : buildStyle(chalk, styles)(str));\n\t\t\tstyles.push({inverse, styles: parseStyle(style)});\n\t\t} else if (close) {\n\t\t\tif (styles.length === 0) {\n\t\t\t\tthrow new Error('Found extraneous } in Chalk template literal');\n\t\t\t}\n\n\t\t\tchunks.push(buildStyle(chalk, styles)(chunk.join('')));\n\t\t\tchunk = [];\n\t\t\tstyles.pop();\n\t\t} else {\n\t\t\tchunk.push(chr);\n\t\t}\n\t});\n\n\tchunks.push(chunk.join(''));\n\n\tif (styles.length > 0) {\n\t\tconst errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\\`}\\`)`;\n\t\tthrow new Error(errMsg);\n\t}\n\n\treturn chunks.join('');\n};\n\n\n//# sourceURL=webpack:///./node_modules/chalk/templates.js?");

/***/ }),

/***/ "./node_modules/color-convert/conversions.js":
/*!***************************************************!*\
  !*** ./node_modules/color-convert/conversions.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* MIT license */\nvar cssKeywords = __webpack_require__(/*! ./css-keywords */ \"./node_modules/color-convert/css-keywords.js\");\n\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\n\nvar reverseKeywords = {};\nfor (var key in cssKeywords) {\n\tif (cssKeywords.hasOwnProperty(key)) {\n\t\treverseKeywords[cssKeywords[key].join()] = key;\n\t}\n}\n\nvar convert = module.exports = {\n\trgb: {channels: 3},\n\thsl: {channels: 3},\n\thsv: {channels: 3},\n\thwb: {channels: 3},\n\tcmyk: {channels: 4},\n\txyz: {channels: 3},\n\tlab: {channels: 3},\n\tlch: {channels: 3},\n\thex: {channels: 1},\n\tkeyword: {channels: 1},\n\tansi16: {channels: 1},\n\tansi256: {channels: 1},\n\thcg: {channels: 3}\n};\n\n// hide .channels property\nfor (var model in convert) {\n\tif (convert.hasOwnProperty(model)) {\n\t\tif (!('channels' in convert[model])) {\n\t\t\tthrow new Error('missing channels property: ' + model);\n\t\t}\n\n\t\tvar channels = convert[model].channels;\n\t\tdelete convert[model].channels;\n\t\tObject.defineProperty(convert[model], 'channels', {value: channels});\n\t}\n}\n\nconvert.rgb.hsl = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar min = Math.min(r, g, b);\n\tvar max = Math.max(r, g, b);\n\tvar delta = max - min;\n\tvar h;\n\tvar s;\n\tvar l;\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tl = (min + max) / 2;\n\n\tif (max === min) {\n\t\ts = 0;\n\t} else if (l <= 0.5) {\n\t\ts = delta / (max + min);\n\t} else {\n\t\ts = delta / (2 - max - min);\n\t}\n\n\treturn [h, s * 100, l * 100];\n};\n\nconvert.rgb.hsv = function (rgb) {\n\tvar r = rgb[0];\n\tvar g = rgb[1];\n\tvar b = rgb[2];\n\tvar min = Math.min(r, g, b);\n\tvar max = Math.max(r, g, b);\n\tvar delta = max - min;\n\tvar h;\n\tvar s;\n\tvar v;\n\n\tif (max === 0) {\n\t\ts = 0;\n\t} else {\n\t\ts = (delta / max * 1000) / 10;\n\t}\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tv = ((max / 255) * 1000) / 10;\n\n\treturn [h, s, v];\n};\n\nconvert.rgb.hwb = function (rgb) {\n\tvar r = rgb[0];\n\tvar g = rgb[1];\n\tvar b = rgb[2];\n\tvar h = convert.rgb.hsl(rgb)[0];\n\tvar w = 1 / 255 * Math.min(r, Math.min(g, b));\n\n\tb = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n\n\treturn [h, w * 100, b * 100];\n};\n\nconvert.rgb.cmyk = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar c;\n\tvar m;\n\tvar y;\n\tvar k;\n\n\tk = Math.min(1 - r, 1 - g, 1 - b);\n\tc = (1 - r - k) / (1 - k) || 0;\n\tm = (1 - g - k) / (1 - k) || 0;\n\ty = (1 - b - k) / (1 - k) || 0;\n\n\treturn [c * 100, m * 100, y * 100, k * 100];\n};\n\nconvert.rgb.keyword = function (rgb) {\n\treturn reverseKeywords[rgb.join()];\n};\n\nconvert.keyword.rgb = function (keyword) {\n\treturn cssKeywords[keyword];\n};\n\nconvert.rgb.xyz = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\n\t// assume sRGB\n\tr = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);\n\tg = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);\n\tb = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);\n\n\tvar x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n\tvar y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n\tvar z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n\treturn [x * 100, y * 100, z * 100];\n};\n\nconvert.rgb.lab = function (rgb) {\n\tvar xyz = convert.rgb.xyz(rgb);\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.hsl.rgb = function (hsl) {\n\tvar h = hsl[0] / 360;\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar t1;\n\tvar t2;\n\tvar t3;\n\tvar rgb;\n\tvar val;\n\n\tif (s === 0) {\n\t\tval = l * 255;\n\t\treturn [val, val, val];\n\t}\n\n\tif (l < 0.5) {\n\t\tt2 = l * (1 + s);\n\t} else {\n\t\tt2 = l + s - l * s;\n\t}\n\n\tt1 = 2 * l - t2;\n\n\trgb = [0, 0, 0];\n\tfor (var i = 0; i < 3; i++) {\n\t\tt3 = h + 1 / 3 * -(i - 1);\n\t\tif (t3 < 0) {\n\t\t\tt3++;\n\t\t}\n\t\tif (t3 > 1) {\n\t\t\tt3--;\n\t\t}\n\n\t\tif (6 * t3 < 1) {\n\t\t\tval = t1 + (t2 - t1) * 6 * t3;\n\t\t} else if (2 * t3 < 1) {\n\t\t\tval = t2;\n\t\t} else if (3 * t3 < 2) {\n\t\t\tval = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n\t\t} else {\n\t\t\tval = t1;\n\t\t}\n\n\t\trgb[i] = val * 255;\n\t}\n\n\treturn rgb;\n};\n\nconvert.hsl.hsv = function (hsl) {\n\tvar h = hsl[0];\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar sv;\n\tvar v;\n\n\tif (l === 0) {\n\t\t// no need to do calc on black\n\t\t// also avoids divide by 0 error\n\t\treturn [0, 0, 0];\n\t}\n\n\tl *= 2;\n\ts *= (l <= 1) ? l : 2 - l;\n\tv = (l + s) / 2;\n\tsv = (2 * s) / (l + s);\n\n\treturn [h, sv * 100, v * 100];\n};\n\nconvert.hsv.rgb = function (hsv) {\n\tvar h = hsv[0] / 60;\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar hi = Math.floor(h) % 6;\n\n\tvar f = h - Math.floor(h);\n\tvar p = 255 * v * (1 - s);\n\tvar q = 255 * v * (1 - (s * f));\n\tvar t = 255 * v * (1 - (s * (1 - f)));\n\tv *= 255;\n\n\tswitch (hi) {\n\t\tcase 0:\n\t\t\treturn [v, t, p];\n\t\tcase 1:\n\t\t\treturn [q, v, p];\n\t\tcase 2:\n\t\t\treturn [p, v, t];\n\t\tcase 3:\n\t\t\treturn [p, q, v];\n\t\tcase 4:\n\t\t\treturn [t, p, v];\n\t\tcase 5:\n\t\t\treturn [v, p, q];\n\t}\n};\n\nconvert.hsv.hsl = function (hsv) {\n\tvar h = hsv[0];\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar sl;\n\tvar l;\n\n\tl = (2 - s) * v;\n\tsl = s * v;\n\tsl /= (l <= 1) ? l : 2 - l;\n\tsl = sl || 0;\n\tl /= 2;\n\n\treturn [h, sl * 100, l * 100];\n};\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function (hwb) {\n\tvar h = hwb[0] / 360;\n\tvar wh = hwb[1] / 100;\n\tvar bl = hwb[2] / 100;\n\tvar ratio = wh + bl;\n\tvar i;\n\tvar v;\n\tvar f;\n\tvar n;\n\n\t// wh + bl cant be > 1\n\tif (ratio > 1) {\n\t\twh /= ratio;\n\t\tbl /= ratio;\n\t}\n\n\ti = Math.floor(6 * h);\n\tv = 1 - bl;\n\tf = 6 * h - i;\n\n\tif ((i & 0x01) !== 0) {\n\t\tf = 1 - f;\n\t}\n\n\tn = wh + f * (v - wh); // linear interpolation\n\n\tvar r;\n\tvar g;\n\tvar b;\n\tswitch (i) {\n\t\tdefault:\n\t\tcase 6:\n\t\tcase 0: r = v; g = n; b = wh; break;\n\t\tcase 1: r = n; g = v; b = wh; break;\n\t\tcase 2: r = wh; g = v; b = n; break;\n\t\tcase 3: r = wh; g = n; b = v; break;\n\t\tcase 4: r = n; g = wh; b = v; break;\n\t\tcase 5: r = v; g = wh; b = n; break;\n\t}\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.cmyk.rgb = function (cmyk) {\n\tvar c = cmyk[0] / 100;\n\tvar m = cmyk[1] / 100;\n\tvar y = cmyk[2] / 100;\n\tvar k = cmyk[3] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = 1 - Math.min(1, c * (1 - k) + k);\n\tg = 1 - Math.min(1, m * (1 - k) + k);\n\tb = 1 - Math.min(1, y * (1 - k) + k);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.rgb = function (xyz) {\n\tvar x = xyz[0] / 100;\n\tvar y = xyz[1] / 100;\n\tvar z = xyz[2] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n\tg = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n\tb = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n\t// assume sRGB\n\tr = r > 0.0031308\n\t\t? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\n\t\t: r *= 12.92;\n\n\tg = g > 0.0031308\n\t\t? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\n\t\t: g *= 12.92;\n\n\tb = b > 0.0031308\n\t\t? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\n\t\t: b *= 12.92;\n\n\tr = Math.min(Math.max(0, r), 1);\n\tg = Math.min(Math.max(0, g), 1);\n\tb = Math.min(Math.max(0, b), 1);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.lab = function (xyz) {\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.lab.xyz = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar y2;\n\n\tif (l <= 8) {\n\t\ty = (l * 100) / 903.3;\n\t\ty2 = (7.787 * (y / 100)) + (16 / 116);\n\t} else {\n\t\ty = 100 * Math.pow((l + 16) / 116, 3);\n\t\ty2 = Math.pow(y / 100, 1 / 3);\n\t}\n\n\tx = x / 95.047 <= 0.008856\n\t\t? x = (95.047 * ((a / 500) + y2 - (16 / 116))) / 7.787\n\t\t: 95.047 * Math.pow((a / 500) + y2, 3);\n\tz = z / 108.883 <= 0.008859\n\t\t? z = (108.883 * (y2 - (b / 200) - (16 / 116))) / 7.787\n\t\t: 108.883 * Math.pow(y2 - (b / 200), 3);\n\n\treturn [x, y, z];\n};\n\nconvert.lab.lch = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar hr;\n\tvar h;\n\tvar c;\n\n\thr = Math.atan2(b, a);\n\th = hr * 360 / 2 / Math.PI;\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tc = Math.sqrt(a * a + b * b);\n\n\treturn [l, c, h];\n};\n\nconvert.lch.lab = function (lch) {\n\tvar l = lch[0];\n\tvar c = lch[1];\n\tvar h = lch[2];\n\tvar a;\n\tvar b;\n\tvar hr;\n\n\thr = h / 360 * 2 * Math.PI;\n\ta = c * Math.cos(hr);\n\tb = c * Math.sin(hr);\n\n\treturn [l, a, b];\n};\n\nconvert.rgb.ansi16 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\tvar value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization\n\n\tvalue = Math.round(value / 50);\n\n\tif (value === 0) {\n\t\treturn 30;\n\t}\n\n\tvar ansi = 30\n\t\t+ ((Math.round(b / 255) << 2)\n\t\t| (Math.round(g / 255) << 1)\n\t\t| Math.round(r / 255));\n\n\tif (value === 2) {\n\t\tansi += 60;\n\t}\n\n\treturn ansi;\n};\n\nconvert.hsv.ansi16 = function (args) {\n\t// optimization here; we already know the value and don't need to get\n\t// it converted for us.\n\treturn convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\n\nconvert.rgb.ansi256 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\n\t// we use the extended greyscale palette here, with the exception of\n\t// black and white. normal palette only has 4 greyscale shades.\n\tif (r === g && g === b) {\n\t\tif (r < 8) {\n\t\t\treturn 16;\n\t\t}\n\n\t\tif (r > 248) {\n\t\t\treturn 231;\n\t\t}\n\n\t\treturn Math.round(((r - 8) / 247) * 24) + 232;\n\t}\n\n\tvar ansi = 16\n\t\t+ (36 * Math.round(r / 255 * 5))\n\t\t+ (6 * Math.round(g / 255 * 5))\n\t\t+ Math.round(b / 255 * 5);\n\n\treturn ansi;\n};\n\nconvert.ansi16.rgb = function (args) {\n\tvar color = args % 10;\n\n\t// handle greyscale\n\tif (color === 0 || color === 7) {\n\t\tif (args > 50) {\n\t\t\tcolor += 3.5;\n\t\t}\n\n\t\tcolor = color / 10.5 * 255;\n\n\t\treturn [color, color, color];\n\t}\n\n\tvar mult = (~~(args > 50) + 1) * 0.5;\n\tvar r = ((color & 1) * mult) * 255;\n\tvar g = (((color >> 1) & 1) * mult) * 255;\n\tvar b = (((color >> 2) & 1) * mult) * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.ansi256.rgb = function (args) {\n\t// handle greyscale\n\tif (args >= 232) {\n\t\tvar c = (args - 232) * 10 + 8;\n\t\treturn [c, c, c];\n\t}\n\n\targs -= 16;\n\n\tvar rem;\n\tvar r = Math.floor(args / 36) / 5 * 255;\n\tvar g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n\tvar b = (rem % 6) / 5 * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hex = function (args) {\n\tvar integer = ((Math.round(args[0]) & 0xFF) << 16)\n\t\t+ ((Math.round(args[1]) & 0xFF) << 8)\n\t\t+ (Math.round(args[2]) & 0xFF);\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.hex.rgb = function (args) {\n\tvar match = args.toString(16).match(/[a-f0-9]{6}/i);\n\tif (!match) {\n\t\treturn [0, 0, 0];\n\t}\n\n\tvar integer = parseInt(match[0], 16);\n\tvar r = (integer >> 16) & 0xFF;\n\tvar g = (integer >> 8) & 0xFF;\n\tvar b = integer & 0xFF;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hcg = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar max = Math.max(Math.max(r, g), b);\n\tvar min = Math.min(Math.min(r, g), b);\n\tvar chroma = (max - min);\n\tvar grayscale;\n\tvar hue;\n\n\tif (chroma < 1) {\n\t\tgrayscale = min / (1 - chroma);\n\t} else {\n\t\tgrayscale = 0;\n\t}\n\n\tif (chroma <= 0) {\n\t\thue = 0;\n\t} else\n\tif (max === r) {\n\t\thue = ((g - b) / chroma) % 6;\n\t} else\n\tif (max === g) {\n\t\thue = 2 + (b - r) / chroma;\n\t} else {\n\t\thue = 4 + (r - g) / chroma + 4;\n\t}\n\n\thue /= 6;\n\thue %= 1;\n\n\treturn [hue * 360, chroma * 100, grayscale * 100];\n};\n\nconvert.hsl.hcg = function (hsl) {\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar c = 1;\n\tvar f = 0;\n\n\tif (l < 0.5) {\n\t\tc = 2.0 * s * l;\n\t} else {\n\t\tc = 2.0 * s * (1.0 - l);\n\t}\n\n\tif (c < 1.0) {\n\t\tf = (l - 0.5 * c) / (1.0 - c);\n\t}\n\n\treturn [hsl[0], c * 100, f * 100];\n};\n\nconvert.hsv.hcg = function (hsv) {\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\n\tvar c = s * v;\n\tvar f = 0;\n\n\tif (c < 1.0) {\n\t\tf = (v - c) / (1 - c);\n\t}\n\n\treturn [hsv[0], c * 100, f * 100];\n};\n\nconvert.hcg.rgb = function (hcg) {\n\tvar h = hcg[0] / 360;\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tif (c === 0.0) {\n\t\treturn [g * 255, g * 255, g * 255];\n\t}\n\n\tvar pure = [0, 0, 0];\n\tvar hi = (h % 1) * 6;\n\tvar v = hi % 1;\n\tvar w = 1 - v;\n\tvar mg = 0;\n\n\tswitch (Math.floor(hi)) {\n\t\tcase 0:\n\t\t\tpure[0] = 1; pure[1] = v; pure[2] = 0; break;\n\t\tcase 1:\n\t\t\tpure[0] = w; pure[1] = 1; pure[2] = 0; break;\n\t\tcase 2:\n\t\t\tpure[0] = 0; pure[1] = 1; pure[2] = v; break;\n\t\tcase 3:\n\t\t\tpure[0] = 0; pure[1] = w; pure[2] = 1; break;\n\t\tcase 4:\n\t\t\tpure[0] = v; pure[1] = 0; pure[2] = 1; break;\n\t\tdefault:\n\t\t\tpure[0] = 1; pure[1] = 0; pure[2] = w;\n\t}\n\n\tmg = (1.0 - c) * g;\n\n\treturn [\n\t\t(c * pure[0] + mg) * 255,\n\t\t(c * pure[1] + mg) * 255,\n\t\t(c * pure[2] + mg) * 255\n\t];\n};\n\nconvert.hcg.hsv = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar v = c + g * (1.0 - c);\n\tvar f = 0;\n\n\tif (v > 0.0) {\n\t\tf = c / v;\n\t}\n\n\treturn [hcg[0], f * 100, v * 100];\n};\n\nconvert.hcg.hsl = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar l = g * (1.0 - c) + 0.5 * c;\n\tvar s = 0;\n\n\tif (l > 0.0 && l < 0.5) {\n\t\ts = c / (2 * l);\n\t} else\n\tif (l >= 0.5 && l < 1.0) {\n\t\ts = c / (2 * (1 - l));\n\t}\n\n\treturn [hcg[0], s * 100, l * 100];\n};\n\n\n//# sourceURL=webpack:///./node_modules/color-convert/conversions.js?");

/***/ }),

/***/ "./node_modules/color-convert/css-keywords.js":
/*!****************************************************!*\
  !*** ./node_modules/color-convert/css-keywords.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = {\n\taliceblue: [240, 248, 255],\n\tantiquewhite: [250, 235, 215],\n\taqua: [0, 255, 255],\n\taquamarine: [127, 255, 212],\n\tazure: [240, 255, 255],\n\tbeige: [245, 245, 220],\n\tbisque: [255, 228, 196],\n\tblack: [0, 0, 0],\n\tblanchedalmond: [255, 235, 205],\n\tblue: [0, 0, 255],\n\tblueviolet: [138, 43, 226],\n\tbrown: [165, 42, 42],\n\tburlywood: [222, 184, 135],\n\tcadetblue: [95, 158, 160],\n\tchartreuse: [127, 255, 0],\n\tchocolate: [210, 105, 30],\n\tcoral: [255, 127, 80],\n\tcornflowerblue: [100, 149, 237],\n\tcornsilk: [255, 248, 220],\n\tcrimson: [220, 20, 60],\n\tcyan: [0, 255, 255],\n\tdarkblue: [0, 0, 139],\n\tdarkcyan: [0, 139, 139],\n\tdarkgoldenrod: [184, 134, 11],\n\tdarkgray: [169, 169, 169],\n\tdarkgreen: [0, 100, 0],\n\tdarkgrey: [169, 169, 169],\n\tdarkkhaki: [189, 183, 107],\n\tdarkmagenta: [139, 0, 139],\n\tdarkolivegreen: [85, 107, 47],\n\tdarkorange: [255, 140, 0],\n\tdarkorchid: [153, 50, 204],\n\tdarkred: [139, 0, 0],\n\tdarksalmon: [233, 150, 122],\n\tdarkseagreen: [143, 188, 143],\n\tdarkslateblue: [72, 61, 139],\n\tdarkslategray: [47, 79, 79],\n\tdarkslategrey: [47, 79, 79],\n\tdarkturquoise: [0, 206, 209],\n\tdarkviolet: [148, 0, 211],\n\tdeeppink: [255, 20, 147],\n\tdeepskyblue: [0, 191, 255],\n\tdimgray: [105, 105, 105],\n\tdimgrey: [105, 105, 105],\n\tdodgerblue: [30, 144, 255],\n\tfirebrick: [178, 34, 34],\n\tfloralwhite: [255, 250, 240],\n\tforestgreen: [34, 139, 34],\n\tfuchsia: [255, 0, 255],\n\tgainsboro: [220, 220, 220],\n\tghostwhite: [248, 248, 255],\n\tgold: [255, 215, 0],\n\tgoldenrod: [218, 165, 32],\n\tgray: [128, 128, 128],\n\tgreen: [0, 128, 0],\n\tgreenyellow: [173, 255, 47],\n\tgrey: [128, 128, 128],\n\thoneydew: [240, 255, 240],\n\thotpink: [255, 105, 180],\n\tindianred: [205, 92, 92],\n\tindigo: [75, 0, 130],\n\tivory: [255, 255, 240],\n\tkhaki: [240, 230, 140],\n\tlavender: [230, 230, 250],\n\tlavenderblush: [255, 240, 245],\n\tlawngreen: [124, 252, 0],\n\tlemonchiffon: [255, 250, 205],\n\tlightblue: [173, 216, 230],\n\tlightcoral: [240, 128, 128],\n\tlightcyan: [224, 255, 255],\n\tlightgoldenrodyellow: [250, 250, 210],\n\tlightgray: [211, 211, 211],\n\tlightgreen: [144, 238, 144],\n\tlightgrey: [211, 211, 211],\n\tlightpink: [255, 182, 193],\n\tlightsalmon: [255, 160, 122],\n\tlightseagreen: [32, 178, 170],\n\tlightskyblue: [135, 206, 250],\n\tlightslategray: [119, 136, 153],\n\tlightslategrey: [119, 136, 153],\n\tlightsteelblue: [176, 196, 222],\n\tlightyellow: [255, 255, 224],\n\tlime: [0, 255, 0],\n\tlimegreen: [50, 205, 50],\n\tlinen: [250, 240, 230],\n\tmagenta: [255, 0, 255],\n\tmaroon: [128, 0, 0],\n\tmediumaquamarine: [102, 205, 170],\n\tmediumblue: [0, 0, 205],\n\tmediumorchid: [186, 85, 211],\n\tmediumpurple: [147, 112, 219],\n\tmediumseagreen: [60, 179, 113],\n\tmediumslateblue: [123, 104, 238],\n\tmediumspringgreen: [0, 250, 154],\n\tmediumturquoise: [72, 209, 204],\n\tmediumvioletred: [199, 21, 133],\n\tmidnightblue: [25, 25, 112],\n\tmintcream: [245, 255, 250],\n\tmistyrose: [255, 228, 225],\n\tmoccasin: [255, 228, 181],\n\tnavajowhite: [255, 222, 173],\n\tnavy: [0, 0, 128],\n\toldlace: [253, 245, 230],\n\tolive: [128, 128, 0],\n\tolivedrab: [107, 142, 35],\n\torange: [255, 165, 0],\n\torangered: [255, 69, 0],\n\torchid: [218, 112, 214],\n\tpalegoldenrod: [238, 232, 170],\n\tpalegreen: [152, 251, 152],\n\tpaleturquoise: [175, 238, 238],\n\tpalevioletred: [219, 112, 147],\n\tpapayawhip: [255, 239, 213],\n\tpeachpuff: [255, 218, 185],\n\tperu: [205, 133, 63],\n\tpink: [255, 192, 203],\n\tplum: [221, 160, 221],\n\tpowderblue: [176, 224, 230],\n\tpurple: [128, 0, 128],\n\trebeccapurple: [102, 51, 153],\n\tred: [255, 0, 0],\n\trosybrown: [188, 143, 143],\n\troyalblue: [65, 105, 225],\n\tsaddlebrown: [139, 69, 19],\n\tsalmon: [250, 128, 114],\n\tsandybrown: [244, 164, 96],\n\tseagreen: [46, 139, 87],\n\tseashell: [255, 245, 238],\n\tsienna: [160, 82, 45],\n\tsilver: [192, 192, 192],\n\tskyblue: [135, 206, 235],\n\tslateblue: [106, 90, 205],\n\tslategray: [112, 128, 144],\n\tslategrey: [112, 128, 144],\n\tsnow: [255, 250, 250],\n\tspringgreen: [0, 255, 127],\n\tsteelblue: [70, 130, 180],\n\ttan: [210, 180, 140],\n\tteal: [0, 128, 128],\n\tthistle: [216, 191, 216],\n\ttomato: [255, 99, 71],\n\tturquoise: [64, 224, 208],\n\tviolet: [238, 130, 238],\n\twheat: [245, 222, 179],\n\twhite: [255, 255, 255],\n\twhitesmoke: [245, 245, 245],\n\tyellow: [255, 255, 0],\n\tyellowgreen: [154, 205, 50]\n};\n\n\n\n//# sourceURL=webpack:///./node_modules/color-convert/css-keywords.js?");

/***/ }),

/***/ "./node_modules/color-convert/index.js":
/*!*********************************************!*\
  !*** ./node_modules/color-convert/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var conversions = __webpack_require__(/*! ./conversions */ \"./node_modules/color-convert/conversions.js\");\nvar route = __webpack_require__(/*! ./route */ \"./node_modules/color-convert/route.js\");\n\nvar convert = {};\n\nvar models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\tvar result = fn(args);\n\n\t\t// we're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (var len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(function (fromModel) {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\n\tvar routes = route(fromModel);\n\tvar routeModels = Object.keys(routes);\n\n\trouteModels.forEach(function (toModel) {\n\t\tvar fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nmodule.exports = convert;\n\n\n//# sourceURL=webpack:///./node_modules/color-convert/index.js?");

/***/ }),

/***/ "./node_modules/color-convert/route.js":
/*!*********************************************!*\
  !*** ./node_modules/color-convert/route.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var conversions = __webpack_require__(/*! ./conversions */ \"./node_modules/color-convert/conversions.js\");\n\n/*\n\tthis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/\n\n// https://jsperf.com/object-keys-vs-for-in-with-closure/3\nvar models = Object.keys(conversions);\n\nfunction buildGraph() {\n\tvar graph = {};\n\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tgraph[models[i]] = {\n\t\t\t// http://jsperf.com/1-vs-infinity\n\t\t\t// micro-opt, but this is simple.\n\t\t\tdistance: -1,\n\t\t\tparent: null\n\t\t};\n\t}\n\n\treturn graph;\n}\n\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n\tvar graph = buildGraph();\n\tvar queue = [fromModel]; // unshift -> queue -> pop\n\n\tgraph[fromModel].distance = 0;\n\n\twhile (queue.length) {\n\t\tvar current = queue.pop();\n\t\tvar adjacents = Object.keys(conversions[current]);\n\n\t\tfor (var len = adjacents.length, i = 0; i < len; i++) {\n\t\t\tvar adjacent = adjacents[i];\n\t\t\tvar node = graph[adjacent];\n\n\t\t\tif (node.distance === -1) {\n\t\t\t\tnode.distance = graph[current].distance + 1;\n\t\t\t\tnode.parent = current;\n\t\t\t\tqueue.unshift(adjacent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn graph;\n}\n\nfunction link(from, to) {\n\treturn function (args) {\n\t\treturn to(from(args));\n\t};\n}\n\nfunction wrapConversion(toModel, graph) {\n\tvar path = [graph[toModel].parent, toModel];\n\tvar fn = conversions[graph[toModel].parent][toModel];\n\n\tvar cur = graph[toModel].parent;\n\twhile (graph[cur].parent) {\n\t\tpath.unshift(graph[cur].parent);\n\t\tfn = link(conversions[graph[cur].parent][cur], fn);\n\t\tcur = graph[cur].parent;\n\t}\n\n\tfn.conversion = path;\n\treturn fn;\n}\n\nmodule.exports = function (fromModel) {\n\tvar graph = deriveBFS(fromModel);\n\tvar conversion = {};\n\n\tvar models = Object.keys(graph);\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tvar toModel = models[i];\n\t\tvar node = graph[toModel];\n\n\t\tif (node.parent === null) {\n\t\t\t// no possible conversion, or this node is the source model.\n\t\t\tcontinue;\n\t\t}\n\n\t\tconversion[toModel] = wrapConversion(toModel, graph);\n\t}\n\n\treturn conversion;\n};\n\n\n\n//# sourceURL=webpack:///./node_modules/color-convert/route.js?");

/***/ }),

/***/ "./node_modules/color-name/index.js":
/*!******************************************!*\
  !*** ./node_modules/color-name/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n\n\n//# sourceURL=webpack:///./node_modules/color-name/index.js?");

/***/ }),

/***/ "./node_modules/color-string/index.js":
/*!********************************************!*\
  !*** ./node_modules/color-string/index.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* MIT license */\nvar colorNames = __webpack_require__(/*! color-name */ \"./node_modules/color-name/index.js\");\nvar swizzle = __webpack_require__(/*! simple-swizzle */ \"./node_modules/simple-swizzle/index.js\");\n\nvar reverseNames = {};\n\n// create a list of reverse color names\nfor (var name in colorNames) {\n\tif (colorNames.hasOwnProperty(name)) {\n\t\treverseNames[colorNames[name]] = name;\n\t}\n}\n\nvar cs = module.exports = {\n\tto: {},\n\tget: {}\n};\n\ncs.get = function (string) {\n\tvar prefix = string.substring(0, 3).toLowerCase();\n\tvar val;\n\tvar model;\n\tswitch (prefix) {\n\t\tcase 'hsl':\n\t\t\tval = cs.get.hsl(string);\n\t\t\tmodel = 'hsl';\n\t\t\tbreak;\n\t\tcase 'hwb':\n\t\t\tval = cs.get.hwb(string);\n\t\t\tmodel = 'hwb';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tval = cs.get.rgb(string);\n\t\t\tmodel = 'rgb';\n\t\t\tbreak;\n\t}\n\n\tif (!val) {\n\t\treturn null;\n\t}\n\n\treturn {model: model, value: val};\n};\n\ncs.get.rgb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar abbr = /^#([a-f0-9]{3,4})$/i;\n\tvar hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;\n\tvar rgba = /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar keyword = /(\\D+)/;\n\n\tvar rgb = [0, 0, 0, 1];\n\tvar match;\n\tvar i;\n\tvar hexAlpha;\n\n\tif (match = string.match(hex)) {\n\t\thexAlpha = match[2];\n\t\tmatch = match[1];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\t// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19\n\t\t\tvar i2 = i * 2;\n\t\t\trgb[i] = parseInt(match.slice(i2, i2 + 2), 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = Math.round((parseInt(hexAlpha, 16) / 255) * 100) / 100;\n\t\t}\n\t} else if (match = string.match(abbr)) {\n\t\tmatch = match[1];\n\t\thexAlpha = match[3];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i] + match[i], 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = Math.round((parseInt(hexAlpha + hexAlpha, 16) / 255) * 100) / 100;\n\t\t}\n\t} else if (match = string.match(rgba)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i + 1], 0);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\trgb[3] = parseFloat(match[4]);\n\t\t}\n\t} else if (match = string.match(per)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\trgb[3] = parseFloat(match[4]);\n\t\t}\n\t} else if (match = string.match(keyword)) {\n\t\tif (match[1] === 'transparent') {\n\t\t\treturn [0, 0, 0, 0];\n\t\t}\n\n\t\trgb = colorNames[match[1]];\n\n\t\tif (!rgb) {\n\t\t\treturn null;\n\t\t}\n\n\t\trgb[3] = 1;\n\n\t\treturn rgb;\n\t} else {\n\t\treturn null;\n\t}\n\n\tfor (i = 0; i < 3; i++) {\n\t\trgb[i] = clamp(rgb[i], 0, 255);\n\t}\n\trgb[3] = clamp(rgb[3], 0, 1);\n\n\treturn rgb;\n};\n\ncs.get.hsl = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hsl = /^hsla?\\(\\s*([+-]?(?:\\d*\\.)?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar match = string.match(hsl);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = (parseFloat(match[1]) + 360) % 360;\n\t\tvar s = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar l = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\n\t\treturn [h, s, l, a];\n\t}\n\n\treturn null;\n};\n\ncs.get.hwb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hwb = /^hwb\\(\\s*([+-]?\\d*[\\.]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar match = string.match(hwb);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = ((parseFloat(match[1]) % 360) + 360) % 360;\n\t\tvar w = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar b = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\t\treturn [h, w, b, a];\n\t}\n\n\treturn null;\n};\n\ncs.to.hex = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn (\n\t\t'#' +\n\t\thexDouble(rgba[0]) +\n\t\thexDouble(rgba[1]) +\n\t\thexDouble(rgba[2]) +\n\t\t(rgba[3] < 1\n\t\t\t? (hexDouble(Math.round(rgba[3] * 255)))\n\t\t\t: '')\n\t);\n};\n\ncs.to.rgb = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'\n\t\t: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';\n};\n\ncs.to.rgb.percent = function () {\n\tvar rgba = swizzle(arguments);\n\n\tvar r = Math.round(rgba[0] / 255 * 100);\n\tvar g = Math.round(rgba[1] / 255 * 100);\n\tvar b = Math.round(rgba[2] / 255 * 100);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'\n\t\t: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';\n};\n\ncs.to.hsl = function () {\n\tvar hsla = swizzle(arguments);\n\treturn hsla.length < 4 || hsla[3] === 1\n\t\t? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'\n\t\t: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';\n};\n\n// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\n// (hwb have alpha optional & 1 is default value)\ncs.to.hwb = function () {\n\tvar hwba = swizzle(arguments);\n\n\tvar a = '';\n\tif (hwba.length >= 4 && hwba[3] !== 1) {\n\t\ta = ', ' + hwba[3];\n\t}\n\n\treturn 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';\n};\n\ncs.to.keyword = function (rgb) {\n\treturn reverseNames[rgb.slice(0, 3)];\n};\n\n// helpers\nfunction clamp(num, min, max) {\n\treturn Math.min(Math.max(min, num), max);\n}\n\nfunction hexDouble(num) {\n\tvar str = num.toString(16).toUpperCase();\n\treturn (str.length < 2) ? '0' + str : str;\n}\n\n\n//# sourceURL=webpack:///./node_modules/color-string/index.js?");

/***/ }),

/***/ "./node_modules/core-util-is/lib/util.js":
/*!***********************************************!*\
  !*** ./node_modules/core-util-is/lib/util.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\n\nfunction isArray(arg) {\n  if (Array.isArray) {\n    return Array.isArray(arg);\n  }\n  return objectToString(arg) === '[object Array]';\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = Buffer.isBuffer;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack:///./node_modules/core-util-is/lib/util.js?");

/***/ }),

/***/ "./node_modules/ease-component/index.js":
/*!**********************************************!*\
  !*** ./node_modules/ease-component/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\n// easing functions from \"Tween.js\"\n\nexports.linear = function(n){\n  return n;\n};\n\nexports.inQuad = function(n){\n  return n * n;\n};\n\nexports.outQuad = function(n){\n  return n * (2 - n);\n};\n\nexports.inOutQuad = function(n){\n  n *= 2;\n  if (n < 1) return 0.5 * n * n;\n  return - 0.5 * (--n * (n - 2) - 1);\n};\n\nexports.inCube = function(n){\n  return n * n * n;\n};\n\nexports.outCube = function(n){\n  return --n * n * n + 1;\n};\n\nexports.inOutCube = function(n){\n  n *= 2;\n  if (n < 1) return 0.5 * n * n * n;\n  return 0.5 * ((n -= 2 ) * n * n + 2);\n};\n\nexports.inQuart = function(n){\n  return n * n * n * n;\n};\n\nexports.outQuart = function(n){\n  return 1 - (--n * n * n * n);\n};\n\nexports.inOutQuart = function(n){\n  n *= 2;\n  if (n < 1) return 0.5 * n * n * n * n;\n  return -0.5 * ((n -= 2) * n * n * n - 2);\n};\n\nexports.inQuint = function(n){\n  return n * n * n * n * n;\n}\n\nexports.outQuint = function(n){\n  return --n * n * n * n * n + 1;\n}\n\nexports.inOutQuint = function(n){\n  n *= 2;\n  if (n < 1) return 0.5 * n * n * n * n * n;\n  return 0.5 * ((n -= 2) * n * n * n * n + 2);\n};\n\nexports.inSine = function(n){\n  return 1 - Math.cos(n * Math.PI / 2 );\n};\n\nexports.outSine = function(n){\n  return Math.sin(n * Math.PI / 2);\n};\n\nexports.inOutSine = function(n){\n  return .5 * (1 - Math.cos(Math.PI * n));\n};\n\nexports.inExpo = function(n){\n  return 0 == n ? 0 : Math.pow(1024, n - 1);\n};\n\nexports.outExpo = function(n){\n  return 1 == n ? n : 1 - Math.pow(2, -10 * n);\n};\n\nexports.inOutExpo = function(n){\n  if (0 == n) return 0;\n  if (1 == n) return 1;\n  if ((n *= 2) < 1) return .5 * Math.pow(1024, n - 1);\n  return .5 * (-Math.pow(2, -10 * (n - 1)) + 2);\n};\n\nexports.inCirc = function(n){\n  return 1 - Math.sqrt(1 - n * n);\n};\n\nexports.outCirc = function(n){\n  return Math.sqrt(1 - (--n * n));\n};\n\nexports.inOutCirc = function(n){\n  n *= 2\n  if (n < 1) return -0.5 * (Math.sqrt(1 - n * n) - 1);\n  return 0.5 * (Math.sqrt(1 - (n -= 2) * n) + 1);\n};\n\nexports.inBack = function(n){\n  var s = 1.70158;\n  return n * n * (( s + 1 ) * n - s);\n};\n\nexports.outBack = function(n){\n  var s = 1.70158;\n  return --n * n * ((s + 1) * n + s) + 1;\n};\n\nexports.inOutBack = function(n){\n  var s = 1.70158 * 1.525;\n  if ( ( n *= 2 ) < 1 ) return 0.5 * ( n * n * ( ( s + 1 ) * n - s ) );\n  return 0.5 * ( ( n -= 2 ) * n * ( ( s + 1 ) * n + s ) + 2 );\n};\n\nexports.inBounce = function(n){\n  return 1 - exports.outBounce(1 - n);\n};\n\nexports.outBounce = function(n){\n  if ( n < ( 1 / 2.75 ) ) {\n    return 7.5625 * n * n;\n  } else if ( n < ( 2 / 2.75 ) ) {\n    return 7.5625 * ( n -= ( 1.5 / 2.75 ) ) * n + 0.75;\n  } else if ( n < ( 2.5 / 2.75 ) ) {\n    return 7.5625 * ( n -= ( 2.25 / 2.75 ) ) * n + 0.9375;\n  } else {\n    return 7.5625 * ( n -= ( 2.625 / 2.75 ) ) * n + 0.984375;\n  }\n};\n\nexports.inOutBounce = function(n){\n  if (n < .5) return exports.inBounce(n * 2) * .5;\n  return exports.outBounce(n * 2 - 1) * .5 + .5;\n};\n\n// aliases\n\nexports['in-quad'] = exports.inQuad;\nexports['out-quad'] = exports.outQuad;\nexports['in-out-quad'] = exports.inOutQuad;\nexports['in-cube'] = exports.inCube;\nexports['out-cube'] = exports.outCube;\nexports['in-out-cube'] = exports.inOutCube;\nexports['in-quart'] = exports.inQuart;\nexports['out-quart'] = exports.outQuart;\nexports['in-out-quart'] = exports.inOutQuart;\nexports['in-quint'] = exports.inQuint;\nexports['out-quint'] = exports.outQuint;\nexports['in-out-quint'] = exports.inOutQuint;\nexports['in-sine'] = exports.inSine;\nexports['out-sine'] = exports.outSine;\nexports['in-out-sine'] = exports.inOutSine;\nexports['in-expo'] = exports.inExpo;\nexports['out-expo'] = exports.outExpo;\nexports['in-out-expo'] = exports.inOutExpo;\nexports['in-circ'] = exports.inCirc;\nexports['out-circ'] = exports.outCirc;\nexports['in-out-circ'] = exports.inOutCirc;\nexports['in-back'] = exports.inBack;\nexports['out-back'] = exports.outBack;\nexports['in-out-back'] = exports.inOutBack;\nexports['in-bounce'] = exports.inBounce;\nexports['out-bounce'] = exports.outBounce;\nexports['in-out-bounce'] = exports.inOutBounce;\n\n\n//# sourceURL=webpack:///./node_modules/ease-component/index.js?");

/***/ }),

/***/ "./node_modules/escape-string-regexp/index.js":
/*!****************************************************!*\
  !*** ./node_modules/escape-string-regexp/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g;\n\nmodule.exports = function (str) {\n\tif (typeof str !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\treturn str.replace(matchOperatorsRe, '\\\\$&');\n};\n\n\n//# sourceURL=webpack:///./node_modules/escape-string-regexp/index.js?");

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n//# sourceURL=webpack:///./node_modules/events/events.js?");

/***/ }),

/***/ "./node_modules/firmata/lib/com.js":
/*!*****************************************!*\
  !*** ./node_modules/firmata/lib/com.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Buffer, process) {\n\nconst Emitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\n\nclass SerialPort extends Emitter {\n  constructor(path/*, options, openCallback*/) {\n    super();\n    this.isOpen = true;\n    this.baudRate = 0;\n    this.path = path;\n  }\n\n  write(buffer) {\n    // Tests are written to work with arrays not buffers\n    // this shouldn't impact the data, just the container\n    // This also should be changed in future test rewrites\n    /* istanbul ignore else */\n    if (Buffer.isBuffer(buffer)) {\n      buffer = Array.from(buffer);\n    }\n\n    this.lastWrite = buffer;\n    this.emit(\"write\", buffer);\n  }\n}\n\nlet com;\nlet sp;\nlet stub = {\n  SerialPort,\n  list() {\n    /* istanbul ignore next */\n    return Promise.resolve([]);\n  },\n};\n\ntry {\n  /* istanbul ignore if */\n  if (process.browser || parseFloat(process.versions.nw) >= 0.13) {\n    com = __webpack_require__(/*! browser-serialport */ \"./node_modules/browser-serialport/index.js\");\n  } else {\n    /* istanbul ignore else */\n    if (process.env.IS_TEST_MODE) {\n      com = stub;\n    } else {\n      sp = __webpack_require__(/*! serialport */ \"./src/noop.js\");\n      com = {\n        SerialPort: sp,\n        list: sp.list,\n      };\n    }\n  }\n} catch (err) {}\n\n\n/* istanbul ignore if */\nif (com == null) {\n  if (process.env.IS_TEST_MODE) {\n    com = stub;\n  } else {\n    console.log(\"It looks like serialport didn't compile properly. This is a common problem and its fix is well documented here https://github.com/voodootikigod/node-serialport#to-install\");\n    console.log(\"The result of requiring the package is: \", sp);\n    throw \"Missing serialport dependency\";\n  }\n}\n\nmodule.exports = com;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/firmata/lib/com.js?");

/***/ }),

/***/ "./node_modules/firmata/lib/encoder7bit.js":
/*!*************************************************!*\
  !*** ./node_modules/firmata/lib/encoder7bit.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * \"Inspired\" by Encoder7Bit.h/Encoder7Bit.cpp in the\n * Firmata source code.\n */\nmodule.exports = {\n  to7BitArray(data) {\n    let shift = 0;\n    let previous = 0;\n    const output = [];\n\n    data.forEach(byte => {\n      if (shift === 0) {\n        output.push(byte & 0x7f);\n        shift++;\n        previous = byte >> 7;\n      } else {\n        output.push(((byte << shift) & 0x7f) | previous);\n        if (shift === 6) {\n          output.push(byte >> 1);\n          shift = 0;\n        } else {\n          shift++;\n          previous = byte >> (8 - shift);\n        }\n      }\n    });\n\n    /* istanbul ignore else */\n    if (shift > 0) {\n      output.push(previous);\n    }\n\n    return output;\n  },\n  from7BitArray(encoded) {\n    const expectedBytes = (encoded.length) * 7 >> 3;\n    const decoded = [];\n\n    for (let i = 0; i < expectedBytes; i++) {\n      const j = i << 3;\n      const pos = parseInt(j / 7, 10);\n      const shift = j % 7;\n      decoded[i] = (encoded[pos] >> shift) | ((encoded[pos + 1] << (7 - shift)) & 0xFF);\n    }\n\n    return decoded;\n  }\n};\n\n\n//# sourceURL=webpack:///./node_modules/firmata/lib/encoder7bit.js?");

/***/ }),

/***/ "./node_modules/firmata/lib/firmata.js":
/*!*********************************************!*\
  !*** ./node_modules/firmata/lib/firmata.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Buffer, process) {\n\n// Built-in Dependencies\nconst Emitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\n\n// Internal Dependencies\nconst Encoder7Bit = __webpack_require__(/*! ./encoder7bit */ \"./node_modules/firmata/lib/encoder7bit.js\");\nconst OneWire = __webpack_require__(/*! ./onewireutils */ \"./node_modules/firmata/lib/onewireutils.js\");\nconst com = __webpack_require__(/*! ./com */ \"./node_modules/firmata/lib/com.js\");\n\n// Program specifics\nconst i2cActive = new Map();\n\n/**\n * constants\n */\n\nconst ANALOG_MAPPING_QUERY = 0x69;\nconst ANALOG_MAPPING_RESPONSE = 0x6A;\nconst ANALOG_MESSAGE = 0xE0;\nconst CAPABILITY_QUERY = 0x6B;\nconst CAPABILITY_RESPONSE = 0x6C;\nconst DIGITAL_MESSAGE = 0x90;\nconst END_SYSEX = 0xF7;\nconst EXTENDED_ANALOG = 0x6F;\nconst I2C_CONFIG = 0x78;\nconst I2C_REPLY = 0x77;\nconst I2C_REQUEST = 0x76;\nconst I2C_READ_MASK = 0x18;   // 0b00011000\n// const I2C_END_TX_MASK = 0x40; // 0b01000000\nconst ONEWIRE_CONFIG_REQUEST = 0x41;\nconst ONEWIRE_DATA = 0x73;\nconst ONEWIRE_DELAY_REQUEST_BIT = 0x10;\nconst ONEWIRE_READ_REPLY = 0x43;\nconst ONEWIRE_READ_REQUEST_BIT = 0x08;\nconst ONEWIRE_RESET_REQUEST_BIT = 0x01;\nconst ONEWIRE_SEARCH_ALARMS_REPLY = 0x45;\nconst ONEWIRE_SEARCH_ALARMS_REQUEST = 0x44;\nconst ONEWIRE_SEARCH_REPLY = 0x42;\nconst ONEWIRE_SEARCH_REQUEST = 0x40;\nconst ONEWIRE_WITHDATA_REQUEST_BITS = 0x3C;\nconst ONEWIRE_WRITE_REQUEST_BIT = 0x20;\nconst PIN_MODE = 0xF4;\nconst PIN_STATE_QUERY = 0x6D;\nconst PIN_STATE_RESPONSE = 0x6E;\nconst PING_READ = 0x75;\n// const PULSE_IN = 0x74;\n// const PULSE_OUT = 0x73;\nconst QUERY_FIRMWARE = 0x79;\nconst REPORT_ANALOG = 0xC0;\nconst REPORT_DIGITAL = 0xD0;\nconst REPORT_VERSION = 0xF9;\nconst SAMPLING_INTERVAL = 0x7A;\nconst SERVO_CONFIG = 0x70;\nconst SERIAL_MESSAGE = 0x60;\nconst SERIAL_CONFIG = 0x10;\nconst SERIAL_WRITE = 0x20;\nconst SERIAL_READ = 0x30;\nconst SERIAL_REPLY = 0x40;\nconst SERIAL_CLOSE = 0x50;\nconst SERIAL_FLUSH = 0x60;\nconst SERIAL_LISTEN = 0x70;\nconst START_SYSEX = 0xF0;\nconst STEPPER = 0x72;\nconst ACCELSTEPPER = 0x62;\nconst STRING_DATA = 0x71;\nconst SYSTEM_RESET = 0xFF;\n\nconst MAX_PIN_COUNT = 128;\n\n/**\n * MIDI_RESPONSE contains functions to be called when we receive a MIDI message from the arduino.\n * used as a switch object as seen here http://james.padolsey.com/javascript/how-to-avoid-switch-case-syndrome/\n * @private\n */\n\nconst MIDI_RESPONSE = {};\n\n/**\n * Handles a REPORT_VERSION response and emits the reportversion event.\n * @private\n * @param {Board} board the current arduino board we are working with.\n */\n\nMIDI_RESPONSE[REPORT_VERSION] = function(board) {\n  board.version.major = board.buffer[1];\n  board.version.minor = board.buffer[2];\n  board.emit(\"reportversion\");\n};\n\n/**\n * Handles a ANALOG_MESSAGE response and emits \"analog-read\" and \"analog-read-\"+n events where n is the pin number.\n * @private\n * @param {Board} board the current arduino board we are working with.\n */\n\nMIDI_RESPONSE[ANALOG_MESSAGE] = function(board) {\n  const pin = board.buffer[0] & 0x0F;\n  const value = board.buffer[1] | (board.buffer[2] << 7);\n\n  /* istanbul ignore else */\n  if (board.pins[board.analogPins[pin]]) {\n    board.pins[board.analogPins[pin]].value = value;\n  }\n\n  board.emit(`analog-read-${pin}`, value);\n  board.emit(\"analog-read\", {\n    pin,\n    value,\n  });\n};\n\n/**\n * Handles a DIGITAL_MESSAGE response and emits:\n * \"digital-read\"\n * \"digital-read-\"+n\n *\n * Where n is the pin number.\n *\n * @private\n * @param {Board} board the current arduino board we are working with.\n */\n\nMIDI_RESPONSE[DIGITAL_MESSAGE] = function(board) {\n  const port = (board.buffer[0] & 0x0F);\n  const portValue = board.buffer[1] | (board.buffer[2] << 7);\n\n  for (let i = 0; i < 8; i++) {\n    const pin = 8 * port + i;\n    const pinRec = board.pins[pin];\n    const bit = 1 << i;\n\n    if (pinRec && (pinRec.mode === board.MODES.INPUT || pinRec.mode === board.MODES.PULLUP)) {\n      pinRec.value = (portValue >> (i & 0x07)) & 0x01;\n\n      if (pinRec.value) {\n        board.ports[port] |= bit;\n      } else {\n        board.ports[port] &= ~bit;\n      }\n\n      let {value} = pinRec;\n\n      board.emit(`digital-read-${pin}`, value);\n      board.emit(\"digital-read\", {\n        pin,\n        value,\n      });\n    }\n  }\n};\n\n/**\n * SYSEX_RESPONSE contains functions to be called when we receive a SYSEX message from the arduino.\n * used as a switch object as seen here http://james.padolsey.com/javascript/how-to-avoid-switch-case-syndrome/\n * @private\n */\n\nconst SYSEX_RESPONSE = {};\n\n/**\n * Handles a QUERY_FIRMWARE response and emits the \"queryfirmware\" event\n * @private\n * @param {Board} board the current arduino board we are working with.\n */\n\nSYSEX_RESPONSE[QUERY_FIRMWARE] = function(board) {\n  const length = board.buffer.length - 2;\n  const buffer = Buffer.alloc(Math.round((length - 4) / 2));\n  let byte = 0;\n  let offset = 0;\n\n  for (let i = 4; i < length; i += 2) {\n    byte = ((board.buffer[i] & 0x7F) | ((board.buffer[i + 1] & 0x7F) << 7)) & 0xFF;\n    buffer.writeUInt8(byte, offset++);\n  }\n\n  board.firmware = {\n    name: buffer.toString(),\n    version: {\n      major: board.buffer[2],\n      minor: board.buffer[3],\n    },\n  };\n\n  board.emit(\"queryfirmware\");\n};\n\n/**\n * Handles a CAPABILITY_RESPONSE response and emits the \"capability-query\" event\n * @private\n * @param {Board} board the current arduino board we are working with.\n */\n\nSYSEX_RESPONSE[CAPABILITY_RESPONSE] = function(board) {\n  const modes = Object.keys(board.MODES).map((key) => board.MODES[key]);\n  let mode, resolution;\n  let capability = 0;\n\n  function supportedModes(capability) {\n    return modes.reduce((accum, mode) => {\n      if (capability & (1 << mode)) {\n        accum.push(mode);\n      }\n      return accum;\n    }, []);\n  }\n\n  // Only create pins if none have been previously created on the instance.\n  if (!board.pins.length) {\n    for (let i = 2, n = 0; i < board.buffer.length - 1; i++) {\n      if (board.buffer[i] === 127) {\n        board.pins.push({\n          supportedModes: supportedModes(capability),\n          mode: undefined,\n          value: 0,\n          report: 1,\n        });\n        capability = 0;\n        n = 0;\n        continue;\n      }\n      if (n === 0) {\n        mode = board.buffer[i];\n        resolution = (1 << board.buffer[i + 1]) - 1;\n        capability |= (1 << mode);\n\n        // ADC Resolution of Analog Inputs\n        if (mode === board.MODES.ANALOG && board.RESOLUTION.ADC === null) {\n          board.RESOLUTION.ADC = resolution;\n        }\n\n        // PWM Resolution of PWM Outputs\n        if (mode === board.MODES.PWM && board.RESOLUTION.PWM === null) {\n          board.RESOLUTION.PWM = resolution;\n        }\n\n        // DAC Resolution of DAC Outputs\n        // if (mode === board.MODES.DAC && board.RESOLUTION.DAC === null) {\n        //   board.RESOLUTION.DAC = resolution;\n        // }\n      }\n      n ^= 1;\n    }\n  }\n\n  board.emit(\"capability-query\");\n};\n\n/**\n * Handles a PIN_STATE response and emits the 'pin-state-'+n event where n is the pin number.\n *\n * Note about pin state: For output modes, the state is any value that has been\n * previously written to the pin. For input modes, the state is the status of\n * the pullup resistor.\n * @private\n * @param {Board} board the current arduino board we are working with.\n */\n\nSYSEX_RESPONSE[PIN_STATE_RESPONSE] = function(board) {\n  let pin = board.buffer[2];\n  board.pins[pin].mode = board.buffer[3];\n  board.pins[pin].state = board.buffer[4];\n  if (board.buffer.length > 6) {\n    board.pins[pin].state |= (board.buffer[5] << 7);\n  }\n  if (board.buffer.length > 7) {\n    board.pins[pin].state |= (board.buffer[6] << 14);\n  }\n  board.emit(`pin-state-${pin}`);\n};\n\n/**\n * Handles a ANALOG_MAPPING_RESPONSE response and emits the \"analog-mapping-query\" event.\n * @private\n * @param {Board} board the current arduino board we are working with.\n */\n\nSYSEX_RESPONSE[ANALOG_MAPPING_RESPONSE] = function(board) {\n  let pin = 0;\n  let currentValue;\n  for (let i = 2; i < board.buffer.length - 1; i++) {\n    currentValue = board.buffer[i];\n    board.pins[pin].analogChannel = currentValue;\n    if (currentValue !== 127) {\n      board.analogPins.push(pin);\n    }\n    pin++;\n  }\n  board.emit(\"analog-mapping-query\");\n};\n\n/**\n * Handles a I2C_REPLY response and emits the \"I2C-reply-\"+n event where n is the slave address of the I2C device.\n * The event is passed the buffer of data sent from the I2C Device\n * @private\n * @param {Board} board the current arduino board we are working with.\n */\n\nSYSEX_RESPONSE[I2C_REPLY] = function(board) {\n  const reply = [];\n  const address = (board.buffer[2] & 0x7F) | ((board.buffer[3] & 0x7F) << 7);\n  const register = (board.buffer[4] & 0x7F) | ((board.buffer[5] & 0x7F) << 7);\n\n  for (let i = 6, length = board.buffer.length - 1; i < length; i += 2) {\n    reply.push(board.buffer[i] | (board.buffer[i + 1] << 7));\n  }\n\n  board.emit(`I2C-reply-${address}-${register}`, reply);\n};\n\nSYSEX_RESPONSE[ONEWIRE_DATA] = function(board) {\n  const subCommand = board.buffer[2];\n\n  if (!SYSEX_RESPONSE[subCommand]) {\n    return;\n  }\n\n  SYSEX_RESPONSE[subCommand](board);\n};\n\nSYSEX_RESPONSE[ONEWIRE_SEARCH_REPLY] = function(board) {\n  const pin = board.buffer[3];\n  const buffer = board.buffer.slice(4, board.buffer.length - 1);\n\n  board.emit(`1-wire-search-reply-${pin}`, OneWire.readDevices(buffer));\n};\n\nSYSEX_RESPONSE[ONEWIRE_SEARCH_ALARMS_REPLY] = function(board) {\n  const pin = board.buffer[3];\n  const buffer = board.buffer.slice(4, board.buffer.length - 1);\n\n  board.emit(`1-wire-search-alarms-reply-${pin}`, OneWire.readDevices(buffer));\n};\n\nSYSEX_RESPONSE[ONEWIRE_READ_REPLY] = function(board) {\n  const encoded = board.buffer.slice(4, board.buffer.length - 1);\n  const decoded = Encoder7Bit.from7BitArray(encoded);\n  const correlationId = (decoded[1] << 8) | decoded[0];\n\n  board.emit(`1-wire-read-reply-${correlationId}`, decoded.slice(2));\n};\n\n/**\n * Handles a STRING_DATA response and logs the string to the console.\n * @private\n * @param {Board} board the current arduino board we are working with.\n */\n\nSYSEX_RESPONSE[STRING_DATA] = function(board) {\n  board.emit(\"string\", Buffer.from(board.buffer.slice(2, -1)).toString().replace(/\\0/g, \"\"));\n};\n\n/**\n * Response from pingRead\n */\n\nSYSEX_RESPONSE[PING_READ] = function(board) {\n  const pin = (board.buffer[2] & 0x7F) | ((board.buffer[3] & 0x7F) << 7);\n  const durationBuffer = [\n    (board.buffer[4] & 0x7F) | ((board.buffer[5] & 0x7F) << 7),\n    (board.buffer[6] & 0x7F) | ((board.buffer[7] & 0x7F) << 7),\n    (board.buffer[8] & 0x7F) | ((board.buffer[9] & 0x7F) << 7),\n    (board.buffer[10] & 0x7F) | ((board.buffer[11] & 0x7F) << 7),\n  ];\n  const duration = ((durationBuffer[0] << 24) +\n    (durationBuffer[1] << 16) +\n    (durationBuffer[2] << 8) +\n    (durationBuffer[3]));\n  board.emit(`ping-read-${pin}`, duration);\n};\n\n/**\n * Handles the message from a stepper completing move\n * @param {Board} board\n */\n\nSYSEX_RESPONSE[STEPPER] = function(board) {\n  const deviceNum = board.buffer[2];\n  board.emit(`stepper-done-${deviceNum}`, true);\n};\n\n/**\n * Handles the message from a stepper or group of steppers completing move\n * @param {Board} board\n */\n\nSYSEX_RESPONSE[ACCELSTEPPER] = function(board) {\n  const command = board.buffer[2];\n  const deviceNum = board.buffer[3];\n  const value = command === 0x06 || command === 0x0A ?\n    decode32BitSignedInteger(board.buffer.slice(4, 9)) : null;\n\n  if (command === 0x06) {\n    board.emit(`stepper-position-${deviceNum}`, value);\n  }\n  if (command === 0x0A) {\n    board.emit(`stepper-done-${deviceNum}`, value);\n  }\n  if (command === 0x24) {\n    board.emit(`multi-stepper-done-${deviceNum}`);\n  }\n};\n\n/**\n * Handles a SERIAL_REPLY response and emits the \"serial-data-\"+n event where n is the id of the\n * serial port.\n * The event is passed the buffer of data sent from the serial device\n * @private\n * @param {Board} board the current arduino board we are working with.\n */\n\nSYSEX_RESPONSE[SERIAL_MESSAGE] = function(board) {\n  const command = board.buffer[2] & 0xF0;\n  const portId = board.buffer[2] & 0x0F;\n  const reply = [];\n\n  /* istanbul ignore else */\n  if (command === SERIAL_REPLY) {\n    for (let i = 3, len = board.buffer.length; i < len - 1; i += 2) {\n      reply.push((board.buffer[i + 1] << 7) | board.buffer[i]);\n    }\n    board.emit(`serial-data-${portId}`, reply);\n  }\n};\n\n/**\n * @class The Board object represents an arduino board.\n * @augments EventEmitter\n * @param {String} port This is the serial port the arduino is connected to.\n * @param {function} function A function to be called when the arduino is ready to communicate.\n * @property MODES All the modes available for pins on this arduino board.\n * @property I2C_MODES All the I2C modes available.\n * @property SERIAL_MODES All the Serial modes available.\n * @property SERIAL_PORT_ID ID values to pass as the portId parameter when calling serialConfig.\n * @property HIGH A constant to set a pins value to HIGH when the pin is set to an output.\n * @property LOW A constant to set a pins value to LOW when the pin is set to an output.\n * @property pins An array of pin object literals.\n * @property analogPins An array of analog pins and their corresponding indexes in the pins array.\n * @property version An object indicating the major and minor version of the firmware currently running.\n * @property firmware An object indicating the name, major and minor version of the firmware currently running.\n * @property buffer An array holding the current bytes received from the arduino.\n * @property {SerialPort} sp The serial port object used to communicate with the arduino.\n */\n\nfunction Board(port, options, callback) {\n  if (typeof options === \"function\" || typeof options === \"undefined\") {\n    callback = options;\n    options = {};\n  }\n\n  if (!(this instanceof Board)) {\n    return new Board(port, options, callback);\n  }\n\n  Emitter.call(this);\n\n  var board = this;\n  var defaults = {\n    reportVersionTimeout: 5000,\n    samplingInterval: 19,\n    serialport: {\n      baudRate: 57600,\n      // https://github.com/node-serialport/node-serialport/blob/5.0.0/UPGRADE_GUIDE.md#open-options\n      highWaterMark: 256,\n    },\n  };\n\n  if (options.serialport && options.serialport.bufferSize) {\n    options.serialport.highWaterMark = options.serialport.bufferSize;\n  }\n\n  var settings = Object.assign({}, defaults, options);\n\n  this.isReady = false;\n\n  this.MODES = {\n    INPUT: 0x00,\n    OUTPUT: 0x01,\n    ANALOG: 0x02,\n    PWM: 0x03,\n    SERVO: 0x04,\n    SHIFT: 0x05,\n    I2C: 0x06,\n    ONEWIRE: 0x07,\n    STEPPER: 0x08,\n    SERIAL: 0x0A,\n    PULLUP: 0x0B,\n    IGNORE: 0x7F,\n    PING_READ: 0x75,\n    UNKOWN: 0x10,\n  };\n\n  this.I2C_MODES = {\n    WRITE: 0,\n    READ: 1,\n    CONTINUOUS_READ: 2,\n    STOP_READING: 3,\n  };\n\n  this.STEPPER = {\n    TYPE: {\n      DRIVER: 1,\n      TWO_WIRE: 2,\n      THREE_WIRE: 3,\n      FOUR_WIRE: 4,\n    },\n    STEP_SIZE: {\n      WHOLE: 0,\n      HALF: 1\n    },\n    RUN_STATE: {\n      STOP: 0,\n      ACCEL: 1,\n      DECEL: 2,\n      RUN: 3,\n    },\n    DIRECTION: {\n      CCW: 0,\n      CW: 1,\n    },\n  };\n\n  this.SERIAL_MODES = {\n    CONTINUOUS_READ: 0x00,\n    STOP_READING: 0x01,\n  };\n\n  // ids for hardware and software serial ports on the board\n  this.SERIAL_PORT_IDs = {\n    HW_SERIAL0: 0x00,\n    HW_SERIAL1: 0x01,\n    HW_SERIAL2: 0x02,\n    HW_SERIAL3: 0x03,\n    SW_SERIAL0: 0x08,\n    SW_SERIAL1: 0x09,\n    SW_SERIAL2: 0x10,\n    SW_SERIAL3: 0x11,\n\n    // Default can be used by dependant libraries to key on a\n    // single property name when negotiating ports.\n    //\n    // Firmata elects SW_SERIAL0: 0x08 as its DEFAULT\n    DEFAULT: 0x08,\n  };\n\n  // map to the pin resolution value in the capability query response\n  this.SERIAL_PIN_TYPES = {\n    RES_RX0: 0x00,\n    RES_TX0: 0x01,\n    RES_RX1: 0x02,\n    RES_TX1: 0x03,\n    RES_RX2: 0x04,\n    RES_TX2: 0x05,\n    RES_RX3: 0x06,\n    RES_TX3: 0x07,\n  };\n\n  this.RESOLUTION = {\n    ADC: null,\n    DAC: null,\n    PWM: null,\n  };\n\n  this.HIGH = 1;\n  this.LOW = 0;\n  this.pins = [];\n  this.ports = Array(16).fill(0);\n  this.analogPins = [];\n  this.version = {};\n  this.firmware = {};\n  this.buffer = [];\n  this.versionReceived = false;\n  this.name = \"Firmata\";\n  this.settings = settings;\n  this.pending = 0;\n  this.digitalPortQueue = 0x0000;\n\n  if (typeof port === \"object\") {\n    this.transport = port;\n  } else {\n    this.transport = new com.SerialPort(port, settings.serialport);\n  }\n\n  // For backward compat\n  this.sp = this.transport;\n\n  this.transport.on(\"close\", event => {\n\n    // https://github.com/node-serialport/node-serialport/blob/5.0.0/UPGRADE_GUIDE.md#opening-and-closing\n    if (event && event.disconnect && event.disconnected) {\n      this.emit(\"disconnect\");\n      return;\n    }\n\n    this.emit(\"close\");\n  });\n\n  this.transport.on(\"open\", event => {\n    this.emit(\"open\", event);\n    // Legacy\n    this.emit(\"connect\", event);\n  });\n\n  this.transport.on(\"error\", error => {\n    if (!this.isReady && typeof callback === \"function\") {\n      callback(error);\n    } else {\n      this.emit(\"error\", error);\n    }\n  });\n\n  this.transport.on(\"data\", data => {\n    var byte, currByte, response, first, last, handler;\n\n    for (var i = 0; i < data.length; i++) {\n      byte = data[i];\n      // we dont want to push 0 as the first byte on our buffer\n      if (this.buffer.length === 0 && byte === 0) {\n        continue;\n      } else {\n        this.buffer.push(byte);\n\n        first = this.buffer[0];\n        last = this.buffer[this.buffer.length - 1];\n\n        // [START_SYSEX, ... END_SYSEX]\n        if (first === START_SYSEX && last === END_SYSEX) {\n\n          handler = SYSEX_RESPONSE[this.buffer[1]];\n\n          // Ensure a valid SYSEX_RESPONSE handler exists\n          // Only process these AFTER the REPORT_VERSION\n          // message has been received and processed.\n          if (handler && this.versionReceived) {\n            handler(this);\n          }\n\n          // It is possible for the board to have\n          // existing activity from a previous run\n          // that will leave any of the following\n          // active:\n          //\n          //    - ANALOG_MESSAGE\n          //    - SERIAL_READ\n          //    - I2C_REQUEST, CONTINUOUS_READ\n          //\n          // This means that we will receive these\n          // messages on transport \"open\", before any\n          // handshake can occur. We MUST assert\n          // that we will only process this buffer\n          // AFTER the REPORT_VERSION message has\n          // been received. Not doing so will result\n          // in the appearance of the program \"hanging\".\n          //\n          // Since we cannot do anything with this data\n          // until _after_ REPORT_VERSION, discard it.\n          //\n          this.buffer.length = 0;\n\n        } else if (first === START_SYSEX && (this.buffer.length > 0)) {\n          // we have a new command after an incomplete sysex command\n          currByte = data[i];\n          if (currByte > 0x7F) {\n            this.buffer.length = 0;\n            this.buffer.push(currByte);\n          }\n        } else {\n          /* istanbul ignore else */\n          if (first !== START_SYSEX) {\n            // Check if data gets out of sync: first byte in buffer\n            // must be a valid response if not START_SYSEX\n            // Identify response on first byte\n            response = first < START_SYSEX ? (first & START_SYSEX) : first;\n\n            // Check if the first byte is possibly\n            // a valid MIDI_RESPONSE (handler)\n            /* istanbul ignore else */\n            if (response !== REPORT_VERSION &&\n                response !== ANALOG_MESSAGE &&\n                response !== DIGITAL_MESSAGE) {\n              // If not valid, then we received garbage and can discard\n              // whatever bytes have been been queued.\n              this.buffer.length = 0;\n            }\n          }\n        }\n\n        // There are 3 bytes in the buffer and the first is not START_SYSEX:\n        // Might have a MIDI Command\n        if (this.buffer.length === 3 && first !== START_SYSEX) {\n          // response bytes under 0xF0 we have a multi byte operation\n          response = first < START_SYSEX ? (first & START_SYSEX) : first;\n\n          /* istanbul ignore else */\n          if (MIDI_RESPONSE[response]) {\n            // It's ok that this.versionReceived will be set to\n            // true every time a valid MIDI_RESPONSE is received.\n            // This condition is necessary to ensure that REPORT_VERSION\n            // is called first.\n            if (this.versionReceived || first === REPORT_VERSION) {\n              this.versionReceived = true;\n              MIDI_RESPONSE[response](this);\n            }\n            this.buffer.length = 0;\n          } else {\n            // A bad serial read must have happened.\n            // Reseting the buffer will allow recovery.\n            this.buffer.length = 0;\n          }\n        }\n      }\n    }\n  });\n\n  // if we have not received the version within the allotted\n  // time specified by the reportVersionTimeout (user or default),\n  // then send an explicit request for it.\n  this.reportVersionTimeoutId = setTimeout(() => {\n    /* istanbul ignore else */\n    if (this.versionReceived === false) {\n      this.reportVersion(function() {});\n      this.queryFirmware(function() {});\n    }\n  }, settings.reportVersionTimeout);\n\n  function ready() {\n    board.isReady = true;\n    board.emit(\"ready\");\n    /* istanbul ignore else */\n    if (typeof callback === \"function\") {\n      callback();\n    }\n  }\n\n  // Await the reported version.\n  this.once(\"reportversion\", () => {\n    clearTimeout(this.reportVersionTimeoutId);\n    this.versionReceived = true;\n    this.once(\"queryfirmware\", () => {\n\n      // Only preemptively set the sampling interval if `samplingInterval`\n      // property was _explicitly_ set as a constructor option.\n      if (options.samplingInterval !== undefined) {\n        this.setSamplingInterval(options.samplingInterval);\n      }\n      if (settings.skipCapabilities) {\n        this.analogPins = settings.analogPins || this.analogPins;\n        this.pins = settings.pins || this.pins;\n        /* istanbul ignore else */\n        if (!this.pins.length) {\n          for (var i = 0; i < (settings.pinCount || MAX_PIN_COUNT); i++) {\n            var analogChannel = this.analogPins.indexOf(i);\n            if (analogChannel < 0) {\n              analogChannel = 127;\n            }\n            this.pins.push({supportedModes: [], analogChannel: analogChannel});\n          }\n        }\n\n        // If the capabilities query is skipped,\n        // default resolution values will be used.\n        //\n        // Based on ATmega328/P\n        //\n        this.RESOLUTION.ADC = 0x3FF;\n        this.RESOLUTION.PWM = 0x0FF;\n\n        ready();\n      } else {\n        this.queryCapabilities(() => {\n          this.queryAnalogMapping(ready);\n        });\n      }\n    });\n  });\n}\n\nBoard.prototype = Object.create(Emitter.prototype, {\n  constructor: {\n    value: Board,\n  },\n});\n\n/**\n * writeToTransport Due to the non-blocking behaviour of transport write\n *                   operations, dependent programs need a way to know\n *                   when all writes are complete. Every write increments\n *                   a `pending` value, when the write operation has\n *                   completed, the `pending` value is decremented.\n *\n * @param  {Board} board An active Board instance\n * @param  {Array} data  An array of 8 and 7 bit values that will be\n *                       wrapped in a Buffer and written to the transport.\n */\nfunction writeToTransport(board, data) {\n  board.pending++;\n  board.transport.write(Buffer.from(data), () => board.pending--);\n}\n\n/**\n * Asks the arduino to tell us its version.\n * @param {function} callback A function to be called when the arduino has reported its version.\n */\n\nBoard.prototype.reportVersion = function(callback) {\n  this.once(\"reportversion\", callback);\n  writeToTransport(this, [REPORT_VERSION]);\n};\n\n/**\n * Asks the arduino to tell us its firmware version.\n * @param {function} callback A function to be called when the arduino has reported its firmware version.\n */\n\nBoard.prototype.queryFirmware = function(callback) {\n  this.once(\"queryfirmware\", callback);\n  writeToTransport(this, [START_SYSEX, QUERY_FIRMWARE, END_SYSEX]);\n};\n\n/**\n * Asks the arduino to read analog data. Turn on reporting for this pin.\n * @param {number} pin The pin to read analog data\n * @param {function} callback A function to call when we have the analag data.\n */\n\nBoard.prototype.analogRead = function(pin, callback) {\n  this.reportAnalogPin(pin, 1);\n  this.addListener(`analog-read-${pin}`, callback);\n};\n\n/**\n * Write a PWM value Asks the arduino to write an analog message.\n * @param {number} pin The pin to write analog data to.\n * @param {number} value The data to write to the pin between 0 and this.RESOLUTION.PWM.\n */\n\nBoard.prototype.pwmWrite = function(pin, value) {\n  const data = [];\n\n  this.pins[pin].value = value;\n\n  if (pin > 15) {\n    data[0] = START_SYSEX;\n    data[1] = EXTENDED_ANALOG;\n    data[2] = pin;\n    data[3] = value & 0x7F;\n    data[4] = (value >> 7) & 0x7F;\n\n    if (value > 0x00004000) {\n      data[data.length] = (value >> 14) & 0x7F;\n    }\n\n    if (value > 0x00200000) {\n      data[data.length] = (value >> 21) & 0x7F;\n    }\n\n    if (value > 0x10000000) {\n      data[data.length] = (value >> 28) & 0x7F;\n    }\n\n    data[data.length] = END_SYSEX;\n  } else {\n    data.push(ANALOG_MESSAGE | pin, value & 0x7F, (value >> 7) & 0x7F);\n  }\n\n  writeToTransport(this, data);\n};\n\nBoard.prototype.analogWrite = Board.prototype.pwmWrite;\n\n/**\n * Set a pin to SERVO mode with an explicit PWM range.\n *\n * @param {number} pin The pin the servo is connected to\n * @param {number} min A 14-bit signed int.\n * @param {number} max A 14-bit signed int.\n */\n\nBoard.prototype.servoConfig = function(pin, min, max) {\n  if (typeof pin === \"object\" && pin !== null) {\n    let temp = pin;\n    pin = temp.pin;\n    min = temp.min;\n    max = temp.max;\n  }\n\n  if (typeof pin === \"undefined\") {\n    throw new Error(\"servoConfig: pin must be specified\");\n  }\n\n  if (typeof min === \"undefined\") {\n    throw new Error(\"servoConfig: min must be specified\");\n  }\n\n  if (typeof max === \"undefined\") {\n    throw new Error(\"servoConfig: max must be specified\");\n  }\n\n  // [0]  START_SYSEX  (0xF0)\n  // [1]  SERVO_CONFIG (0x70)\n  // [2]  pin number   (0-127)\n  // [3]  minPulse LSB (0-6)\n  // [4]  minPulse MSB (7-13)\n  // [5]  maxPulse LSB (0-6)\n  // [6]  maxPulse MSB (7-13)\n  // [7]  END_SYSEX    (0xF7)\n\n  this.pins[pin].mode = this.MODES.SERVO;\n\n  writeToTransport(this, [\n    START_SYSEX,\n    SERVO_CONFIG,\n    pin,\n    min & 0x7F,\n    (min >> 7) & 0x7F,\n    max & 0x7F,\n    (max >> 7) & 0x7F,\n    END_SYSEX,\n  ]);\n};\n\n/**\n * Asks the arduino to move a servo\n * @param {number} pin The pin the servo is connected to\n * @param {number} value The degrees to move the servo to.\n */\n\nBoard.prototype.servoWrite = function(...args) {\n  // Values less than 544 will be treated as angles in degrees\n  // (valid values in microseconds are handled as microseconds)\n  this.analogWrite(...args);\n};\n\n/**\n * Asks the arduino to set the pin to a certain mode.\n * @param {number} pin The pin you want to change the mode of.\n * @param {number} mode The mode you want to set. Must be one of board.MODES\n */\n\nBoard.prototype.pinMode = function(pin, mode) {\n  this.pins[pin].mode = mode;\n  writeToTransport(this, [PIN_MODE, pin, mode]);\n};\n\n/**\n * Asks the arduino to write a value to a digital pin\n * @param {number} pin The pin you want to write a value to.\n * @param {number} value The value you want to write. Must be board.HIGH or board.LOW\n * @param {boolean} enqueue When true, the local state is updated but the command is not sent to the Arduino\n */\n\nBoard.prototype.digitalWrite = function(pin, value, enqueue) {\n  let port = this.updateDigitalPort(pin, value);\n\n  if (enqueue) {\n    this.digitalPortQueue |= 1 << port;\n  } else {\n    this.writeDigitalPort(port);\n  }\n};\n\n/**\n * Update local store of digital port state\n * @param {number} pin The pin you want to write a value to.\n * @param {number} value The value you want to write. Must be board.HIGH or board.LOW\n */\n\nBoard.prototype.updateDigitalPort = function(pin, value) {\n  const port = pin >> 3;\n  const bit = 1 << (pin & 0x07);\n\n  this.pins[pin].value = value;\n\n  if (value) {\n    this.ports[port] |= bit;\n  } else {\n    this.ports[port] &= ~bit;\n  }\n\n  return port;\n};\n\n/**\n * Write queued digital ports\n */\n\nBoard.prototype.flushDigitalPorts = function() {\n  for (let i = 0; i < this.ports.length; i++) {\n    if (this.digitalPortQueue >> i) {\n      this.writeDigitalPort(i);\n    }\n  }\n  this.digitalPortQueue = 0x0000;\n};\n\n/**\n * Update a digital port (group of 8 digital pins) on the Arduino\n * @param {number} port The port you want to update.\n */\n\nBoard.prototype.writeDigitalPort = function(port) {\n  writeToTransport(this, [\n    DIGITAL_MESSAGE | port,\n    this.ports[port] & 0x7F,\n    (this.ports[port] >> 7) & 0x7F\n  ]);\n};\n\n/**\n * Asks the arduino to read digital data. Turn on reporting for this pin's port.\n *\n * @param {number} pin The pin to read data from\n * @param {function} callback The function to call when data has been received\n */\n\nBoard.prototype.digitalRead = function(pin, callback) {\n  this.reportDigitalPin(pin, 1);\n  this.addListener(`digital-read-${pin}`, callback);\n};\n\n/**\n * Asks the arduino to tell us its capabilities\n * @param {function} callback A function to call when we receive the capabilities\n */\n\nBoard.prototype.queryCapabilities = function(callback) {\n  this.once(\"capability-query\", callback);\n  writeToTransport(this, [START_SYSEX, CAPABILITY_QUERY, END_SYSEX]);\n};\n\n/**\n * Asks the arduino to tell us its analog pin mapping\n * @param {function} callback A function to call when we receive the pin mappings.\n */\n\nBoard.prototype.queryAnalogMapping = function(callback) {\n  this.once(\"analog-mapping-query\", callback);\n  writeToTransport(this, [START_SYSEX, ANALOG_MAPPING_QUERY, END_SYSEX]);\n};\n\n/**\n * Asks the arduino to tell us the current state of a pin\n * @param {number} pin The pin we want to the know the state of\n * @param {function} callback A function to call when we receive the pin state.\n */\n\nBoard.prototype.queryPinState = function(pin, callback) {\n  this.once(`pin-state-${pin}`, callback);\n  writeToTransport(this, [START_SYSEX, PIN_STATE_QUERY, pin, END_SYSEX]);\n};\n\n/**\n * Sends a string to the arduino\n * @param {String} string to send to the device\n */\n\nBoard.prototype.sendString = function(string) {\n  const bytes = Buffer.from(`${string}\\0`, \"utf8\");\n  const data = [];\n\n  data.push(START_SYSEX, STRING_DATA);\n  for (let i = 0, length = bytes.length; i < length; i++) {\n    data.push(\n      bytes[i] & 0x7F, (bytes[i] >> 7) & 0x7F\n    );\n  }\n  data.push(END_SYSEX);\n\n  writeToTransport(this, data);\n};\n\nfunction i2cRequest(board, bytes) {\n  const active = i2cActive.get(board);\n\n  if (!active) {\n    throw new Error(\"I2C is not enabled for this board. To enable, call the i2cConfig() method.\");\n  }\n\n  // Do not tamper with I2C_CONFIG messages\n  if (bytes[1] === I2C_REQUEST) {\n    const address = bytes[2];\n\n    // If no peripheral settings exist, make them.\n    if (!active[address]) {\n      active[address] = {\n        stopTX: true,\n      };\n    }\n\n    // READ (8) or CONTINUOUS_READ (16)\n    // value & 0b00011000\n    if (bytes[3] & I2C_READ_MASK) {\n      // Invert logic to accomodate default = true,\n      // which is actually stopTX = 0\n      bytes[3] |= Number(!active[address].stopTX) << 6;\n    }\n  }\n\n  writeToTransport(board, bytes);\n}\n\n/**\n * Sends a I2C config request to the arduino board with an optional\n * value in microseconds to delay an I2C Read.  Must be called before\n * an I2C Read or Write\n * @param {number} delay in microseconds to set for I2C Read\n */\n\nBoard.prototype.sendI2CConfig = function(delay) {\n  return this.i2cConfig(delay);\n};\n\n/**\n * Enable I2C with an optional read delay. Must be called before\n * an I2C Read or Write\n *\n * Supersedes sendI2CConfig\n *\n * @param {number} delay in microseconds to set for I2C Read\n *\n * or\n *\n * @param {object} with a single property `delay`\n */\n\nBoard.prototype.i2cConfig = function(options) {\n  let settings = i2cActive.get(this);\n  let delay;\n\n  if (!settings) {\n    settings = {\n      /*\n        Keys will be I2C peripheral addresses\n       */\n    };\n    i2cActive.set(this, settings);\n  }\n\n  if (typeof options === \"number\") {\n    delay = options;\n  } else {\n    if (typeof options === \"object\" && options !== null) {\n      delay = Number(options.delay);\n\n      // When an address was explicitly specified, there may also be\n      // peripheral specific instructions in the config.\n      if (typeof options.address !== \"undefined\") {\n        if (!settings[options.address]) {\n          settings[options.address] = {\n            stopTX: true,\n          };\n        }\n      }\n\n      // When settings have been explicitly provided, just bulk assign\n      // them to the existing settings, even if that's empty. This\n      // allows for reconfiguration as needed.\n      if (typeof options.settings !== \"undefined\") {\n        Object.assign(settings[options.address], options.settings);\n        /*\n          - stopTX: true | false\n              Set `stopTX` to `false` if this peripheral\n              expects Wire to keep the transmission connection alive between\n              setting a register and requesting bytes.\n\n              Defaults to `true`.\n         */\n      }\n    }\n  }\n\n  settings.delay = delay = delay || 0;\n\n  i2cRequest(this, [\n    START_SYSEX,\n    I2C_CONFIG,\n    delay & 0xFF, (delay >> 8) & 0xFF,\n    END_SYSEX,\n  ]);\n\n  return this;\n};\n\n/**\n * Asks the arduino to send an I2C request to a device\n * @param {number} slaveAddress The address of the I2C device\n * @param {Array} bytes The bytes to send to the device\n */\n\nBoard.prototype.sendI2CWriteRequest = function(slaveAddress, bytes) {\n  const data = [];\n  /* istanbul ignore next */\n  bytes = bytes || [];\n\n  data.push(\n    START_SYSEX,\n    I2C_REQUEST,\n    slaveAddress,\n    this.I2C_MODES.WRITE << 3\n  );\n\n  for (let i = 0, length = bytes.length; i < length; i++) {\n    data.push(\n      bytes[i] & 0x7F, (bytes[i] >> 7) & 0x7F\n    );\n  }\n\n  data.push(END_SYSEX);\n\n  i2cRequest(this, data);\n};\n\n/**\n * Write data to a register\n *\n * @param {number} address      The address of the I2C device.\n * @param {Array} cmdRegOrData  An array of bytes\n *\n * Write a command to a register\n *\n * @param {number} address      The address of the I2C device.\n * @param {number} cmdRegOrData The register\n * @param {Array} inBytes       An array of bytes\n *\n */\n\nBoard.prototype.i2cWrite = function(address, registerOrData, inBytes) {\n  /**\n   * registerOrData:\n   * [... arbitrary bytes]\n   *\n   * or\n   *\n   * registerOrData, inBytes:\n   * command [, ...]\n   *\n   */\n  const data = [\n    START_SYSEX,\n    I2C_REQUEST,\n    address,\n    this.I2C_MODES.WRITE << 3\n  ];\n\n  // If i2cWrite was used for an i2cWriteReg call...\n  if (arguments.length === 3 &&\n      !Array.isArray(registerOrData) &&\n      !Array.isArray(inBytes)) {\n\n    return this.i2cWriteReg(address, registerOrData, inBytes);\n  }\n\n  // Fix arguments if called with Firmata.js API\n  if (arguments.length === 2) {\n    if (Array.isArray(registerOrData)) {\n      inBytes = registerOrData.slice();\n      registerOrData = inBytes.shift();\n    } else {\n      inBytes = [];\n    }\n  }\n\n  const bytes = Buffer.from([registerOrData].concat(inBytes));\n\n  for (var i = 0, length = bytes.length; i < length; i++) {\n    data.push(\n      bytes[i] & 0x7F, (bytes[i] >> 7) & 0x7F\n    );\n  }\n\n  data.push(END_SYSEX);\n\n  i2cRequest(this, data);\n\n  return this;\n};\n\n/**\n * Write data to a register\n *\n * @param {number} address    The address of the I2C device.\n * @param {number} register   The register.\n * @param {number} byte       The byte value to write.\n *\n */\n\nBoard.prototype.i2cWriteReg = function(address, register, byte) {\n  i2cRequest(this, [\n    START_SYSEX,\n    I2C_REQUEST,\n    address,\n    this.I2C_MODES.WRITE << 3,\n    // register\n    register & 0x7F, (register >> 7) & 0x7F,\n    // byte\n    byte & 0x7F, (byte >> 7) & 0x7F,\n    END_SYSEX,\n  ]);\n\n  return this;\n};\n\n\n/**\n * Asks the arduino to request bytes from an I2C device\n * @param {number} slaveAddress The address of the I2C device\n * @param {number} numBytes The number of bytes to receive.\n * @param {function} callback A function to call when we have received the bytes.\n */\n\nBoard.prototype.sendI2CReadRequest = function(address, numBytes, callback) {\n  i2cRequest(this, [\n    START_SYSEX,\n    I2C_REQUEST,\n    address,\n    this.I2C_MODES.READ << 3,\n    numBytes & 0x7F, (numBytes >> 7) & 0x7F,\n    END_SYSEX,\n  ]);\n  this.once(`I2C-reply-${address}-0`, callback);\n};\n\n// TODO: Refactor i2cRead and i2cReadOnce\n//      to share most operations.\n\n/**\n * Initialize a continuous I2C read.\n *\n * @param {number} address    The address of the I2C device\n * @param {number} register   Optionally set the register to read from.\n * @param {number} numBytes   The number of bytes to receive.\n * @param {function} callback A function to call when we have received the bytes.\n */\n\nBoard.prototype.i2cRead = function(address, register, bytesToRead, callback) {\n\n  if (arguments.length === 3 &&\n      typeof register === \"number\" &&\n      typeof bytesToRead === \"function\") {\n    callback = bytesToRead;\n    bytesToRead = register;\n    register = null;\n  }\n\n  const data = [\n    START_SYSEX,\n    I2C_REQUEST,\n    address,\n    this.I2C_MODES.CONTINUOUS_READ << 3,\n  ];\n  let event = `I2C-reply-${address}-`;\n\n  if (register !== null) {\n    data.push(\n      register & 0x7F, (register >> 7) & 0x7F\n    );\n  } else {\n    register = 0;\n  }\n\n  event += register;\n\n  data.push(\n    bytesToRead & 0x7F, (bytesToRead >> 7) & 0x7F,\n    END_SYSEX\n  );\n\n  this.on(event, callback);\n\n  i2cRequest(this, data);\n\n  return this;\n};\n\n/**\n * Stop continuous reading of the specified I2C address or register.\n *\n * @param {object} options Options:\n *   bus {number} The I2C bus (on supported platforms)\n *   address {number} The I2C peripheral address to stop reading.\n *\n * @param {number} address The I2C peripheral address to stop reading.\n */\n\nBoard.prototype.i2cStop = function(options) {\n  // There may be more values in the future\n  // var options = {};\n\n  // null or undefined? Do nothing.\n  if (options == null) {\n    return;\n  }\n\n  if (typeof options === \"number\") {\n    options = {\n      address: options\n    };\n  }\n\n  writeToTransport(this, [\n    START_SYSEX,\n    I2C_REQUEST,\n    options.address,\n    this.I2C_MODES.STOP_READING << 3,\n    END_SYSEX,\n  ]);\n\n  Object.keys(this._events).forEach(event => {\n    if (event.startsWith(`I2C-reply-${options.address}`)) {\n      this.removeAllListeners(event);\n    }\n  });\n};\n\n\n/**\n * Perform a single I2C read\n *\n * Supersedes sendI2CReadRequest\n *\n * Read bytes from address\n *\n * @param {number} address    The address of the I2C device\n * @param {number} register   Optionally set the register to read from.\n * @param {number} numBytes   The number of bytes to receive.\n * @param {function} callback A function to call when we have received the bytes.\n *\n */\n\n\nBoard.prototype.i2cReadOnce = function(address, register, bytesToRead, callback) {\n\n  if (arguments.length === 3 &&\n      typeof register === \"number\" &&\n      typeof bytesToRead === \"function\") {\n    callback = bytesToRead;\n    bytesToRead = register;\n    register = null;\n  }\n\n  const data = [\n    START_SYSEX,\n    I2C_REQUEST,\n    address,\n    this.I2C_MODES.READ << 3,\n  ];\n  let event = `I2C-reply-${address}-`;\n\n  if (register !== null) {\n    data.push(\n      register & 0x7F, (register >> 7) & 0x7F\n    );\n  } else {\n    register = 0;\n  }\n\n  event += register;\n\n  data.push(\n    bytesToRead & 0x7F, (bytesToRead >> 7) & 0x7F,\n    END_SYSEX\n  );\n\n  this.once(event, callback);\n\n  i2cRequest(this, data);\n\n  return this;\n};\n\n// CONTINUOUS_READ\n\n/**\n * Configure the passed pin as the controller in a 1-wire bus.\n * Pass as enableParasiticPower true if you want the data pin to power the bus.\n * @param pin\n * @param enableParasiticPower\n */\n\nBoard.prototype.sendOneWireConfig = function(pin, enableParasiticPower) {\n  writeToTransport(this, [\n    START_SYSEX,\n    ONEWIRE_DATA,\n    ONEWIRE_CONFIG_REQUEST,\n    pin,\n    enableParasiticPower ? 0x01 : 0x00,\n    END_SYSEX,\n  ]);\n};\n\n/**\n * Searches for 1-wire devices on the bus.  The passed callback should accept\n * and error argument and an array of device identifiers.\n * @param pin\n * @param callback\n */\n\nBoard.prototype.sendOneWireSearch = function(pin, callback) {\n  this._sendOneWireSearch(ONEWIRE_SEARCH_REQUEST, `1-wire-search-reply-${pin}`, pin, callback);\n};\n\n/**\n * Searches for 1-wire devices on the bus in an alarmed state.  The passed callback\n * should accept and error argument and an array of device identifiers.\n * @param pin\n * @param callback\n */\n\nBoard.prototype.sendOneWireAlarmsSearch = function(pin, callback) {\n  this._sendOneWireSearch(ONEWIRE_SEARCH_ALARMS_REQUEST, `1-wire-search-alarms-reply-${pin}`, pin, callback);\n};\n\nBoard.prototype._sendOneWireSearch = function(type, event, pin, callback) {\n  writeToTransport(this, [START_SYSEX, ONEWIRE_DATA, type, pin, END_SYSEX]);\n\n  const timeout = setTimeout(() => {\n    /* istanbul ignore next */\n    callback(new Error(\"1-Wire device search timeout - are you running ConfigurableFirmata?\"));\n  }, 5000);\n  this.once(event, devices => {\n    clearTimeout(timeout);\n    callback(null, devices);\n  });\n};\n\n/**\n * Reads data from a device on the bus and invokes the passed callback.\n *\n * N.b. ConfigurableFirmata will issue the 1-wire select command internally.\n * @param pin\n * @param device\n * @param numBytesToRead\n * @param callback\n */\n\nBoard.prototype.sendOneWireRead = function(pin, device, numBytesToRead, callback) {\n  const correlationId = Math.floor(Math.random() * 255);\n  /* istanbul ignore next */\n  const timeout = setTimeout(() => {\n    /* istanbul ignore next */\n    callback(new Error(\"1-Wire device read timeout - are you running ConfigurableFirmata?\"));\n  }, 5000);\n  this._sendOneWireRequest(pin, ONEWIRE_READ_REQUEST_BIT, device, numBytesToRead, correlationId, null, null, `1-wire-read-reply-${correlationId}`, data => {\n    clearTimeout(timeout);\n    callback(null, data);\n  });\n};\n\n/**\n * Resets all devices on the bus.\n * @param pin\n */\n\nBoard.prototype.sendOneWireReset = function(pin) {\n  this._sendOneWireRequest(pin, ONEWIRE_RESET_REQUEST_BIT);\n};\n\n/**\n * Writes data to the bus to be received by the passed device.  The device\n * should be obtained from a previous call to sendOneWireSearch.\n *\n * N.b. ConfigurableFirmata will issue the 1-wire select command internally.\n * @param pin\n * @param device\n * @param data\n */\n\nBoard.prototype.sendOneWireWrite = function(pin, device, data) {\n  this._sendOneWireRequest(pin, ONEWIRE_WRITE_REQUEST_BIT, device, null, null, null, Array.isArray(data) ? data : [data]);\n};\n\n/**\n * Tells firmata to not do anything for the passed amount of ms.  For when you\n * need to give a device attached to the bus time to do a calculation.\n * @param pin\n */\n\nBoard.prototype.sendOneWireDelay = function(pin, delay) {\n  this._sendOneWireRequest(pin, ONEWIRE_DELAY_REQUEST_BIT, null, null, null, delay);\n};\n\n/**\n * Sends the passed data to the passed device on the bus, reads the specified\n * number of bytes and invokes the passed callback.\n *\n * N.b. ConfigurableFirmata will issue the 1-wire select command internally.\n * @param pin\n * @param device\n * @param data\n * @param numBytesToRead\n * @param callback\n */\n\nBoard.prototype.sendOneWireWriteAndRead = function(pin, device, data, numBytesToRead, callback) {\n  const correlationId = Math.floor(Math.random() * 255);\n  /* istanbul ignore next */\n  const timeout = setTimeout(() => {\n    /* istanbul ignore next */\n    callback(new Error(\"1-Wire device read timeout - are you running ConfigurableFirmata?\"));\n  }, 5000);\n  this._sendOneWireRequest(pin, ONEWIRE_WRITE_REQUEST_BIT | ONEWIRE_READ_REQUEST_BIT, device, numBytesToRead, correlationId, null, Array.isArray(data) ? data : [data], `1-wire-read-reply-${correlationId}`, data => {\n    clearTimeout(timeout);\n\n    callback(null, data);\n  });\n};\n\n// see http://firmata.org/wiki/Proposals#OneWire_Proposal\nBoard.prototype._sendOneWireRequest = function(pin, subcommand, device, numBytesToRead, correlationId, delay, dataToWrite, event, callback) {\n  const bytes = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n  if (device || numBytesToRead || correlationId || delay || dataToWrite) {\n    subcommand = subcommand | ONEWIRE_WITHDATA_REQUEST_BITS;\n  }\n\n  if (device) {\n    bytes.splice(...[0, 8].concat(device));\n  }\n\n  if (numBytesToRead) {\n    bytes[8] = numBytesToRead & 0xFF;\n    bytes[9] = (numBytesToRead >> 8) & 0xFF;\n  }\n\n  if (correlationId) {\n    bytes[10] = correlationId & 0xFF;\n    bytes[11] = (correlationId >> 8) & 0xFF;\n  }\n\n  if (delay) {\n    bytes[12] = delay & 0xFF;\n    bytes[13] = (delay >> 8) & 0xFF;\n    bytes[14] = (delay >> 16) & 0xFF;\n    bytes[15] = (delay >> 24) & 0xFF;\n  }\n\n  if (dataToWrite) {\n    bytes.push(...dataToWrite);\n  }\n\n  const output = [\n    START_SYSEX,\n    ONEWIRE_DATA,\n    subcommand,\n    pin,\n    ...Encoder7Bit.to7BitArray(bytes),\n    END_SYSEX,\n  ];\n\n  writeToTransport(this, output);\n\n  if (event && callback) {\n    this.once(event, callback);\n  }\n};\n\n/**\n * Set sampling interval in millis. Default is 19 ms\n * @param {number} interval The sampling interval in ms > 10\n */\n\nBoard.prototype.setSamplingInterval = function(interval) {\n  const safeint = interval < 10 ? 10 : (interval > 65535 ? 65535 : interval);\n  this.settings.samplingInterval = safeint;\n  writeToTransport(this, [\n    START_SYSEX,\n    SAMPLING_INTERVAL,\n    (safeint & 0x7F),\n    ((safeint >> 7) & 0x7F),\n    END_SYSEX,\n  ]);\n};\n\n/**\n * Get sampling interval in millis. Default is 19 ms\n *\n * @return {number} samplingInterval\n */\n\nBoard.prototype.getSamplingInterval = function() {\n  return this.settings.samplingInterval;\n};\n\n/**\n * Set reporting on pin\n * @param {number} pin The pin to turn on/off reporting\n * @param {number} value Binary value to turn reporting on/off\n */\n\nBoard.prototype.reportAnalogPin = function(pin, value) {\n  /* istanbul ignore else */\n  if (value === 0 || value === 1) {\n    this.pins[this.analogPins[pin]].report = value;\n    writeToTransport(this, [REPORT_ANALOG | pin, value]);\n  }\n};\n\n/**\n * Set reporting on pin\n * @param {number} pin The pin to turn on/off reporting\n * @param {number} value Binary value to turn reporting on/off\n */\n\nBoard.prototype.reportDigitalPin = function(pin, value) {\n  const port = pin >> 3;\n  /* istanbul ignore else */\n  if (value === 0 || value === 1) {\n    this.pins[pin].report = value;\n    writeToTransport(this, [REPORT_DIGITAL | port, value]);\n  }\n};\n\n/**\n *\n *\n */\n\nBoard.prototype.pingRead = function(options, callback) {\n\n  if (!this.pins[options.pin].supportedModes.includes(PING_READ)) {\n    throw new Error(\"Please upload PingFirmata to the board\");\n  }\n\n  const {pin, value, pulseOut = 0, timeout = 1000000} = options;\n  const pulseOutArray = [\n    (pulseOut >> 24) & 0xFF,\n    (pulseOut >> 16) & 0xFF,\n    (pulseOut >> 8) & 0XFF,\n    (pulseOut & 0xFF),\n  ];\n  const timeoutArray = [\n    (timeout >> 24) & 0xFF,\n    (timeout >> 16) & 0xFF,\n    (timeout >> 8) & 0XFF,\n    (timeout & 0xFF),\n  ];\n\n  writeToTransport(this, [\n    START_SYSEX,\n    PING_READ,\n    pin,\n    value,\n    ...Board.encode(pulseOutArray),\n    ...Board.encode(timeoutArray),\n    END_SYSEX,\n  ]);\n\n  this.once(`ping-read-${pin}`, callback);\n};\n\n/**\n * Stepper functions to support version 2 of ConfigurableFirmata's asynchronous control of stepper motors\n * https://github.com/soundanalogous/ConfigurableFirmata\n */\n\n/**\n * Asks the arduino to configure a stepper motor with the given config to allow asynchronous control of the stepper\n * @param {object} opts Options:\n *    {number} deviceNum: Device number for the stepper (range 0-9)\n *    {number} type: One of this.STEPPER.TYPE.*\n *    {number} stepSize: One of this.STEPPER.STEP_SIZE.*\n *    {number} stepPin: Only used if STEPPER.TYPE.DRIVER\n *    {number} directionPin: Only used if STEPPER.TYPE.DRIVER\n *    {number} motorPin1: motor pin 1\n *    {number} motorPin2:  motor pin 2\n *    {number} [motorPin3]: Only required if type == this.STEPPER.TYPE.THREE_WIRE || this.STEPPER.TYPE.FOUR_WIRE\n *    {number} [motorPin4]: Only required if type == this.STEPPER.TYPE.FOUR_WIRE\n *    {number} [enablePin]: Enable pin\n *    {array} [invertPins]: Array of pins to invert\n */\n\nBoard.prototype.accelStepperConfig = function(options) {\n\n  let {\n    deviceNum,\n    invertPins,\n    motorPin1,\n    motorPin2,\n    motorPin3,\n    motorPin4,\n    enablePin,\n    stepSize = this.STEPPER.STEP_SIZE.WHOLE,\n    type = this.STEPPER.TYPE.FOUR_WIRE,\n  } = options;\n\n  const data = [\n    START_SYSEX,\n    ACCELSTEPPER,\n    0x00, // STEPPER_CONFIG from firmware\n    deviceNum\n  ];\n\n  let iface = ((type & 0x07) << 4) | ((stepSize & 0x07) << 1);\n  let pinsToInvert = 0x00;\n\n  if (typeof enablePin !== \"undefined\") {\n    iface = iface | 0x01;\n  }\n\n  data.push(iface);\n\n  [\"stepPin\", \"motorPin1\", \"directionPin\", \"motorPin2\", \"motorPin3\", \"motorPin4\", \"enablePin\"].forEach(pin => {\n    if (typeof options[pin] !== \"undefined\") {\n      data.push(options[pin]);\n    }\n  });\n\n  if (Array.isArray(invertPins)) {\n    if (invertPins.includes(motorPin1)) {\n      pinsToInvert |= 0x01;\n    }\n    if (invertPins.includes(motorPin2)) {\n      pinsToInvert |= 0x02;\n    }\n    if (invertPins.includes(motorPin3)) {\n      pinsToInvert |= 0x04;\n    }\n    if (invertPins.includes(motorPin4)) {\n      pinsToInvert |= 0x08;\n    }\n    if (invertPins.includes(enablePin)) {\n      pinsToInvert |= 0x10;\n    }\n  }\n\n  data.push(\n    pinsToInvert,\n    END_SYSEX\n  );\n\n  writeToTransport(this, data);\n};\n\n/**\n * Asks the arduino to set the stepper position to 0\n * Note: This is not a move. We are setting the current position equal to zero\n * @param {number} deviceNum Device number for the stepper (range 0-9)\n */\n\nBoard.prototype.accelStepperZero = function(deviceNum) {\n  writeToTransport(this, [\n    START_SYSEX,\n    ACCELSTEPPER,\n    0x01, // STEPPER_ZERO from firmware\n    deviceNum,\n    END_SYSEX,\n  ]);\n};\n\n/**\n * Asks the arduino to move a stepper a number of steps\n * (and optionally with and acceleration and deceleration)\n * speed is in units of steps/sec\n * @param {number} deviceNum Device number for the stepper (range 0-5)\n * @param {number} steps Number of steps to make\n */\nBoard.prototype.accelStepperStep = function(deviceNum, steps, callback) {\n\n  writeToTransport(this, [\n    START_SYSEX,\n    ACCELSTEPPER,\n    0x02, // STEPPER_STEP from firmware\n    deviceNum,\n    ...encode32BitSignedInteger(steps),\n    END_SYSEX,\n  ]);\n\n  if (callback) {\n    this.once(`stepper-done-${deviceNum}`, callback);\n  }\n};\n\n/**\n * Asks the arduino to move a stepper to a specific location\n * @param {number} deviceNum Device number for the stepper (range 0-5)\n * @param {number} position Desired position\n */\nBoard.prototype.accelStepperTo = function(deviceNum, position, callback) {\n\n  writeToTransport(this, [\n    START_SYSEX,\n    ACCELSTEPPER,\n    0x03, // STEPPER_TO from firmware\n    deviceNum,\n    ...encode32BitSignedInteger(position),\n    END_SYSEX,\n  ]);\n\n  if (callback) {\n    this.once(`stepper-done-${deviceNum}`, callback);\n  }\n};\n\n/**\n * Asks the arduino to enable/disable a stepper\n * @param {number} deviceNum Device number for the stepper (range 0-9)\n * @param {boolean} [enabled]\n */\n\nBoard.prototype.accelStepperEnable = function(deviceNum, enabled = true) {\n  writeToTransport(this, [\n    START_SYSEX,\n    ACCELSTEPPER,\n    0x04, // ENABLE from firmware\n    deviceNum,\n    enabled & 0x01,\n    END_SYSEX,\n  ]);\n};\n\n/**\n * Asks the arduino to stop a stepper\n * @param {number} deviceNum Device number for the stepper (range 0-9)\n */\n\nBoard.prototype.accelStepperStop = function(deviceNum) {\n  writeToTransport(this, [\n    START_SYSEX,\n    ACCELSTEPPER,\n    0x05, // STEPPER_STOP from firmware\n    deviceNum,\n    END_SYSEX,\n  ]);\n};\n\n/**\n * Asks the arduino to report the position of a stepper\n * @param {number} deviceNum Device number for the stepper (range 0-9)\n */\n\nBoard.prototype.accelStepperReportPosition = function(deviceNum, callback) {\n  writeToTransport(this, [\n    START_SYSEX,\n    ACCELSTEPPER,\n    0x06, // STEPPER_REPORT_POSITION from firmware\n    deviceNum,\n    END_SYSEX,\n  ]);\n\n  /* istanbul ignore else */\n  if (callback) {\n    this.once(`stepper-position-${deviceNum}`, callback);\n  }\n};\n\n/**\n * Asks the arduino to set the acceleration for a stepper\n * @param {number} deviceNum Device number for the stepper (range 0-9)\n * @param {number} acceleration Desired acceleration in steps per sec^2\n */\n\nBoard.prototype.accelStepperAcceleration = function(deviceNum, acceleration) {\n  writeToTransport(this, [\n    START_SYSEX,\n    ACCELSTEPPER,\n    0x08, // STEPPER_SET_ACCELERATION from firmware\n    deviceNum,\n    ...encodeCustomFloat(acceleration),\n    END_SYSEX,\n  ]);\n};\n\n\n/**\n * Asks the arduino to set the max speed for a stepper\n * @param {number} deviceNum Device number for the stepper (range 0-9)\n * @param {number} speed Desired speed or maxSpeed in steps per second\n * @param {function} [callback]\n */\n\nBoard.prototype.accelStepperSpeed = function(deviceNum, speed) {\n  writeToTransport(this, [\n    START_SYSEX,\n    ACCELSTEPPER,\n    0x09, // STEPPER_SET_SPEED from firmware\n    deviceNum,\n    ...encodeCustomFloat(speed),\n    END_SYSEX,\n  ]);\n};\n\n/**\n * Asks the arduino to configure a multiStepper group\n * @param {object} options Options:\n *    {number} groupNum: Group number for the multiSteppers (range 0-5)\n *    {number} devices: array of accelStepper device numbers in group\n **/\n\nBoard.prototype.multiStepperConfig = function(options) {\n  writeToTransport(this, [\n    START_SYSEX,\n    ACCELSTEPPER,\n    0x20, // MULTISTEPPER_CONFIG from firmware\n    options.groupNum,\n    ...options.devices,\n    END_SYSEX,\n  ]);\n};\n\n/**\n * Asks the arduino to move a multiStepper group\n * @param {number} groupNum Group number for the multiSteppers (range 0-5)\n * @param {number} positions array of absolute stepper positions\n **/\n\nBoard.prototype.multiStepperTo = function(groupNum, positions, callback) {\n  if (groupNum < 0 || groupNum > 5) {\n    throw new RangeError(`Invalid \"groupNum\": ${groupNum}. Expected \"groupNum\" between 0-5`);\n  }\n\n  writeToTransport(this, [\n    START_SYSEX,\n    ACCELSTEPPER,\n    0x21, // MULTISTEPPER_TO from firmware\n    groupNum,\n    ...positions.reduce((a, b) => a.concat(...encode32BitSignedInteger(b)), []),\n    END_SYSEX,\n  ]);\n\n  /* istanbul ignore else */\n  if (callback) {\n    this.once(`multi-stepper-done-${groupNum}`, callback);\n  }\n};\n/**\n * Asks the arduino to stop a multiStepper group\n * @param {number} groupNum: Group number for the multiSteppers (range 0-5)\n **/\n\nBoard.prototype.multiStepperStop = function(groupNum) {\n  /* istanbul ignore else */\n  if (groupNum < 0 || groupNum > 5) {\n    throw new RangeError(`Invalid \"groupNum\": ${groupNum}. Expected \"groupNum\" between 0-5`);\n  }\n  writeToTransport(this, [\n    START_SYSEX,\n    ACCELSTEPPER,\n    0x23, // MULTISTEPPER_STOP from firmware\n    groupNum,\n    END_SYSEX,\n  ]);\n};\n\n/**\n * Stepper functions to support AdvancedFirmata's asynchronous control of stepper motors\n * https://github.com/soundanalogous/AdvancedFirmata\n */\n\n/**\n * Asks the arduino to configure a stepper motor with the given config to allow asynchronous control of the stepper\n * @param {number} deviceNum Device number for the stepper (range 0-5, expects steppers to be setup in order from 0 to 5)\n * @param {number} type One of this.STEPPER.TYPE.*\n * @param {number} stepsPerRev Number of steps motor takes to make one revolution\n * @param {number} stepOrMotor1Pin If using EasyDriver type stepper driver, this is direction pin, otherwise it is motor 1 pin\n * @param {number} dirOrMotor2Pin If using EasyDriver type stepper driver, this is step pin, otherwise it is motor 2 pin\n * @param {number} [motorPin3] Only required if type == this.STEPPER.TYPE.FOUR_WIRE\n * @param {number} [motorPin4] Only required if type == this.STEPPER.TYPE.FOUR_WIRE\n */\n\nBoard.prototype.stepperConfig = function(deviceNum, type, stepsPerRev, dirOrMotor1Pin, dirOrMotor2Pin, motorPin3, motorPin4) {\n  writeToTransport(this, [\n    START_SYSEX,\n    STEPPER,\n    0x00, // STEPPER_CONFIG from firmware\n    deviceNum,\n    type,\n    stepsPerRev & 0x7F,\n    (stepsPerRev >> 7) & 0x7F,\n    dirOrMotor1Pin,\n    dirOrMotor2Pin,\n    ...(type === this.STEPPER.TYPE.FOUR_WIRE ? [motorPin3, motorPin4] : []),\n    END_SYSEX\n  ]);\n};\n\n/**\n * Asks the arduino to move a stepper a number of steps at a specific speed\n * (and optionally with and acceleration and deceleration)\n * speed is in units of .01 rad/sec\n * accel and decel are in units of .01 rad/sec^2\n * TODO: verify the units of speed, accel, and decel\n * @param {number} deviceNum Device number for the stepper (range 0-5)\n * @param {number} direction One of this.STEPPER.DIRECTION.*\n * @param {number} steps Number of steps to make\n * @param {number} speed\n * @param {number|function} accel Acceleration or if accel and decel are not used, then it can be the callback\n * @param {number} [decel]\n * @param {function} [callback]\n */\n\nBoard.prototype.stepperStep = function(deviceNum, direction, steps, speed, accel, decel, callback) {\n  if (typeof accel === \"function\") {\n    callback = accel;\n    accel = 0;\n    decel = 0;\n  }\n\n  writeToTransport(this, [\n    START_SYSEX,\n    STEPPER,\n    0x01, // STEPPER_STEP from firmware\n    deviceNum,\n    direction, // one of this.STEPPER.DIRECTION.*\n    steps & 0x7F, (steps >> 7) & 0x7F, (steps >> 14) & 0x7F,\n    speed & 0x7F, (speed >> 7) & 0x7F,\n\n    ...(accel > 0 || decel > 0 ?\n        [accel & 0x7F, (accel >> 7) & 0x7F, decel & 0x7F, (decel >> 7) & 0x7F] : []),\n\n    END_SYSEX,\n  ]);\n\n  /* istanbul ignore else */\n  if (callback) {\n    this.once(`stepper-done-${deviceNum}`, callback);\n  }\n};\n\n/**\n * Asks the Arduino to configure a hardware or serial port.\n * @param {object} options Options:\n *   portId {number} The serial port to use (HW_SERIAL1, HW_SERIAL2, HW_SERIAL3, SW_SERIAL0,\n *   SW_SERIAL1, SW_SERIAL2, SW_SERIAL3)\n *   baud {number} The baud rate of the serial port\n *   rxPin {number} [SW Serial only] The RX pin of the SoftwareSerial instance\n *   txPin {number} [SW Serial only] The TX pin of the SoftwareSerial instance\n */\n\nBoard.prototype.serialConfig = function(options) {\n\n  let portId;\n  let baud;\n  let rxPin;\n  let txPin;\n\n  /* istanbul ignore else */\n  if (typeof options === \"object\" && options !== null) {\n    portId = options.portId;\n    baud = options.baud;\n    rxPin = options.rxPin;\n    txPin = options.txPin;\n  }\n\n  /* istanbul ignore else */\n  if (typeof portId === \"undefined\") {\n    throw new Error(\"portId must be specified, see SERIAL_PORT_IDs for options.\");\n  }\n\n  baud = baud || 57600;\n\n  const data = [\n    START_SYSEX,\n    SERIAL_MESSAGE,\n    SERIAL_CONFIG | portId,\n    baud & 0x7F,\n    (baud >> 7) & 0x7F,\n    (baud >> 14) & 0x7F\n  ];\n  if (portId > 7 && typeof rxPin !== \"undefined\" && typeof txPin !== \"undefined\") {\n    data.push(rxPin, txPin);\n  } else if (portId > 7) {\n    throw new Error(\"Both RX and TX pins must be defined when using Software Serial.\");\n  }\n\n  data.push(END_SYSEX);\n  writeToTransport(this, data);\n};\n\n/**\n * Write an array of bytes to the specified serial port.\n * @param {number} portId The serial port to write to.\n * @param {Array} inBytes An array of bytes to write to the serial port.\n */\n\nBoard.prototype.serialWrite = function(portId, bytes) {\n  const data = [\n    START_SYSEX,\n    SERIAL_MESSAGE,\n    SERIAL_WRITE | portId,\n  ];\n  for (let i = 0, len = bytes.length; i < len; i++) {\n    data.push(\n      bytes[i] & 0x7F,\n      (bytes[i] >> 7) & 0x7F\n    );\n  }\n  data.push(END_SYSEX);\n  /* istanbul ignore else */\n  if (bytes.length > 0) {\n    writeToTransport(this, data);\n  }\n};\n\n/**\n * Start continuous reading of the specified serial port. The port is checked for data each\n * iteration of the main Arduino loop.\n * @param {number} portId The serial port to start reading continuously.\n * @param {number} maxBytesToRead [Optional] The maximum number of bytes to read per iteration.\n * If there are less bytes in the buffer, the lesser number of bytes will be returned. A value of 0\n * indicates that all available bytes in the buffer should be read.\n * @param {function} callback A function to call when we have received the bytes.\n */\n\nBoard.prototype.serialRead = function(portId, maxBytesToRead, callback) {\n  const data = [\n    START_SYSEX,\n    SERIAL_MESSAGE,\n    SERIAL_READ | portId,\n    this.SERIAL_MODES.CONTINUOUS_READ\n  ];\n\n  if (arguments.length === 2 && typeof maxBytesToRead === \"function\") {\n    callback = maxBytesToRead;\n  } else {\n    data.push(maxBytesToRead & 0x7F, (maxBytesToRead >> 7) & 0x7F);\n  }\n\n  data.push(END_SYSEX);\n  writeToTransport(this, data);\n\n  this.on(`serial-data-${portId}`, callback);\n};\n\n/**\n * Stop continuous reading of the specified serial port. This does not close the port, it stops\n * reading it but keeps the port open.\n * @param {number} portId The serial port to stop reading.\n */\n\nBoard.prototype.serialStop = function(portId) {\n  writeToTransport(this, [\n    START_SYSEX,\n    SERIAL_MESSAGE,\n    SERIAL_READ | portId,\n    this.SERIAL_MODES.STOP_READING,\n    END_SYSEX,\n  ]);\n\n  this.removeAllListeners(`serial-data-${portId}`);\n};\n\n/**\n * Close the specified serial port.\n * @param {number} portId The serial port to close.\n */\n\nBoard.prototype.serialClose = function(portId) {\n  writeToTransport(this, [\n    START_SYSEX,\n    SERIAL_MESSAGE,\n    SERIAL_CLOSE | portId,\n    END_SYSEX,\n  ]);\n};\n\n/**\n * Flush the specified serial port. For hardware serial, this waits for the transmission of\n * outgoing serial data to complete. For software serial, this removed any buffered incoming serial\n * data.\n * @param {number} portId The serial port to flush.\n */\n\nBoard.prototype.serialFlush = function(portId) {\n  writeToTransport(this, [\n    START_SYSEX,\n    SERIAL_MESSAGE,\n    SERIAL_FLUSH | portId,\n    END_SYSEX,\n  ]);\n};\n\n/**\n * For SoftwareSerial only. Only a single SoftwareSerial instance can read data at a time.\n * Call this method to set this port to be the reading port in the case there are multiple\n * SoftwareSerial instances.\n * @param {number} portId The serial port to listen on.\n */\n\nBoard.prototype.serialListen = function(portId) {\n  // listen only applies to software serial ports\n  if (portId < 8) {\n    return;\n  }\n  writeToTransport(this, [\n    START_SYSEX,\n    SERIAL_MESSAGE,\n    SERIAL_LISTEN | portId,\n    END_SYSEX,\n  ]);\n};\n\n/**\n * Allow user code to handle arbitrary sysex responses\n *\n * @param {number} commandByte The commandByte must be associated with some message\n *                             that's expected from the slave device. The handler is\n *                             called with an array of _raw_ data from the slave. Data\n *                             decoding must be done within the handler itself.\n *\n *                             Use Board.decode(data) to extract useful values from\n *                             the incoming response data.\n *\n *  @param {function} handler Function which handles receipt of responses matching\n *                            commandByte.\n */\n\nBoard.prototype.sysexResponse = function(commandByte, handler) {\n  if (Board.SYSEX_RESPONSE[commandByte]) {\n    throw new Error(`${commandByte} is not an available SYSEX_RESPONSE byte`);\n  }\n\n  Board.SYSEX_RESPONSE[commandByte] = function(board) {\n    handler.call(board, board.buffer.slice(2, -1));\n  };\n\n  return this;\n};\n\n/*\n * Allow user to remove sysex response handlers.\n *\n * @param {number} commandByte The commandByte to disassociate with a handler\n *                             previously set via `sysexResponse( commandByte, handler)`.\n */\n\nBoard.prototype.clearSysexResponse = function(commandByte) {\n  /* istanbul ignore else */\n  if (Board.SYSEX_RESPONSE[commandByte]) {\n    delete Board.SYSEX_RESPONSE[commandByte];\n  }\n};\n\n/**\n * Allow user code to send arbitrary sysex messages\n *\n * @param {Array} message The message array is expected to be all necessary bytes\n *                        between START_SYSEX and END_SYSEX (non-inclusive). It will\n *                        be assumed that the data in the message array is\n *                        already encoded as 2 7-bit bytes LSB first.\n *\n *\n */\n\nBoard.prototype.sysexCommand = function(message) {\n\n  if (!message || !message.length) {\n    throw new Error(\"Sysex Command cannot be empty\");\n  }\n\n  writeToTransport(this, [START_SYSEX, ...message.slice(), END_SYSEX]);\n  return this;\n};\n\n\n/**\n * Send SYSTEM_RESET to arduino\n */\n\nBoard.prototype.reset = function() {\n  writeToTransport(this, [SYSTEM_RESET]);\n};\n\n/**\n * Board.isAcceptablePort Determines if a `port` object (from SerialPort.list(...))\n * is a valid Arduino (or similar) device.\n * @return {Boolean} true if port can be connected to by Firmata\n */\n\nBoard.isAcceptablePort = function(port) {\n  let rport = /usb|acm|^com/i;\n\n  if (rport.test(port.comName)) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Board.requestPort(callback) Request an acceptable port to connect to.\n * callback(error, port)\n */\n\nBoard.requestPort = function(callback) {\n  com.list(function(error, ports) {\n    const port = ports.find(port => Board.isAcceptablePort(port) && port);\n\n    if (port) {\n      callback(null, port);\n    } else {\n      callback(new Error(\"No Acceptable Port Found\"), null);\n    }\n  });\n};\n\n// For backwards compatibility\nBoard.Board = Board;\nBoard.SYSEX_RESPONSE = SYSEX_RESPONSE;\nBoard.MIDI_RESPONSE = MIDI_RESPONSE;\n\n// Expose encode/decode for custom sysex messages\nBoard.encode = function(data) {\n  const encoded = [];\n  const length = data.length;\n\n  for (let i = 0; i < length; i++) {\n    encoded.push(\n      data[i] & 0x7F,\n      (data[i] >> 7) & 0x7F\n    );\n  }\n\n  return encoded;\n};\n\nBoard.decode = function(data) {\n  const decoded = [];\n\n  if (data.length % 2 !== 0) {\n    throw new Error(\"Board.decode(data) called with odd number of data bytes\");\n  }\n\n  while (data.length) {\n    const lsb = data.shift();\n    const msb = data.shift();\n    decoded.push(lsb | (msb << 7));\n  }\n\n  return decoded;\n};\n\n// The following are used internally.\n\nfunction encode32BitSignedInteger(data) {\n  var encoded = [];\n  var negative = data < 0;\n\n  data = Math.abs(data);\n\n  encoded.push(\n    data & 0x7F,\n    (data >> 7) & 0x7F,\n    (data >> 14) & 0x7F,\n    (data >> 21) & 0x7F,\n    (data >> 28) & 0x07\n  );\n\n  if (negative) {\n    encoded[encoded.length - 1] |= 0x08;\n  }\n\n  return encoded;\n}\n\nfunction decode32BitSignedInteger(bytes) {\n  let result = (bytes[0] & 0x7F) |\n    ((bytes[1] & 0x7F) << 7) |\n    ((bytes[2] & 0x7F) << 14) |\n    ((bytes[3] & 0x7F) << 21) |\n    ((bytes[4] & 0x07) << 28);\n\n  if (bytes[4] >> 3) {\n    result *= -1;\n  }\n\n  return result;\n}\n\nconst MAX_SIGNIFICAND = Math.pow(2, 23);\n\nfunction encodeCustomFloat(input) {\n  let encoded = [];\n  let exponent = 0;\n  let sign = input < 0 ? 1 : 0;\n\n  input = Math.abs(input);\n\n  let base10 = Math.floor(Math.log10(input));\n\n  // Shift decimal to start of significand\n  exponent += base10;\n  input /= Math.pow(10, base10);\n\n  // Shift decimal to the right as far as we can\n  while (!Number.isInteger(input) && input < MAX_SIGNIFICAND) {\n    exponent -= 1;\n    input *= 10;\n  }\n\n  // Reduce precision if necessary\n  while (input > MAX_SIGNIFICAND) {\n    exponent += 1;\n    input /= 10;\n  }\n\n  input = Math.trunc(input);\n  exponent += 11;\n\n  encoded = [\n    input & 0x7F,\n    (input >> 7) & 0x7F,\n    (input >> 14) & 0x7F,\n    (input >> 21) & 0x03 | (exponent & 0x0F) << 2 | (sign & 0x01) << 6\n  ];\n\n  return encoded;\n}\n\nfunction decodeCustomFloat(input) {\n  let result = input[0] |\n    (input[1] << 7) |\n    (input[2] << 14) |\n    (input[3] & 0x03) << 21;\n  let exponent = ((input[3] >> 2) & 0x0F) - 11;\n  let sign = (input[3] >> 6) & 0x01;\n\n  if (sign) {\n    result *= -1;\n  }\n  return result * Math.pow(10, exponent);\n}\n\n\n/* istanbul ignore else */\nif (process.env.IS_TEST_MODE) {\n  Board.test = {\n    i2cPeripheralSettings(board) {\n      return i2cActive.get(board);\n    },\n    get i2cActive() {\n      return i2cActive;\n    },\n    encode32BitSignedInteger,\n    decode32BitSignedInteger,\n    encodeCustomFloat,\n    decodeCustomFloat,\n    writeToTransport,\n  };\n}\n\nmodule.exports = Board;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/firmata/lib/firmata.js?");

/***/ }),

/***/ "./node_modules/firmata/lib/onewireutils.js":
/*!**************************************************!*\
  !*** ./node_modules/firmata/lib/onewireutils.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nconst Encoder7Bit = __webpack_require__(/*! ./encoder7bit */ \"./node_modules/firmata/lib/encoder7bit.js\");\nconst OneWireUtils = {\n  crc8(data) {\n    let crc = 0;\n\n    for (let inbyte of data) {\n      for (let n = 8; n; n--) {\n        const mix = (crc ^ inbyte) & 0x01;\n        crc >>= 1;\n\n        if (mix) {\n          crc ^= 0x8C;\n        }\n\n        inbyte >>= 1;\n      }\n    }\n\n    return crc;\n  },\n\n  readDevices(data) {\n    const deviceBytes = Encoder7Bit.from7BitArray(data);\n    const devices = [];\n\n    for (let i = 0; i < deviceBytes.length; i += 8) {\n      const device = deviceBytes.slice(i, i + 8);\n\n      if (device.length !== 8) {\n        continue;\n      }\n\n      const check = OneWireUtils.crc8(device.slice(0, 7));\n\n      if (check !== device[7]) {\n        console.error(\"ROM invalid!\");\n      }\n\n      devices.push(device);\n    }\n\n    return devices;\n  }\n};\n\nmodule.exports = OneWireUtils;\n\n\n//# sourceURL=webpack:///./node_modules/firmata/lib/onewireutils.js?");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack:///./node_modules/ieee754/index.js?");

/***/ }),

/***/ "./node_modules/inherits/inherits_browser.js":
/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n\n//# sourceURL=webpack:///./node_modules/inherits/inherits_browser.js?");

/***/ }),

/***/ "./node_modules/is-arrayish/index.js":
/*!*******************************************!*\
  !*** ./node_modules/is-arrayish/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function isArrayish(obj) {\n\tif (!obj || typeof obj === 'string') {\n\t\treturn false;\n\t}\n\n\treturn obj instanceof Array || Array.isArray(obj) ||\n\t\t(obj.length >= 0 && (obj.splice instanceof Function ||\n\t\t\t(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));\n};\n\n\n//# sourceURL=webpack:///./node_modules/is-arrayish/index.js?");

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n//# sourceURL=webpack:///./node_modules/isarray/index.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/accelerometer.js":
/*!*******************************************************!*\
  !*** ./node_modules/johnny-five/lib/accelerometer.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\");\nvar Expander = __webpack_require__(/*! ./expander */ \"./node_modules/johnny-five/lib/expander.js\");\nvar Emitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\nvar Fn = __webpack_require__(/*! ./fn */ \"./node_modules/johnny-five/lib/fn.js\");\n\nvar constrain = Fn.constrain;\nvar fma = Fn.fma;\nvar int16 = Fn.int16;\nvar sum = Fn.sum;\nvar toFixed = Fn.toFixed;\n\nvar priv = new Map();\nvar calibrationSize = 10;\n\nvar aX = \"x\";\nvar aY = \"y\";\nvar aZ = \"z\";\nvar axes = [aX, aY, aZ];\n\nfunction analogInitialize(opts, dataHandler) {\n  var state = priv.get(this);\n  var dataPoints = {};\n\n  state.zeroV = opts.zeroV || this.DEFAULTS.zeroV;\n  state.sensitivity = opts.sensitivity || this.DEFAULTS.sensitivity;\n\n  this.pins.forEach(function(pin, index) {\n    this.io.pinMode(pin, this.io.MODES.ANALOG);\n    this.io.analogRead(pin, function(data) {\n      var axis = axes[index];\n      dataPoints[axis] = data;\n      dataHandler(dataPoints);\n    }.bind(this));\n  }, this);\n}\n\nfunction analogToGravity(raw, axis) {\n  var state = priv.get(this);\n  var zeroV = state.zeroV;\n\n  if (Array.isArray(zeroV) && zeroV.length > 0) {\n    var axisIndex = axes.indexOf(axis);\n    zeroV = zeroV[axisIndex || 0];\n  }\n\n  return (raw - zeroV) / state.sensitivity;\n}\n\nvar Controllers = {\n  ANALOG: {\n    DEFAULTS: {\n      value: {\n        zeroV: 478,\n        sensitivity: 96\n      }\n    },\n    initialize: {\n      value: analogInitialize\n    },\n    toGravity: {\n      value: analogToGravity\n    }\n  },\n  MPU6050: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var IMU = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = IMU.Drivers.get(this.board, \"MPU6050\", opts);\n        var state = priv.get(this);\n\n        state.sensitivity = opts.sensitivity || 16384;\n\n        driver.on(\"data\", function(data) {\n          dataHandler(data.accelerometer);\n        });\n      }\n    },\n    toGravity: {\n      value: function(raw) {\n        // Table 6.2 (Accelerometer specifications)\n        // Sensitivity for AFS_SEL=0\n        // Full scale range +- 2g\n        // ADC word length 16 bit 2's complement\n        // 16384 LSB/g = 0.000061035 g/LSB = 0.061035156 mg/LSB\n        var state = priv.get(this);\n        // Returing a decimal part fixed at 3 digits, not sure if this assumption is correct\n        // (approximating to 0.061 mg/LSB)\n        return toFixed(raw / state.sensitivity, 3);\n      }\n    }\n  },\n  BNO055: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var IMU = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = IMU.Drivers.get(this.board, \"BNO055\", opts);\n        var state = priv.get(this);\n\n        // Page 31, Table 3-17\n        state.sensitivity = 100;\n\n        driver.on(\"data\", function(data) {\n          dataHandler(data.accelerometer);\n        });\n      }\n    },\n    toGravity: {\n      value: function(raw) {\n        // Page 31, Table 3-17\n        // Assuming that the the `m/s^2` representation is used given that `state.sensitvity = 100`\n        // 1m/s^2 = 100LSB -> 1LSB = 0.01m/s^2\n        var state = priv.get(this);\n        return toFixed(raw / state.sensitivity, 2);\n      }\n    }\n  },\n\n  ADXL335: {\n    DEFAULTS: {\n      value: {\n        zeroV: 330,\n        sensitivity: 66.5\n      }\n    },\n    initialize: {\n      value: analogInitialize\n    },\n    toGravity: {\n      // Page 3, Table 1\n      // Typical range +- 3.6g\n      // Sensitivity: 300mV/g\n      // MaxSensitvity: 330mv/g\n      value: function(value, axis) {\n        var read = analogToGravity.call(this, value, axis);\n        return toFixed(read, 3);\n      }\n    }\n  },\n\n  ADXL345: {\n    ADDRESSES: {\n      value: [0x53]\n    },\n    REGISTER: {\n      value: {\n        // Page 23\n        // REGISTER MAP\n        //\n        POWER: 0x2D,\n        // 0x31 49 DATA_FORMAT R/W 00000000 Data format control\n        DATA_FORMAT: 0x31,\n        // 0x32 50 DATAX0 R 00000000 X-Axis Data 0\n        DATAX0: 0x32\n      }\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var READLENGTH = 6;\n        var address = opts.address || this.ADDRESSES[0];\n\n        opts.address = address;\n\n        this.io.i2cConfig(opts);\n\n        // Standby mode\n        this.io.i2cWrite(address, this.REGISTER.POWER, 0);\n\n        // Enable measurements\n        this.io.i2cWrite(address, this.REGISTER.POWER, 8);\n\n        /*\n\n          Page 26\n\n          Register 0x31—DATA_FORMAT (Read/Write)\n\n          | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |\n          | - | - | - | - | - | - | - | - |\n          | T | S | I | - | F | J | R     |\n\n          T: SELF_TEST\n          S: SPI\n          I: INT_INVERT\n          -:-\n          F: FULL_RES\n          J: JUSTIFY\n          R: RANGE\n\n          Range notes: https://github.com/rwaldron/johnny-five/issues/1135#issuecomment-219541346\n\n          +/- 16g  0b11\n          +/- 8g   0b10\n          +/- 4g   0b01\n          +/- 2g   0b00\n\n\n          Start with FULL_RES bit on\n\n          0b00001000 = 0x08 = 8\n        */\n        var format = 0x08;\n\n        /*\n          Determine range\n\n          0b00000000 = 0 = ±2g\n          0b00000001 = 1 = ±4g\n          0b00000010 = 2 = ±8g\n          0b00000011 = 3 = ±16g\n        */\n        var range = ({\n          2: 0,\n          4: 1,\n          8: 2,\n          16: 3\n        })[opts.range || 2];\n\n        // Merge the format and range bits to set the DATA_FORMAT\n        this.io.i2cWrite(address, this.REGISTER.DATA_FORMAT, format | range);\n\n        this.io.i2cRead(address, this.REGISTER.DATAX0, READLENGTH, function(data) {\n          dataHandler({\n            x: int16(data[1], data[0]),\n            y: int16(data[3], data[2]),\n            z: int16(data[5], data[4])\n          });\n        });\n      },\n    },\n    toGravity: {\n      value: function(raw) {\n        // Page 4, Table 1\n        //\n        // Sensitivity\n        // All g-ranges, full resolution, 256LSB/g, 0.00390625g/LSB\n        return toFixed(raw * 0.00390625, 8);\n      }\n    }\n  },\n  MMA7361: {\n    DEFAULTS: {\n      value: {\n        zeroV: [372, 372, 287],\n        sensitivity: 170\n      }\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n\n        /* istanbul ignore else */\n        if (opts.sleepPin !== undefined) {\n          state.sleepPin = opts.sleepPin;\n          this.io.pinMode(state.sleepPin, 1);\n          this.io.digitalWrite(state.sleepPin, 1);\n        }\n\n        analogInitialize.call(this, opts, dataHandler);\n      }\n    },\n    toGravity: {\n      // Page 3, Table 2\n      //\n      // Sensitivity\n      // 1.5g, 800mV/g\n      // 6g, 221.5mV/g\n      value: function(value, axis) {\n        var read = analogToGravity.call(this, value, axis);\n        return toFixed(read, 3);\n      }\n    },\n    enabledChanged: {\n      value: function(value) {\n        var state = priv.get(this);\n\n        /* istanbul ignore else */\n        if (state.sleepPin !== undefined) {\n          this.io.digitalWrite(state.sleepPin, value ? 1 : 0);\n        }\n      }\n    }\n  },\n  MMA8452: {\n    ADDRESSES: {\n      value: [0x1D]\n    },\n    REGISTER: {\n      value: {\n        // Page 18\n        // 6. Register Descriptions\n        STATUS: 0x00,\n        OUT_X_MSB: 0x01,\n        XYZ_DATA_CFG: 0x0E,\n        PULSE_CFG: 0x21,\n        PULSE_SRC: 0x22,\n        PULSE_THSX: 0x23,\n        PULSE_THSY: 0x24,\n        PULSE_THSZ: 0x25,\n        PULSE_TMLT: 0x26,\n        PULSE_LTCY: 0x27,\n        PULSE_WIND: 0x28,\n        CTRL_REG1: 0x2A,\n        CTRL_REG4: 0x2E,\n        CTRL_REG5: 0x2F,\n      }\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n        var address = opts.address || this.ADDRESSES[0];\n\n        opts.address = address;\n\n        // TODO: make user definable.\n        // 0b000 800Hz\n        // 0b001 400Hz\n        // 0b010 200Hz\n        // 0b011 100Hz\n        // 0b100 50Hz\n        // 0b101 12Hz\n        // 0b110 6Hz\n\n        var rates = [800, 400, 200, 100, 50, 12, 6, ];\n        var odr = rates.indexOf(opts.odr || 800);\n        var scale = opts.range || 2;\n        var fsr = ({\n          2: 0,\n          4: 1,\n          8: 2\n        })[scale];\n\n        opts.taps = opts.taps || {\n          x: false,\n          y: false,\n          z: true,\n        };\n\n        var taps = {\n          x: opts.taps.x ? 0x08 : 0x80,\n          y: opts.taps.y ? 0x08 : 0x80,\n          z: opts.taps.z ? 0x08 : 0x80,\n        };\n\n        state.scale = scale;\n\n        var computed = {\n          x: null,\n          y: null,\n          z: null,\n        };\n\n        this.io.i2cConfig(\n          Object.assign(opts, {\n            settings: {\n              stopTX: false\n            }\n          })\n        );\n\n        if (odr === -1) {\n          throw new RangeError(\"Invalid odr. Expected one of: 800,  400,  200,  100,  50,  12,  6\");\n        }\n\n        /*\n          Initial CTRL_REG1 State\n\n          11000010 = 194 = 0xC2 -> ?\n          00000010 = 8 = 0x08\n          ^--------- ASLP_RATE1\n           ^-------- ASLP_RATE0\n            ^------- DR2\n             ^------ DR1\n              ^----- DR0\n               ^---- Noise\n                ^--- Fast Read\n                 ^-- Standby Mode\n        */\n\n        var config = 0x08;\n\n        /*\n          Page 5 (AN4076)\n          4.0 Setting the Data Rate\n\n          Set ODR\n\n          Shift the odr bits into place.\n\n          Default: 800Hz\n\n          11000010 = 194 = 0xC2 -> ?\n          00000010 = 8 = 0x08\n            ^^^----- DR2, DR1, DR0: 000\n        */\n        config |= odr << 3;\n\n        /*\n          Enter Standby Mode\n\n          11000010 = 194 = 0xC2 -> ?\n                ^--- Fast Read\n                 ^-- Standby Mode\n\n          00000010 = 8 = 0x08\n                ^--- Fast Read\n                 ^-- Standby Mode\n\n        */\n\n        this.io.i2cWriteReg(address, this.REGISTER.CTRL_REG1, config);\n\n        /*\n          Set FSR\n\n          Default: ±2g\n\n          00000000 = 0 = 0x00 ()\n                ^^----- FS1, FS2\n        */\n        this.io.i2cWriteReg(address, this.REGISTER.XYZ_DATA_CFG, fsr);\n\n        var temp = 0;\n\n        /*\n          Page 10 (AN4072)\n          4.2 Registers 0x23 - 0x25 PULSE_THSX, Y, Z\n              Pulse Threshold for X, Y and Z Registers\n\n          0x80 = B7 is HIGH\n          10000000\n          If B7 is HIGH, do not enable\n        */\n        if (!(taps.x & 0x80)) {\n          // 00000011\n          temp |= 0x03;\n          this.io.i2cWriteReg(address, this.REGISTER.PULSE_THSX, taps.x);\n        }\n\n        if (!(taps.y & 0x80)) {\n          // 00001100\n          temp |= 0x0C;\n          this.io.i2cWriteReg(address, this.REGISTER.PULSE_THSY, taps.y);\n        }\n\n        if (!(taps.z & 0x80)) {\n          // 00110000\n          temp |= 0x30;\n          this.io.i2cWriteReg(address, this.REGISTER.PULSE_THSZ, taps.z);\n        }\n\n        /*\n          Page 11, 12, 13 (AN4072)\n\n          Configure Tap Axis'\n\n          Table 1. Register 0x21 PULSE_CFG Register (Read/Write) and Description\n\n          | Tap Enable |  7  |  6  |  5  |  4  |  3  |  2  |  1  |  0  |\n          | ---------- | --- | --- | --- | --- | --- | --- | --- | --- |\n          |            | DPA | ELE | ZD  | ZS  | YD  | YS  | XD  | XS  |\n          | Single     |  0  |  1  |  0  |  1  |  0  |  1  |  0  |  1  |\n          | Double     |  0  |  1  |  1  |  0  |  1  |  0  |  1  |  0  |\n          | Both       |  0  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |\n\n\n          In the default case, `temp | 0x40` will be:\n\n          01110000 = 112 = 0x70\n\n          Latch On\n          ZD On\n          ZS On\n\n        */\n\n        this.io.i2cWriteReg(address, this.REGISTER.PULSE_CFG, temp | 0x40);\n\n        /*\n          Set TIME LIMIT for tap detection\n\n          60ms / 800Hz = 60ms / 1.25ms = 48 (counts) = 0x30\n          80ms / 800Hz = 80ms / 1.25ms = 64 (counts) = 0x40\n        */\n        this.io.i2cWriteReg(address, this.REGISTER.PULSE_TMLT, 60 / (1000 / rates[odr]));\n        /*\n          Set the PULSE LATENCY.\n\n          This is the time that must pass after the first\n          tap, but within the PULSE WINDOW for a double tap to register.\n\n          200ms / 800Hz = 200ms / 1.25ms = 160 (counts) = 0xA0\n        */\n        this.io.i2cWriteReg(address, this.REGISTER.PULSE_LTCY, 200 / (1000 / rates[odr]));\n\n        /*\n          Set the PULSE WINDOW.\n\n          This is the maximum interval of time to elapse after the latency\n          interval, for which the second pulse must occur for double taps.\n\n          The maximum allowed time:\n\n          800Hz * 255 = 1.25ms * 255 = 318ms\n        */\n        this.io.i2cWriteReg(address, this.REGISTER.PULSE_WIND, 0xFF);\n\n        /*\n          Leave Standby Mode\n\n          11000011 = 195 = 0xC3\n          00000011 = 3 = 0x03\n                ^--- Fast Read\n                 ^-- Standby Mode\n        */\n\n        config |= 0x01;\n\n        this.io.i2cWriteReg(address, this.REGISTER.CTRL_REG1, config);\n\n\n        this.io.i2cRead(address, this.REGISTER.STATUS, 7, function(data) {\n          var status = (data.shift() & 0x08) >>> 3;\n\n          /* istanbul ignore else */\n          if (status) {\n            // Page 9 (AN4076)\n            //\n            // 7.0 14-bit, 12-bit or 10-bit Data Streaming and Data Conversions\n            computed.x = int16(data[0], data[1]) >> 4;\n            computed.y = int16(data[2], data[3]) >> 4;\n            computed.z = int16(data[4], data[5]) >> 4;\n\n            dataHandler(computed);\n          }\n        }.bind(this));\n\n        this.io.i2cRead(address, this.REGISTER.PULSE_SRC, 1, function(data) {\n          var status = data[0];\n          var tap = status & 0x7F;\n\n          /* istanbul ignore else */\n          if (status & 0x80) {\n            this.emit(\"tap\");\n\n            // Single Tap\n            /* istanbul ignore else */\n            if ((tap >> 2) & 0x01) {\n              this.emit(\"tap:single\");\n\n              // Double Tap (must be both S and D bits)\n              /* istanbul ignore else */\n              if ((tap >> 3) & 0x01) {\n                this.emit(\"tap:double\");\n              }\n            }\n          }\n        }.bind(this));\n      },\n    },\n    toGravity: {\n      value: function(raw) {\n        //\n        // Paragraph 3.1, page 9\n        // Sensitivity\n        // 2g, 1024 counts/g, 0.000976562g/count\n        // 4g, 512 counts/g, 0.001953125g/count\n        // 8g, 256 counts/g, 0.00390625g/count\n        var state = priv.get(this);\n        // return raw / ((1 << 11) * state.scale);\n        return toFixed(raw / ((1 << 11) * state.scale), 4);\n      }\n    }\n  },\n  MMA7660: {\n    ADDRESSES: {\n      value: [0x4C]\n    },\n    REGISTER: {\n      value: {\n        XOUT: 0x00,\n        MODE: 0x07,\n        SR: 0x08,\n      }\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var READLENGTH = 3;\n        var address = opts.address || this.ADDRESSES[0];\n        var state = priv.get(this);\n\n        state.sensitivity = 21.33;\n\n        opts.address = address;\n\n        this.io.i2cConfig(opts);\n\n        //\n        // Standby mode\n        this.io.i2cWrite(address, this.REGISTER.MODE, 0x00);\n\n        // Sample Rate ()\n        this.io.i2cWrite(address, this.REGISTER.SR, 0x07);\n\n        // Active Mode\n        this.io.i2cWrite(address, this.REGISTER.MODE, 0x01);\n\n        this.io.i2cRead(address, this.REGISTER.XOUT, READLENGTH, function(data) {\n          dataHandler({\n            // Page. 13\n            // D7 D6      D5      D4      D3      D2      D1      D0\n            // -- -A XOUT[5] XOUT[4] XOUT[3] XOUT[2] XOUT[1] XOUT[0]\n            x: data[0] & 0b00111111,\n            y: data[1] & 0b00111111,\n            z: data[2] & 0b00111111,\n          });\n        });\n      },\n    },\n    toGravity: {\n      value: function(raw) {\n        var state = priv.get(this);\n        // Page 28\n        return toFixed(raw / state.sensitivity, 3);\n      }\n    }\n  },\n\n  ESPLORA: {\n    DEFAULTS: {\n      value: {\n        zeroV: [320, 330, 310],\n        sensitivity: 170\n      }\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        this.pins = [5, 11, 6];\n        analogInitialize.call(this, opts, dataHandler);\n      }\n    },\n    toGravity: {\n      value: function(value, axis) {\n        var read = analogToGravity.call(this, value, axis);\n        return toFixed(read, 2);\n      }\n    }\n  },\n\n  LIS3DH: {\n    ADDRESSES: {\n      value: [0x18]\n    },\n    REGISTER: {\n      value: {\n        OUT_X_L: 0x28,\n        CTRL_REG1: 0x20,\n        CTRL_REG2: 0x21,\n        CTRL_REG3: 0x22,\n        CTRL_REG4: 0x23,\n        CTRL_REG5: 0x24,\n\n        TEMP_CFG_REG: 0x1F,\n\n        CLICK_CFG: 0x38,\n        CLICK_SRC: 0x39,\n        CLICK_THS: 0x3A,\n        TIME_LIMIT: 0x3B,\n        TIME_LATENCY: 0x3C,\n        TIME_WINDOW: 0x3D,\n      }\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n        var address = opts.address || 0x18;\n\n        // 2G  = 0b00\n        // 4G  = 0b01\n        // 8G  = 0b10\n        // 16G = 0b11\n        var range = ({\n          2: 0,\n          4: 1,\n          8: 2,\n          16: 3\n        })[opts.range || 4];\n\n        /* istanbul ignore if */\n        if (range === undefined) {\n          range = 1;\n        }\n\n        var divider = [\n          16380,\n          8190,\n          4096,\n          1365,\n        ][range];\n\n        /* istanbul ignore if */\n        if (divider === undefined) {\n          divider = 1;\n        }\n\n        var threshold = [\n          80,\n          40,\n          20,\n          10,\n        ][range];\n\n        /* istanbul ignore if */\n        if (threshold === undefined) {\n          threshold = 10;\n        }\n\n\n        state.divider = divider;\n        state.expander = Expander.get({\n          address: address,\n          controller: this.controller,\n          bus: this.bus,\n        });\n\n        // TODO: this should come from the expander\n        var ctrl4 = 0x88 | (range << 4);\n\n        state.expander.i2cWrite(address, this.REGISTER.CTRL_REG4, ctrl4);\n\n        // Acceleration\n        state.expander.i2cReadOnce(address, this.REGISTER.CTRL_REG1, 1, function(data) {\n          var ctrl1 = data[0];\n\n          // Set to 200Hz\n          ctrl1 &= ~0xF0;\n          ctrl1 |= 6 << 4;\n\n          state.expander.i2cWrite(address, this.REGISTER.CTRL_REG1, ctrl1);\n\n          // Page 21\n          // 6.1.1 I2C operation\n          // Autoincrement bit set on register (0x80)\n          state.expander.i2cRead(address, this.REGISTER.OUT_X_L | 0x80, 6, function(data) {\n            dataHandler({\n              x: Fn.int16(data[1], data[0]),\n              y: Fn.int16(data[3], data[2]),\n              z: Fn.int16(data[5], data[4]),\n            });\n          });\n\n\n          // Tap\n          // TODO: make this optional (use \"newListener\"?)\n          //\n          // See MMA8452 driver for strategy\n          //\n          // state.expander.i2cReadOnce(address, this.REGISTER.CTRL_REG3, 1, function(data) {\n          //   var ctrl3 = data[0];\n\n          //   // Shut off Int 1 Click\n          //   ctrl3 &= ~0x80;\n          //   ctrl3 |= 6 << 4;\n\n          //   state.expander.i2cWrite(address, this.REGISTER.CTRL_REG1, ctrl3);\n\n          //   // Page 21\n          //   // 6.1.1 I2C operation\n          //   // Autoincrement bit set on register (0x80)\n          //   state.expander.i2cRead(address, this.REGISTER.OUT_X_L | 0x80, 6, function(data) {\n          //     dataHandler({\n          //       x: Fn.int16(data[1], data[0]),\n          //       y: Fn.int16(data[3], data[2]),\n          //       z: Fn.int16(data[5], data[4]),\n          //     });\n          //   });\n          // }.bind(this));\n\n\n\n          // Page 35\n          // 8.3.7 CTRL_REG3 [Interrupt CTRL register] (22h)\n          state.expander.i2cWrite(address, this.REGISTER.CTRL_REG3, 0x80);\n\n          // Page 40\n          // 9.2.1 Control register 5 (0x24)\n          state.expander.i2cWrite(address, this.REGISTER.CTRL_REG5, 0x08);\n\n          // Page 32\n          // 8.3.1 TAP_CFG\n          //\n          // This register is called both CLICK_CFG and TAP_CFG\n          //\n          // 0b00101010  = 0x2A = 42\n          state.expander.i2cWrite(address, this.REGISTER.CLICK_CFG, 0x2A);\n\n          // Page 36\n          // 8.4.1 Playing with TAP_TimeLimit\n          //\n          // ...Offers some guidance. Ultimately I opted to take inspiration\n          // from Adafruit's driver and example:\n          var timelimit = 10;\n          var timelatency = 20;\n          var timewindow = 255;\n\n          state.expander.i2cWrite(address, this.REGISTER.CLICK_THS, threshold);\n          state.expander.i2cWrite(address, this.REGISTER.TIME_LIMIT, timelimit);\n          state.expander.i2cWrite(address, this.REGISTER.TIME_LATENCY, timelatency);\n          state.expander.i2cWrite(address, this.REGISTER.TIME_WINDOW, timewindow);\n\n          // Page 33\n          // 8.3.2 TAP_SRC (39h)\n          var lastEmitTime = null;\n\n          state.expander.i2cRead(address, this.REGISTER.CLICK_SRC, 1, function(data) {\n            var status = data[0];\n            var thisEmitTime = Date.now();\n            // var tap = status & 0x7F;\n\n            if (lastEmitTime === null) {\n              lastEmitTime = thisEmitTime - 101;\n            }\n\n            /* istanbul ignore if */\n            if (thisEmitTime < (lastEmitTime + 100)) {\n              return;\n            }\n\n            if (status === 0x00) {\n              return;\n            }\n\n            /* istanbul ignore if */\n            if (!(status & 0x30)) {\n              return;\n            }\n\n            lastEmitTime = thisEmitTime;\n\n            this.emit(\"tap\");\n\n            if (status & 0x10) {\n              this.emit(\"tap:single\");\n            }\n\n            if (status & 0x20) {\n              // TODO: Figure out if we can determine a\n              // combined single + double tap\n              this.emit(\"tap:single\");\n              this.emit(\"tap:double\");\n            }\n          }.bind(this));\n        }.bind(this));\n      },\n    },\n    toGravity: {\n      value: function(raw) {\n        // Table 4, page 10\n        var state = priv.get(this);\n        return toFixed(raw / state.divider, 3);\n      },\n    },\n  },\n  LSM303C: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var IMU = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = IMU.Drivers.get(this.board, \"LSM303C\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.accelerometer);\n        });\n      }\n    },\n    toGravity: {\n      value: function(raw) {\n        return toFixed(raw, 2);\n      }\n    }\n  },\n};\n\n// Otherwise known as...\nControllers.TINKERKIT = Controllers.ANALOG;\nControllers.MMA8452Q = Controllers.MMA8452;\n\nfunction magnitude(x, y, z) {\n  var a;\n\n  a = x * x;\n  a = fma(y, y, a);\n  a = fma(z, z, a);\n\n  return Math.sqrt(a);\n}\n\n/**\n * Accelerometer\n * @constructor\n *\n * five.Accelerometer([ x, y[, z] ]);\n *\n * five.Accelerometer({\n *   pins: [ x, y[, z] ]\n *   zeroV: ...\n *   sensitivity: ...\n * });\n *\n *\n * @param {Object} opts [description]\n *\n */\n\nfunction Accelerometer(opts) {\n  if (!(this instanceof Accelerometer)) {\n    return new Accelerometer(opts);\n  }\n\n  var controller = null;\n\n  var state = {\n    enabled: true,\n    x: {\n      value: 0,\n      previous: 0,\n      stash: [],\n      orientation: null,\n      inclination: null,\n      acceleration: null,\n      calibration: []\n    },\n    y: {\n      value: 0,\n      previous: 0,\n      stash: [],\n      orientation: null,\n      inclination: null,\n      acceleration: null,\n      calibration: []\n    },\n    z: {\n      value: 0,\n      previous: 0,\n      stash: [],\n      orientation: null,\n      inclination: null,\n      acceleration: null,\n      calibration: []\n    }\n  };\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    controller = Controllers.ANALOG;\n  }\n\n  Board.Controller.call(this, controller, opts);\n\n  if (!this.toGravity) {\n    this.toGravity = opts.toGravity || function(raw) {\n      return raw;\n    };\n  }\n\n  if (!this.enabledChanged) {\n    this.enabledChanged = function() {};\n  }\n\n  priv.set(this, state);\n\n  /* istanbul ignore else */\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts, function(data) {\n      var isChange = false;\n\n      if (!state.enabled) {\n        return;\n      }\n\n      Object.keys(data).forEach(function(axis) {\n        var value = data[axis];\n        var sensor = state[axis];\n\n        if (opts.autoCalibrate && sensor.calibration.length < calibrationSize) {\n          var axisIndex = axes.indexOf(axis);\n          sensor.calibration.push(value);\n\n          if (!Array.isArray(state.zeroV)) {\n            state.zeroV = [];\n          }\n\n          state.zeroV[axisIndex] = sum(sensor.calibration) / sensor.calibration.length;\n          if (axis === aZ) {\n            state.zeroV[axisIndex] -= state.sensitivity;\n          }\n        }\n\n        // The first run needs to prime the \"stash\"\n        // of data values.\n        if (sensor.stash.length === 0) {\n          for (var i = 0; i < 5; i++) {\n            sensor.stash[i] = value;\n          }\n        }\n\n        sensor.previous = sensor.value;\n        sensor.stash.shift();\n        sensor.stash.push(value);\n\n        sensor.value = (sum(sensor.stash) / 5) | 0;\n\n        if (this.acceleration !== sensor.acceleration) {\n          sensor.acceleration = this.acceleration;\n          isChange = true;\n          this.emit(\"acceleration\", sensor.acceleration);\n        }\n\n        if (this.orientation !== sensor.orientation) {\n          sensor.orientation = this.orientation;\n          isChange = true;\n          this.emit(\"orientation\", sensor.orientation);\n        }\n\n        if (this.inclination !== sensor.inclination) {\n          sensor.inclination = this.inclination;\n          isChange = true;\n          this.emit(\"inclination\", sensor.inclination);\n        }\n      }, this);\n\n      this.emit(\"data\", {\n        x: state.x.value,\n        y: state.y.value,\n        z: state.z.value\n      });\n\n      if (isChange) {\n        this.emit(\"change\", {\n          x: this.x,\n          y: this.y,\n          z: this.z\n        });\n      }\n    }.bind(this));\n  }\n\n  Object.defineProperties(this, {\n    hasAxis: {\n      writable: true,\n      value: function(axis) {\n        /* istanbul ignore next */\n        return state[axis] ? state[axis].stash.length > 0 : false;\n      }\n    },\n    enable: {\n      value: function() {\n        state.enabled = true;\n        this.enabledChanged(true);\n        return this;\n      }\n    },\n    disable: {\n      value: function() {\n        state.enabled = false;\n        this.enabledChanged(false);\n        return this;\n      }\n    },\n    zeroV: {\n      get: function() {\n        return state.zeroV;\n      }\n    },\n    /**\n     * [read-only] Calculated pitch value\n     * @property pitch\n     * @type Number\n     */\n    pitch: {\n      get: function() {\n        var x = this.x;\n        var y = this.y;\n        var z = this.z;\n        var rads = this.hasAxis(aZ) ?\n          Math.atan2(x, Math.hypot(y, z)) :\n          Math.asin(constrain(x, -1, 1));\n\n        return toFixed(rads * Fn.RAD_TO_DEG, 2);\n      }\n    },\n    /**\n     * [read-only] Calculated roll value\n     * @property roll\n     * @type Number\n     */\n    roll: {\n      get: function() {\n        var x = this.x;\n        var y = this.y;\n        var z = this.z;\n        var rads = this.hasAxis(aZ) ?\n          Math.atan2(y, Math.hypot(x, z)) :\n          Math.asin(constrain(y, -1, 1));\n\n        return toFixed(rads * Fn.RAD_TO_DEG, 2);\n      }\n    },\n    x: {\n      get: function() {\n        return this.toGravity(state.x.value, aX);\n      }\n    },\n    y: {\n      get: function() {\n        return this.toGravity(state.y.value, aY);\n      }\n    },\n    z: {\n      get: function() {\n        return this.hasAxis(aZ) ?\n          this.toGravity(state.z.value, aZ) : 0;\n      }\n    },\n    acceleration: {\n      get: function() {\n        return magnitude(\n          this.x,\n          this.y,\n          this.z\n        );\n      }\n    },\n    inclination: {\n      get: function() {\n        return Math.atan2(this.y, this.x) * Fn.RAD_TO_DEG;\n      }\n    },\n    orientation: {\n      get: function() {\n        var abs = Math.abs;\n        var x = this.x;\n        var y = this.y;\n        var z = this.hasAxis(aZ) ? this.z : 1;\n        var absX = abs(x);\n        var absY = abs(y);\n        var absZ = abs(z);\n\n        if (absX < absY && absX < absZ) {\n          if (x > 0) {\n            return 1;\n          }\n          return -1;\n        }\n        if (absY < absX && absY < absZ) {\n          if (y > 0) {\n            return 2;\n          }\n          return -2;\n        }\n        if (absZ < absX && absZ < absY) {\n          // TODO: figure out how to test this\n          /* istanbul ignore else */\n          if (z > 0) {\n            return 3;\n          }\n          /* istanbul ignore next */\n          return -3;\n        }\n        return 0;\n      }\n    }\n  });\n}\n\nutil.inherits(Accelerometer, Emitter);\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Accelerometer.Controllers = Controllers;\n  Accelerometer.purge = function() {\n    priv.clear();\n  };\n}\n\n\nmodule.exports = Accelerometer;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/accelerometer.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/altimeter.js":
/*!***************************************************!*\
  !*** ./node_modules/johnny-five/lib/altimeter.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\");\nvar Fn = __webpack_require__(/*! ./fn */ \"./node_modules/johnny-five/lib/fn.js\");\nvar Emitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\n\nvar Controllers = {\n  MPL3115A2: {\n    requirements: {\n      value: {\n        options: {\n          elevation: {\n            throws: false,\n            message: \"Missing `elevation` option. Without a specified base `elevation`, the altitude measurement will be inaccurate. Use the meters value shown on whatismyelevation.com\",\n            typeof: \"number\",\n          }\n        }\n      }\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = Multi.Drivers.get(this.board, \"MPL3115A2\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.altitude);\n        });\n      }\n    },\n    toMeters: {\n      value: function(raw) {\n\n        // Table 2, Note 3\n        // \"Smallest bit change in register represents minimum value change in\n        // Pascals or meters. Typical resolution to signify change in altitudeis 0.3 m\"\n        return Fn.toFixed(raw, 1);\n      }\n    }\n  },\n  MS5611: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = Multi.Drivers.get(this.board, \"MS5611\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.altitude);\n        });\n      }\n    },\n    toMeters: {\n      value: function(raw) {\n        // Datasheet available at http://www.te.com/commerce/DocumentDelivery/DDEController?Action=srchrtrv&DocNm=MS5611-01BA03&DocType=Data+Sheet&DocLang=English\n        //\n        // From page 1\n        // \"This barometric pressure sensor is optimized for\n        // altimeters and variometers with an altitude resolution of 10 cm.\"\n        return Fn.toFixed(raw, 2);\n      }\n    }\n  },\n\n  BMP180: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = Multi.Drivers.get(this.board, \"BMP180\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.altitude);\n        });\n      }\n    },\n    toMeters: {\n      value: function(raw) {\n        // Page 6, Table 1\n        // Resolution of output data 0.01hPa\n        //\n        // From paragraph 3.6, page 16 1hPa=8.43m\n        // resolution ~= 0.08m\n        return Fn.toFixed(raw, 2);\n      }\n    }\n  },\n\n  BMP280: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = Multi.Drivers.get(this.board, \"BMP280\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.altitude);\n        });\n      }\n    },\n    toMeters: {\n      value: function(raw) {\n        // Page 8, Table 2\n        // Resolution of output data in ultra high resolution mode 0.0016hPa\n        // 1hPa=8.43m\n        // resolution ~= 0.013m\n        return Fn.toFixed(raw, 3);\n      }\n    }\n  },\n  BME280: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = Multi.Drivers.get(this.board, \"BME280\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.altitude);\n        });\n      }\n    },\n    toMeters: {\n      value: function(raw) {\n        // Page 10, Table 3\n        // Resolution of pressure output data 0.18Pa\n        // 1hPa=8.43m\n        // 100Pa=8.43m\n        // resolution ~= 0.015m\n        return Fn.toFixed(raw, 3);\n      }\n    }\n  },\n\n};\n\nControllers[\"BMP085\"] = Controllers[\"BMP-085\"] = Controllers.BMP180;\n\nvar priv = new Map();\n\nfunction Altimeter(opts) {\n  if (!(this instanceof Altimeter)) {\n    return new Altimeter(opts);\n  }\n\n  var controller = null;\n  var freq;\n  var last = null;\n  var raw = null;\n  var state = {};\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  freq = opts.freq || 25;\n\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    throw new Error(\"Altimeter expects a valid controller\");\n  }\n\n  priv.set(this, state);\n\n  Board.Controller.call(this, controller, opts);\n\n  if (!this.toMeters) {\n    this.toMeters = opts.toMeters || function(x) {\n      return x;\n    };\n  }\n\n  var descriptors = {\n    meters: {\n      get: function() {\n        return this.toMeters(raw);\n      }\n    },\n    feet: {\n      get: function() {\n        return Fn.toFixed(this.meters * 3.28084, 2);\n      }\n    }\n  };\n  // Convenience aliases\n  descriptors.m = descriptors.meters;\n  descriptors.ft = descriptors.feet;\n\n  Object.defineProperties(this, descriptors);\n\n\n  /* istanbul ignore else */\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts, function(data) {\n      raw = data;\n    });\n  }\n\n  setInterval(function() {\n    if (raw == null) {\n      return;\n    }\n\n    var data = {};\n    data.m = data.meters = this.meters;\n    data.ft = data.feet = this.feet;\n\n    this.emit(\"data\", data);\n\n    /* istanbul ignore else */\n    if (this.meters !== last) {\n      last = this.meters;\n      this.emit(\"change\", data);\n    }\n  }.bind(this), freq);\n}\n\nutil.inherits(Altimeter, Emitter);\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Altimeter.Controllers = Controllers;\n  Altimeter.purge = function() {\n    priv.clear();\n  };\n}\n\n\nmodule.exports = Altimeter;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/altimeter.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/animation.js":
/*!***************************************************!*\
  !*** ./node_modules/johnny-five/lib/animation.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {// TODO list\n// Use functions as keyFrames\n// Test metronomic on real animation\n\n// Create jquery FX like queue\n\nvar Emitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\nvar ease = __webpack_require__(/*! ease-component */ \"./node_modules/ease-component/index.js\");\nvar Fn = __webpack_require__(/*! ./fn */ \"./node_modules/johnny-five/lib/fn.js\");\nvar temporal;\n\n\n/**\n * The max time we want to allow a temporal animation segment to run.\n * When running, temporal can push CPU utilization to 100%. When this\n * time (in ms) is reached we will fall back to setInterval which is less\n * accurate (by nanoseconds) but perfectly serviceable.\n **/\nvar temporalTTL = 5000;\n\n/**\n * Placeholders for Symbol\n */\nAnimation.keys = \"@@keys\";\nAnimation.normalize = \"@@normalize\";\nAnimation.render = \"@@render\";\n\n/**\n * Temporal will run up the CPU. temporalFallback is used\n * for long running animations.\n */\nAnimation.TemporalFallback = function(animation) {\n  this.interval = setInterval(function() {\n    animation.loopFunction({\n      calledAt: Date.now()\n    });\n  }, animation.rate);\n};\n\nAnimation.TemporalFallback.prototype.stop = function() {\n  if (this.interval) {\n    clearInterval(this.interval);\n  }\n};\n\n/**\n * Animation\n * @constructor\n *\n * @param {target} A Servo or Servo.Collection to be animated\n *\n * Animating a single servo\n *\n *   var servo = new five.Servo(10);\n *   var animation = new five.Animation(servo);\n *   animation.enqueue({\n *     cuePoints: [0, 0.25, 0.75, 1],\n *     keyFrames: [{degrees: 90}, 60, -120, {degrees: 90}],\n *     duration: 2000\n *   });\n *\n *\n * Animating a servo array\n *\n *   var a = new five.Servo(9),\n *     b = new five.Servo(10);\n *   var servos = new five.Servo.Collection([a, b]);\n *   var animation = new five.Animation(servos);\n *   animation.enqueue({\n *     cuePoints: [0, 0.25, 0.75, 1],\n *     keyFrames: [\n *       [{degrees: 90}, 60, -120, {degrees: 90}],\n *       [{degrees: 180}, -120, 90, {degrees: 180}],\n *     ],\n *     duration: 2000\n *   });\n *\n */\n\nfunction Animation(target) {\n\n  // Necessary to avoid loading temporal unless necessary\n  if (!temporal) {\n    temporal = __webpack_require__(/*! temporal */ \"./node_modules/temporal/lib/temporal.js\");\n  }\n\n  if (!(this instanceof Animation)) {\n    return new Animation(target);\n  }\n\n  Animation.Segment.call(this);\n\n  this.defaultTarget = target || {};\n}\n\nutil.inherits(Animation, Emitter);\n\n/**\n * Animation.Segment()\n *\n * Create a defaulted segment.\n *\n * Every property ever used on an animation segment\n * MUST be listed here, otherwise properties will\n * persist across segments. This default object is\n * primarily for resetting state.\n *\n */\nAnimation.Segment = function(options) {\n  this.cuePoints = [0, 1];\n  this.duration = 1000;\n  this.easing = \"linear\";\n  this.loop = false;\n  this.loopback = 0;\n  this.metronomic = false;\n  this.currentSpeed = 1;\n  this.progress = 0;\n  this.fps = 60;\n  this.rate = 1000 / 60;\n  this.paused = false;\n  this.isRunning = false;\n  this.segments = [];\n  this.onstart = null;\n  this.onpause = null;\n  this.onstop = null;\n  this.oncomplete = null;\n  this.onloop = null;\n\n  if (options) {\n    Object.assign(this, options);\n\n    if (options.segments) {\n      this.segments = options.segments.slice();\n    }\n  }\n};\n\n\n/**\n * Add an animation segment to the animation queue\n * @param {Object} opts Options: cuePoints, keyFrames, duration,\n *   easing, loop, metronomic, progress, fps, onstart, onpause,\n *   onstop, oncomplete, onloop\n */\nAnimation.prototype.enqueue = function(opts) {\n\n  opts = opts || {};\n\n  /* istanbul ignore else */\n  if (typeof opts.target === \"undefined\") {\n    opts.target = this.defaultTarget;\n  }\n\n  this.segments.push(opts);\n\n  /* istanbul ignore if */\n  if (!this.paused && !this.isRunning) {\n    this.next();\n  }\n\n  return this;\n\n};\n\n/**\n * Plays next segment in queue\n * Users need not call this. It's automatic\n */\nAnimation.prototype.next = function() {\n\n  if (this.isRunning) {\n    return this;\n  } else {\n    this.isRunning = true;\n  }\n\n  if (this.segments.length > 0) {\n    var segment = new Animation.Segment(this.segments.shift());\n    \n    Object.assign(this, segment);\n    this.paused = this.currentSpeed === 0 ? true : false;\n\n    if (this.onstart) {\n      this.onstart();\n    }\n\n    this.normalizeKeyframes();\n\n    if (this.reverse) {\n      this.currentSpeed *= -1;\n    }\n\n    if (this.currentSpeed !== 0) {\n      this.play();\n    } else {\n      this.paused = true;\n    }\n  } else {\n    this.playLoop.stop();\n  }\n\n  return this;\n};\n\n/**\n * pause\n *\n * Pause animation while maintaining progress, speed and segment queue\n *\n */\n\nAnimation.prototype.pause = function() {\n\n  this.emit(\"animation:pause\");\n\n  if (this.playLoop) {\n    this.playLoop.stop();\n  }\n  this.paused = true;\n\n  if (this.onpause) {\n    this.onpause();\n  }\n\n};\n\n/**\n * stop\n *\n * Stop all animations\n *\n */\n\nAnimation.prototype.stop = function() {\n\n  this.emit(\"animation:stop\");\n\n  this.segments = [];\n  this.isRunning = false;\n  if (this.playLoop) {\n    this.playLoop.stop();\n  }\n\n  if (this.onstop) {\n    this.onstop();\n  }\n\n};\n\n/**\n * speed\n *\n * Get or set the current playback speed\n *\n * @param {Number} speed\n *\n */\n\nAnimation.prototype.speed = function(speed) {\n\n  if (typeof speed === \"undefined\") {\n    return this.currentSpeed;\n  } else {\n    this.currentSpeed = speed;\n\n    // Find our timeline endpoints and refresh rate\n    this.scaledDuration = this.duration / Math.abs(this.currentSpeed);\n    this.startTime = Date.now() - this.scaledDuration * this.progress;\n    this.endTime = this.startTime + this.scaledDuration;\n\n    if (!this.paused) {\n      this.play();\n    }\n    return this;\n  }\n};\n\n/**\n * This function is called in each frame of our animation\n * Users need not call this. It's automatic\n */\n\nAnimation.prototype.loopFunction = function(loop) {\n\n  // Find the current timeline progress\n  var progress = this.calculateProgress(loop.calledAt);\n\n  // Find the left and right cuePoints/keyFrames;\n  var indices = this.findIndices(progress);\n\n  // call render function with tweened value\n  this.target[Animation.render](this.tweenedValue(indices, progress));\n\n  /**\n   * If this animation has been running in temporal for too long\n   * fall back to using setInterval so we don't melt the user's CPU\n   **/\n  if (loop.calledAt > this.fallBackTime) {\n    this.fallBackTime = Infinity;\n    if (this.playLoop) {\n      this.playLoop.stop();\n    }\n    this.playLoop = new Animation.TemporalFallback(this);\n  }\n\n  // See if we have reached the end of the animation\n  /* istanbul ignore else */\n  if ((this.progress === 1 && !this.reverse) || (progress === this.loopback && this.reverse)) {\n\n    if (this.loop || (this.metronomic && !this.reverse)) {\n\n      if (this.onloop) {\n        this.onloop();\n      }\n\n      if (this.metronomic) {\n        this.reverse = this.reverse ? false : true;\n      }\n\n      this.normalizeKeyframes();\n      this.progress = this.loopback;\n      this.startTime = Date.now() - this.scaledDuration * this.progress;\n      this.endTime = this.startTime + this.scaledDuration;\n    } else {\n\n      this.isRunning = false;\n\n      if (this.oncomplete) {\n        process.nextTick(this.oncomplete.bind(this));\n      }\n\n      if (this.segments.length > 0) {\n        process.nextTick(() => { this.next(); });\n      } else {\n        this.stop();\n      }\n    }\n  }\n};\n\n/**\n * play\n *\n * Start a segment\n */\n\nAnimation.prototype.play = function() {\n  var now = Date.now();\n\n  if (this.playLoop) {\n    this.playLoop.stop();\n  }\n\n  this.paused = false;\n  this.isRunning = true;\n\n  // Find our timeline endpoints and refresh rate\n  this.scaledDuration = this.duration / Math.abs(this.currentSpeed);\n  this.startTime = now - this.scaledDuration * this.progress;\n  this.endTime = this.startTime + this.scaledDuration;\n\n  // If our animation runs for more than 5 seconds switch to setTimeout\n  this.fallBackTime = now + temporalTTL;\n  this.frameCount = 0;\n\n  /* istanbul ignore else */\n  if (this.fps) {\n    this.rate = 1000 / this.fps;\n  }\n\n  this.rate = this.rate | 0;\n\n  this.playLoop = temporal.loop(this.rate, this.loopFunction.bind(this));\n};\n\nAnimation.prototype.findIndices = function(progress) {\n  var indices = {\n    left: null,\n    right: null\n  };\n\n  // Find our current before and after cuePoints\n  indices.right = this.cuePoints.findIndex(function(point) {\n    return point >= progress;\n  });\n\n  indices.left = indices.right === 0 ? /* istanbul ignore next */ 0 : indices.right - 1;\n\n  return indices;\n};\n\nAnimation.prototype.calculateProgress = function(calledAt) {\n\n  var progress = (calledAt - this.startTime) / this.scaledDuration;\n\n  if (progress > 1) {\n    progress = 1;\n  }\n\n  this.progress = progress;\n\n  if (this.reverse) {\n    progress = 1 - progress;\n  }\n\n  // Ease the timeline\n  // to do: When reverse replace inFoo with outFoo and vice versa. skip inOutFoo\n  progress = ease[this.easing](progress);\n  progress = Fn.constrain(progress, 0, 1);\n\n  return progress;\n};\n\nAnimation.prototype.tweenedValue = function(indices, progress) {\n\n  var tween = {\n    duration: null,\n    progress: null\n  };\n\n  var result = this.normalizedKeyFrames.map(function(keyFrame) {\n    // Note: \"this\" is bound to the animation object\n\n    var memberIndices = {\n      left: null,\n      right: null\n    };\n\n    // If the keyframe at indices.left is null, move left\n    for (memberIndices.left = indices.left; memberIndices.left > -1; memberIndices.left--) {\n      /* istanbul ignore else */\n      if (keyFrame[memberIndices.left] !== null) {\n        break;\n      }\n    }\n\n    // If the keyframe at indices.right is null, move right\n    memberIndices.right = keyFrame.findIndex(function(frame, index) {\n      return index >= indices.right && frame !== null;\n    });\n\n    // Find our progress for the current tween\n    tween.duration = this.cuePoints[memberIndices.right] - this.cuePoints[memberIndices.left];\n    tween.progress = (progress - this.cuePoints[memberIndices.left]) / tween.duration;\n\n    // Catch divide by zero\n    if (!Number.isFinite(tween.progress)) {\n      /* istanbul ignore next */\n      tween.progress = this.reverse ? 0 : 1;\n    }\n\n    var left = keyFrame[memberIndices.left],\n      right = keyFrame[memberIndices.right];\n\n    // Apply tween easing to tween.progress\n    // to do: When reverse replace inFoo with outFoo and vice versa. skip inOutFoo\n    tween.progress = ease[right.easing](tween.progress);\n\n    // Calculate this tween value\n    var calcValue;\n\n    if (right.position) {\n      // This is a tuple\n      calcValue = right.position.map(function(value, index) {\n        return (value - left.position[index]) *\n          tween.progress + left.position[index];\n      });\n    } else {\n      if (typeof right.value === \"number\" && typeof left.value === \"number\") {\n        calcValue = (right.value - left.value) * tween.progress + left.value;\n      } else {\n        calcValue = this.target[Animation.keys].reduce(function(accum, key) {\n          accum[key] = (right.value[key] - left.value[key]) * tween.progress + left.value[key];\n          return accum;\n        }, {});\n      }\n    }\n\n    return calcValue;\n  }, this);\n\n  return result;\n};\n\n// Make sure our keyframes conform to a standard\nAnimation.prototype.normalizeKeyframes = function() {\n\n  var previousVal,\n    keyFrameSet = Fn.cloneDeep(this.keyFrames),\n    cuePoints = this.cuePoints;\n\n  // Run through the target's normalization\n  keyFrameSet = this.target[Animation.normalize](keyFrameSet);\n\n  // keyFrames can be passed as a single dimensional array if\n  // there is just one servo/device. If the first element is not an\n  // array, nest keyFrameSet so we only have to deal with one format\n  if (!Array.isArray(keyFrameSet[0])) {\n    keyFrameSet = [keyFrameSet];\n  }\n\n  keyFrameSet.forEach(function(keyFrames) {\n\n    // Pad the right side of keyFrames arrays with null\n    for (var i = keyFrames.length; i < cuePoints.length; i++) {\n      keyFrames.push(null);\n    }\n\n    keyFrames.forEach(function(keyFrame, i, source) {\n\n      if (keyFrame !== null) {\n\n        // keyFrames need to be converted to objects\n        if (typeof keyFrame !== \"object\") {\n          keyFrame = {\n            step: keyFrame,\n            easing: \"linear\"\n          };\n        }\n\n        // Replace step values\n        if (typeof keyFrame.step !== \"undefined\") {\n          keyFrame.value = keyFrame.step === false ?\n            previousVal : previousVal + keyFrame.step;\n        }\n\n        // Set a default easing function\n        if (!keyFrame.easing) {\n          keyFrame.easing = \"linear\";\n        }\n\n        // Copy value from another frame\n        /* istanbul ignore if */\n        if (typeof keyFrame.copyValue !== \"undefined\") {\n          keyFrame.value = source[keyFrame.copyValue].value;\n        }\n\n        // Copy everything from another keyframe in this array\n        /* istanbul ignore if */\n        if (keyFrame.copyFrame) {\n          keyFrame = source[keyFrame.copyFrame];\n        }\n\n        previousVal = keyFrame.value;\n\n      } else {\n\n        if (i === source.length - 1) {\n          keyFrame = {\n            value: previousVal,\n            easing: \"linear\"\n          };\n        } else {\n          keyFrame = null;\n        }\n\n      }\n      source[i] = keyFrame;\n\n    }, this);\n  });\n\n  this.normalizedKeyFrames = keyFrameSet;\n\n  return this;\n};\n\nmodule.exports = Animation;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/animation.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/array-includes-shim.js":
/*!*************************************************************!*\
  !*** ./node_modules/johnny-five/lib/array-includes-shim.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("Object.defineProperty(Array.prototype, \"includes\", {\n  value: function(entry) {\n    return this.indexOf(entry) !== -1;\n  },\n  enumerable: false,\n  configurable: false,\n  writable: false\n});\n\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/array-includes-shim.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/barometer.js":
/*!***************************************************!*\
  !*** ./node_modules/johnny-five/lib/barometer.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var Emitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\n\nvar Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\");\nvar Fn = __webpack_require__(/*! ./fn */ \"./node_modules/johnny-five/lib/fn.js\");\n\nvar toFixed = Fn.toFixed;\n\n\nvar Controllers = {\n  MPL115A2: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = Multi.Drivers.get(this.board, \"MPL115A2\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler.call(this, data.pressure);\n        }.bind(this));\n      }\n    },\n    // kPa (Kilopascals)\n    toPressure: {\n      value: function(raw) {\n        // Pressure output in kPa explained at P. 6, Eqn. 2\n        var output = ((65 / 1023) * raw) + 50;\n        // Typical resolution 0.15kPa from paragraph 2.2 page 3\n        return toFixed(output, 2);\n      }\n    }\n  },\n  MPL3115A2: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = Multi.Drivers.get(this.board, \"MPL3115A2\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler.call(this, data.pressure);\n        }.bind(this));\n      }\n    },\n    // kPa (Kilopascals)\n    toPressure: {\n      value: function(raw) {\n        // formulas extracted from code example:\n        // https://github.com/adafruit/Adafruit_MPL3115A2_Library\n        var inches = (raw / 4) / 3377;\n        var output = inches * 3.39;\n\n        // Page 8, Table 5\n        // Typical resolution 1.5Pa = 0.0015kPa\n        return toFixed(output, 4);\n      }\n    }\n  },\n  BMP180: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = Multi.Drivers.get(this.board, \"BMP180\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler.call(this, data.pressure);\n        }.bind(this));\n      }\n    },\n    // kPa (Kilopascals)\n    toPressure: {\n      value: function(raw) {\n        // Page 6, Table 1\n        // Typical resolution 0.01hPa = 0.001kPa\n        return toFixed(raw / 1000, 3);\n      }\n    }\n  },\n  BMP280: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = Multi.Drivers.get(this.board, \"BMP280\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler.call(this, data.pressure);\n        }.bind(this));\n      }\n    },\n    // kPa (Kilopascals)\n    toPressure: {\n      value: function(raw) {\n        // Page 8, Table 2\n        // Resolution in ultra high resolution mode 0.0016hPa = 0.00016kPa\n        return toFixed(raw / 1000, 5);\n      }\n    }\n  },\n  BME280: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = Multi.Drivers.get(this.board, \"BME280\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler.call(this, data.pressure);\n        }.bind(this));\n      }\n    },\n    // kPa (Kilopascals)\n    toPressure: {\n      value: function(raw) {\n        // Page 10, Table 3\n        // Typical resolution 0.18Pa = 0.00018kPa\n        return toFixed(raw / 1000, 5);\n      }\n    }\n  },\n  MS5611: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = Multi.Drivers.get(this.board, \"MS5611\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler.call(this, data.pressure);\n        }.bind(this));\n      }\n    },\n    toPressure: {\n      value: function(raw) {\n        // Page 2, Table ?\n        // Resolution      Over sampling ratio\n        // 0.065mbar       256\n        // 0.042mbar       512\n        // 0.027mbar       1024\n        // 0.018mbar       2048\n        // 0.012mbar       4096\n        //\n        // 0.012mbar = 1,2Pa = 0.0012kPa\n        return toFixed(raw / 1000, 4);\n      }\n    }\n  },\n};\n\nControllers.BMP085 = Controllers.BMP180;\n\n/**\n * Barometer\n * @constructor\n *\n * five.Barometer(opts);\n *\n * five.Barometer({\n *   controller: \"CONTROLLER\"\n *   address: 0x00\n * });\n *\n *\n * @param {Object} opts [description]\n *\n */\n\nfunction Barometer(opts) {\n  /* istanbul ignore if */\n  if (!(this instanceof Barometer)) {\n    return new Barometer(opts);\n  }\n\n  var controller = null;\n  var last = null;\n  var raw = null;\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  var freq = opts.freq || 25;\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    // controller = Controllers[\"ANALOG\"];\n    throw new Error(\"Missing Barometer controller\");\n  }\n\n  Board.Controller.call(this, controller, opts);\n\n  if (!this.toPressure) {\n    this.toPressure = opts.toPressure || function(raw) {\n      return raw;\n    };\n  }\n\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts, function(data) {\n      raw = data;\n    });\n  }\n\n  Object.defineProperties(this, {\n    pressure: {\n      get: function() {\n        return this.toPressure(raw);\n      }\n    }\n  });\n\n  setInterval(function() {\n    if (raw === null) {\n      return;\n    }\n\n    var data = {\n      pressure: this.pressure\n    };\n\n    this.emit(\"data\", data);\n\n    if (this.pressure !== last) {\n      last = this.pressure;\n      this.emit(\"change\", data);\n    }\n  }.bind(this), freq);\n}\n\nutil.inherits(Barometer, Emitter);\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Barometer.Controllers = Controllers;\n  Barometer.purge = function() {};\n}\n\nmodule.exports = Barometer;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/barometer.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/board.js":
/*!***********************************************!*\
  !*** ./node_modules/johnny-five/lib/board.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {/* istanbul ignore if */\nif (!Array.prototype.includes) {\n  /* istanbul ignore next */\n  __webpack_require__(/*! ./array-includes-shim */ \"./node_modules/johnny-five/lib/array-includes-shim.js\");\n}\n\n\nvar IS_TEST_MODE = !!process.env.IS_TEST_MODE;\nvar Emitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\nvar chalk = __webpack_require__(/*! chalk */ \"./node_modules/chalk/index.js\");\nvar Collection = __webpack_require__(/*! ./mixins/collection */ \"./node_modules/johnny-five/lib/mixins/collection.js\");\nvar Fn = __webpack_require__(/*! ./fn */ \"./node_modules/johnny-five/lib/fn.js\");\nvar Repl = __webpack_require__(/*! ./repl */ \"./node_modules/johnny-five/lib/repl.js\");\nvar Options = __webpack_require__(/*! ./board.options */ \"./node_modules/johnny-five/lib/board.options.js\");\nvar Pins = __webpack_require__(/*! ./board.pins */ \"./node_modules/johnny-five/lib/board.pins.js\");\nvar Expander;\n//var temporal = require(\"temporal\");\n\n// Environment Setup\nvar boards = [];\nvar rport = /usb|acm|^com/i;\n\n// const things to const when 0.10.x is dropped\n// This string appears over 20 times in this file.\nvar UNDEFINED = \"undefined\";\n\nvar Serial = {\n  used: [],\n  attempts: [],\n  detect: function(callback) {\n    // Max number of times listing serial conntections can fail\n    var maxAttempts = 10;\n    // Delay (ms) before trying again to list serial connections\n    var retryDelay = 400;\n    var serialport;\n\n    /* istanbul ignore next */\n    if (parseFloat(process.versions.nw) >= 0.13) {\n      serialport = __webpack_require__(/*! browser-serialport */ \"./node_modules/browser-serialport/index.js\");\n    } else {\n      serialport = __webpack_require__(/*! serialport */ \"./src/noop.js\");\n    }\n\n    // console.log(require);\n    // Request a list of available ports, from\n    // the result set, filter for valid paths\n    // via known path pattern match.\n    serialport.list(function(err, result) {\n\n      // serialport.list() will never result in an error.\n      // On failure, an empty array is returned. (#768)\n      var ports = result.filter(function(val) {\n        var available = true;\n\n        // Match only ports that Arduino cares about\n        // ttyUSB#, cu.usbmodem#, COM#\n        if (!rport.test(val.comName)) {\n          available = false;\n        }\n\n        // Don't allow already used/encountered usb device paths\n        if (Serial.used.includes(val.comName)) {\n          available = false;\n        }\n\n        return available;\n      }).map(function(val) {\n        return val.comName;\n      });\n\n      // If no ports are detected...\n      if (!ports.length) {\n\n        /* istanbul ignore if */\n        if (IS_TEST_MODE && this.abort) {\n          /* istanbul ignore next */\n          return;\n        }\n\n        // Create an attempt counter\n        /* istanbul ignore else */\n        if (!Serial.attempts[Serial.used.length]) {\n          Serial.attempts[Serial.used.length] = 0;\n\n          // Log notification...\n          this.info(\"Board\", \"Looking for connected device\");\n        }\n\n        // Set the attempt number\n        Serial.attempts[Serial.used.length]++;\n\n        // Retry Serial connection\n        if (Serial.attempts[Serial.used.length] > maxAttempts) {\n          this.fail(\"Board\", \"No connected device found\");\n          return;\n        }\n        setTimeout(() => {\n          Serial.detect.call(this, callback);\n        }, retryDelay);\n\n        return;\n      }\n\n      this.info(\"Available\", chalk.grey(ports));\n\n      // Get the first available device path\n      // from the list of detected ports\n\n      callback.call(this, ports[0]);\n    }.bind(this));\n  },\n\n  connect: function(portOrPath, callback) {\n    var IO = __webpack_require__(/*! firmata */ \"./node_modules/johnny-five/node_modules/firmata/lib/firmata.js\").Board;\n\n    var caught = null;\n    var io, isConnected, path, type;\n\n    if (typeof portOrPath === \"object\" && portOrPath.path) {\n      //\n      // Board({ port: SerialPort Object })\n      //\n      path = portOrPath.path;\n\n      this.info(\n        (portOrPath.transport || \"SerialPort\"),\n        chalk.grey(path)\n      );\n    } else {\n      //\n      // Board({ port: path String })\n      //\n      // Board()\n      //    ie. auto-detected\n      //\n      path = portOrPath;\n    }\n\n    // Add the usb device path to the list of device paths that\n    // are currently in use - this is used by the filter function\n    // above to remove any device paths that we've already encountered\n    // or used to avoid blindly attempting to reconnect on them.\n    Serial.used.push(path);\n\n    try {\n      io = new IO(portOrPath, function(error) {\n        if (error) {\n          caught = error;\n        }\n\n        callback.call(this, caught, caught ? \"error\" : \"ready\", io);\n      }.bind(this));\n\n      // Extend io instance with special expandos used\n      // by Johny-Five for the IO Plugin system.\n      io.name = \"Firmata\";\n      io.defaultLed = 13;\n      io.port = path;\n\n      // Made this far, safely connected\n      isConnected = true;\n    } catch (error) {\n      caught = error;\n    }\n\n    if (caught) {\n      caught = caught.message || caught;\n    }\n\n    // Determine the type of event that will be passed on to\n    // the board emitter in the callback passed to Serial.detect(...)\n    type = isConnected ? \"connect\" : \"error\";\n\n    // Execute \"connect\" callback\n    callback.call(this, caught, type, io);\n  }\n};\n\n/**\n * Board\n * @constructor\n *\n * @param {Object} opts\n */\n\nfunction Board(opts) {\n\n  if (!(this instanceof Board)) {\n    return new Board(opts);\n  }\n\n  // Ensure opts is an object\n  opts = opts || {};\n\n  // Used to define the board instance's own\n  // properties in the REPL's scope.\n  var replContext = {};\n\n  // It's feasible that an IO-Plugin may emit\n  // \"connect\" and \"ready\" events out of order.\n  // This is used to enforce the order, by\n  // postponing the \"ready\" event if the IO-Plugin\n  // hasn't emitted a \"connect\" event. Once\n  // the \"connect\" event is emitted, the\n  // postponement is lifted and the board may\n  // proceed with emitting the events in the\n  // correct order.\n  var isPostponed = false;\n\n  // Initialize this Board instance with\n  // param specified properties.\n  Object.assign(this, opts);\n\n  this.timer = null;\n\n  this.isConnected = false;\n\n  // Easily track state of hardware\n  this.isReady = false;\n\n  // Initialize instance property to reference io board\n  this.io = this.io || null;\n\n  // Registry of components\n  this.register = [];\n\n  // Pins, Addr (alt Pin name), Addresses\n  this.occupied = [];\n\n  // Registry of drivers by address (i.e. I2C Controllers)\n  this.Drivers = {};\n\n  // Identify for connect hardware cache\n  if (!this.id) {\n    this.id = Fn.uid();\n  }\n\n  // If no debug flag, default to true\n  if (typeof this.debug === UNDEFINED) {\n    this.debug = true;\n  }\n\n  // If no repl flag, default to true\n  if (typeof this.repl === UNDEFINED) {\n    this.repl = true;\n  }\n\n  // If no sigint flag, default to true\n  if (typeof this.sigint === UNDEFINED) {\n    this.sigint = true;\n  }\n\n  // Specially processed pin capabilities object\n  // assigned when physical board has reported\n  // \"ready\" via Firmata or IO-Plugin.\n  this.pins = null;\n\n  // Create a Repl instance and store as\n  // instance property of this io/board.\n  // This will reduce the amount of boilerplate\n  // code required to _always_ have a Repl\n  // session available.\n  //\n  // If a sesssion exists, use it\n  // (instead of creating a new session)\n  //\n  /* istanbul ignore if */\n  if (this.repl) {\n    /* istanbul ignore if */\n    if (Repl.ref) {\n      /* istanbul ignore next */\n      replContext[this.id] = this;\n      /* istanbul ignore next */\n      Repl.ref.on(\"ready\", function() {\n        /* istanbul ignore next */\n        Repl.ref.inject(replContext);\n      });\n      /* istanbul ignore next */\n      this.repl = Repl.ref;\n    } else {\n      replContext[this.id] = replContext.board = this;\n      this.repl = new Repl(replContext);\n    }\n  }\n\n  if (opts.io) {\n    // If you already have a connected io instance\n    this.io = opts.io;\n    this.isReady = opts.io.isReady;\n    this.transport = this.io.transport || null;\n    this.port = this.io.name;\n    this.pins = Board.Pins(this);\n  } else {\n\n    if (this.port && opts.port) {\n      Serial.connect.call(this, this.port, finalizeAndBroadcast);\n    } else {\n      Serial.detect.call(this, function(path) {\n        Serial.connect.call(this, path, finalizeAndBroadcast);\n      });\n    }\n  }\n\n  // Either an IO instance was provided or isOnBoard is true\n  if (!opts.port && this.io !== null) {\n    /* istanbul ignore next */\n    this.info(\"Available\", chalk.grey(this.io.name || \"unknown\"));\n\n    [\"connect\", \"ready\"].forEach(function(type) {\n      this.io.once(type, function() {\n        // Since connection and readiness happen asynchronously,\n        // it's actually possible for Johnny-Five to receive the\n        // events out of order and that should be ok.\n        if (type === \"ready\" && !this.isConnected) {\n          isPostponed = true;\n        } else {\n          // Will emit the \"connect\" and \"ready\" events\n          // if received in order. If out of order, this\n          // will only emit the \"connect\" event. The\n          // \"ready\" event will be handled in the next\n          // condition's consequent.\n          finalizeAndBroadcast.call(this, null, type, this.io);\n        }\n\n        if (type === \"connect\" && isPostponed) {\n          finalizeAndBroadcast.call(this, null, \"ready\", this.io);\n        }\n      }.bind(this));\n\n      if (this.io.isReady) {\n        // If the IO instance is reached \"ready\"\n        // state, queue tick tasks to emit the\n        // \"connect\" and \"ready\" events\n        process.nextTick(function() {\n          this.io.emit(type);\n        }.bind(this));\n      }\n    }, this);\n  }\n\n  this.once(\"ready\", function() {\n    var hrstart = process.hrtime();\n\n    this.millis = function() {\n      var now = process.hrtime(hrstart);\n      return (now[1] / 1000000);\n    };\n\n    [\"close\", \"disconnect\", \"error\", \"string\"].forEach(function(type) {\n      this.io.on(type, function(data) {\n        this.emit(type, data);\n      }.bind(this));\n    }, this);\n  }.bind(this));\n\n  // Cache instance to allow access from module constructors\n  boards.push(this);\n}\n\nfunction finalizeAndBroadcast(data, type, io) {\n  var emitted = false;\n\n  // Assign found io to instance\n  if (!this.io) {\n    this.io = io;\n  }\n\n  // Always Surface errors\n  if (type === \"error\") {\n    /* istanbul ignore else */\n    if (data && data.message) {\n      emitted = true;\n      this.error(\"Error\", data.message);\n    }\n  }\n\n  if (type === \"connect\") {\n    this.isConnected = true;\n    this.port = io.port || io.name;\n\n    this.info(\n      \"Connected\",\n      chalk.grey(this.port)\n    );\n\n    // Unless a \"timeout\" value has been provided apply 10 Second timeout...\n    //\n    // If \"ready\" hasn't fired and cleared the timer within\n    // 10 seconds of the connect event, then it's likely\n    // there is an issue with the device or firmware.\n    if (!IS_TEST_MODE) {\n      /* istanbul ignore next */\n      this.timer = setTimeout(function() {\n        this.error(\n          \"Device or Firmware Error\",\n\n          \"A timeout occurred while connecting to the Board. \\n\\n\" +\n          \"Please check that you've properly flashed the board with the correct firmware.\\n\" +\n          \"See: https://github.com/rwaldron/johnny-five/wiki/Getting-Started#trouble-shooting\\n\\n\" +\n          \"If connecting to a Leonardo or Leonardo clone, press the 'Reset' button on the \" +\n          \"board, wait approximately 11 seconds for complete reset, then run your program again.\"\n        );\n\n        this.emit(\"error\", new Error(\"A timeout occurred while connecting to the Board.\"));\n      }.bind(this), this.timeout || 1e4);\n    }\n  }\n\n  if (type === \"ready\") {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n\n    // Update instance `ready` flag\n    this.isReady = true;\n    this.pins = Board.Pins(this);\n    this.MODES = this.io.MODES;\n\n    if (typeof io.debug !== UNDEFINED &&\n        io.debug === false) {\n      this.debug = false;\n    }\n\n    if (typeof io.repl !== UNDEFINED &&\n        io.repl === false) {\n      this.repl = false;\n    }\n    // In multi-board mode, block the REPL from\n    // activation. This will be started directly\n    // by the Board.Collection constructor.\n    //\n    // In single-board mode, the REPL will not\n    // be blocked at all.\n    //\n    // If the user program has not disabled the\n    // REPL, initialize it.\n    if (this.repl) {\n      this.repl.initialize(this.emit.bind(this, \"ready\"));\n    }\n\n    if (io.name !== \"Mock\" && this.sigint) {\n      process.on(\"SIGINT\", function() {\n        // Time to wait before forcing exit\n        var failExitTimeout = 1000;\n\n        this.emit(\"exit\");\n        this.warn(\"Board\", \"Closing.\");\n        /* istanbul ignore next */\n        var timeout = setTimeout(function() {\n          process.reallyExit();\n        }, failExitTimeout);\n        var interval = setInterval(function() {\n          if (!this.io.pending) {\n            clearInterval(interval);\n            clearTimeout(timeout);\n            process.nextTick(process.reallyExit);\n          }\n        }.bind(this), 1);\n      }.bind(this));\n    }\n  }\n\n  // If there is a REPL...\n  if (this.repl) {\n    // \"ready\" will be emitted once repl.initialize\n    // is complete, so the only event that needs to\n    // be propagated here is the \"connect\" event.\n    if (type === \"connect\") {\n      this.emit(type, data);\n    }\n  } else {\n    // The REPL is disabled, propagate all events\n    if (!emitted) {\n      this.emit(type, data);\n    }\n  }\n}\n\n// Inherit event api\nutil.inherits(Board, Emitter);\n\n\n\n/**\n * Pass through methods\n */\n[\n  \"digitalWrite\", \"analogWrite\",\n  \"analogRead\", \"digitalRead\",\n  \"pinMode\", \"queryPinState\",\n  \"stepperConfig\", \"stepperStep\",\n  \"sendI2CConfig\", \"sendI2CWriteRequest\", \"sendI2CReadRequest\",\n  \"i2cConfig\", \"i2cWrite\", \"i2cWriteReg\", \"i2cRead\", \"i2cReadOnce\",\n  \"pwmWrite\",\n  \"servoConfig\", \"servoWrite\",\n  \"sysexCommand\", \"sysexResponse\",\n  \"serialConfig\", \"serialWrite\", \"serialRead\", \"serialStop\", \"serialClose\", \"serialFlush\", \"serialListen\",\n].forEach(function(method) {\n  /* istanbul ignore next */\n  Board.prototype[method] = function() {\n    this.io[method].apply(this.io, arguments);\n    return this;\n  };\n});\n\n\nBoard.prototype.snapshot = function(reducer) {\n  var blacklist = this.snapshot.blacklist;\n  var special = this.snapshot.special;\n  var hasReducer = typeof reducer === \"function\";\n\n  return this.register.reduce(function(accum, component) {\n    // Don't include collections or multi/imu wrappers\n    if (typeof component.components === UNDEFINED) {\n      accum.push(\n        Object.getOwnPropertyNames(component).reduce(function(data, prop) {\n          var value = component[prop];\n\n          if (!blacklist.includes(prop) && typeof value !== \"function\") {\n\n            if (hasReducer) {\n              var result = reducer(prop, value, component);\n\n              if (result !== undefined) {\n                data[prop] = result;\n              }\n            } else {\n              data[prop] = special[prop] ?\n                special[prop](value) : value;\n            }\n          }\n          return data;\n        }, Object.create(null))\n      );\n    }\n\n    return accum;\n  }.bind(this), []);\n};\n\nBoard.prototype.serialize = function(reducer) {\n  return JSON.stringify(this.snapshot(reducer));\n};\n\nBoard.prototype.snapshot.blacklist = [\n  \"board\", \"io\", \"_events\", \"_eventsCount\", \"state\",\n];\n\nBoard.prototype.samplingInterval = function(ms) {\n\n  if (this.io.setSamplingInterval) {\n    this.io.setSamplingInterval(ms);\n  } else {\n    throw new Error(\"This IO plugin does not implement an interval adjustment method\");\n  }\n  return this;\n};\n\n\nBoard.prototype.snapshot.special = {\n  mode: function(value) {\n    return [\"INPUT\", \"OUTPUT\", \"ANALOG\", \"PWM\", \"SERVO\"][value] || \"unknown\";\n  }\n};\n\n/**\n *  shiftOut\n *\n */\nBoard.prototype.shiftOut = function(dataPin, clockPin, isBigEndian, value) {\n  if (arguments.length === 3) {\n    value = isBigEndian;\n    isBigEndian = true;\n  }\n\n  for (var i = 0; i < 8; i++) {\n    this.io.digitalWrite(clockPin, 0);\n    if (isBigEndian) {\n      this.io.digitalWrite(dataPin, !!(value & (1 << (7 - i))) | 0);\n    } else {\n      this.io.digitalWrite(dataPin, !!(value & (1 << i)) | 0);\n    }\n    this.io.digitalWrite(clockPin, 1);\n  }\n};\n\nvar logging = {\n  specials: [\n    \"error\",\n    \"fail\",\n    \"warn\",\n    \"info\",\n  ],\n  colors: {\n    log: \"white\",\n    error: \"red\",\n    fail: \"inverse\",\n    warn: \"yellow\",\n    info: \"cyan\"\n  }\n};\n\nBoard.prototype.log = function( /* type, klass, message [, long description] */ ) {\n  var args = Array.from(arguments);\n\n  // If this was a direct call to `log(...)`, make sure\n  // there is a correct \"type\" to emit below.\n  if (!logging.specials.includes(args[0])) {\n    args.unshift(\"log\");\n  }\n\n  var type = args.shift();\n  var klass = args.shift();\n  var message = args.shift();\n  var color = logging.colors[type];\n  var now = Date.now();\n  var event = {\n    type: type,\n    timestamp: now,\n    class: klass,\n    message: \"\",\n    data: null,\n  };\n\n  if (typeof args[args.length - 1] === \"object\") {\n    event.data = args.pop();\n  }\n\n  message += \" \" + args.join(\", \");\n  event.message = message.trim();\n\n  /* istanbul ignore if */\n  if (this.debug) {\n    /* istanbul ignore next */\n    console.log([\n      // Timestamp\n      chalk.grey(now),\n      // Module, color matches type of log\n      chalk.magenta(klass),\n      // Details\n      chalk[color](message),\n      // Miscellaneous args\n      args.join(\", \")\n    ].join(\" \"));\n  }\n\n  this.emit(type, event);\n  this.emit(\"message\", event);\n};\n\n\n// Make shortcuts to all logging methods\nlogging.specials.forEach(function(type) {\n  Board.prototype[type] = function() {\n    var args = [].slice.call(arguments);\n    args.unshift(type);\n\n    this.log.apply(this, args);\n  };\n});\n\n\n/**\n * delay, loop, queue\n *\n * Pass through methods to temporal\n */\n/*\n[\n  \"delay\", \"loop\", \"queue\"\n].forEach(function( method ) {\n  Board.prototype[ method ] = function( time, callback ) {\n    temporal[ method ]( time, callback );\n    return this;\n  };\n});\n\n// Alias wait to delay to match existing Johnny-five API\nBoard.prototype.wait = Board.prototype.delay;\n*/\n\n// -----THIS IS A TEMPORARY FIX UNTIL THE ISSUES WITH TEMPORAL ARE RESOLVED-----\n// Aliasing.\n// (temporary, while ironing out API details)\n// The idea is to match existing hardware programming apis\n// or simply find the words that are most intuitive.\n\n// Eventually, there should be a queuing process\n// for all new callbacks added\n//\n// TODO: Repalce with temporal or compulsive API\n\nBoard.prototype.wait = function(time, callback) {\n  setTimeout(callback, time);\n  return this;\n};\n\nBoard.prototype.loop = function(time, callback) {\n  var handler = function() {\n    callback(function() {\n      clearInterval(interval);\n    });\n  };\n  var interval = setInterval(handler, time);\n  return this;\n};\n\n// ----------\n// Static API\n// ----------\n\n// Board.map( val, fromLow, fromHigh, toLow, toHigh )\n//\n// Re-maps a number from one range to another.\n// Based on arduino map()\nBoard.map = Fn.map;\nBoard.fmap = Fn.fmap;\n\n// Board.constrain( val, lower, upper )\n//\n// Constrains a number to be within a range.\n// Based on arduino constrain()\nBoard.constrain = Fn.constrain;\n\n// Board.range( upper )\n// Board.range( lower, upper )\n// Board.range( lower, upper, tick )\n//\n// Returns a new array range\n//\nBoard.range = Fn.range;\n\n// Board.range.prefixed( prefix, upper )\n// Board.range.prefixed( prefix, lower, upper )\n// Board.range.prefixed( prefix, lower, upper, tick )\n//\n// Returns a new array range, each value prefixed\n//\nBoard.range.prefixed = Fn.range.prefixed;\n\n// Board.uid()\n//\n// Returns a reasonably unique id string\n//\nBoard.uid = Fn.uid;\n\n// Board.mount()\n// Board.mount( index )\n// Board.mount( object )\n//\n// Return hardware instance, based on type of param:\n// @param {arg}\n//   object, user specified\n//   number/index, specified in cache\n//   none, defaults to first in cache\n//\n// Notes:\n// Used to reduce the amount of boilerplate\n// code required in any given module or program, by\n// giving the developer the option of omitting an\n// explicit Board reference in a module\n// constructor's options\nBoard.mount = function(arg) {\n  var index = typeof arg === \"number\" && arg,\n    hardware;\n\n  // board was explicitly provided\n  if (arg && arg.board) {\n    return arg.board;\n  }\n\n  // index specified, attempt to return\n  // hardware instance. Return null if not\n  // found or not available\n  if (typeof index === \"number\") {\n    hardware = boards[index];\n    return hardware && hardware || null;\n  }\n\n  // If no arg specified and hardware instances\n  // exist in the cache\n  if (boards.length) {\n    return boards[0];\n  }\n\n  // No mountable hardware\n  return null;\n};\n\n\n\n/**\n * Board.Component\n *\n * Initialize a new device instance\n *\n * Board.Component is a |this| sensitive constructor,\n * and must be called as:\n *\n * Board.Component.call( this, opts );\n *\n *\n *\n * TODO: Migrate all constructors to use this\n *       to avoid boilerplate\n */\n\nBoard.Component = function(opts, componentOpts) {\n  if (typeof opts === UNDEFINED) {\n    opts = {};\n  }\n\n  if (typeof componentOpts === UNDEFINED) {\n    componentOpts = {};\n  }\n\n  // Board specific properties\n  this.board = Board.mount(opts);\n  this.io = this.board.io;\n\n  // Component/Module instance properties\n  this.id = opts.id || Board.uid();\n  this.custom = opts.custom || {};\n\n  var originalPins;\n\n  if (typeof opts.pin === \"number\" || typeof opts.pin === \"string\") {\n    originalPins = [opts.pin];\n  } else {\n    if (Array.isArray(opts.pins)) {\n      originalPins = opts.pins.slice();\n    } else {\n      if (typeof opts.pins === \"object\" && opts.pins !== null) {\n\n        var pinset = opts.pins || opts.pin;\n\n        originalPins = [];\n        for (var p in pinset) {\n          originalPins.push(pinset[p]);\n        }\n      }\n    }\n  }\n\n\n  if (opts.controller) {\n\n    if (typeof opts.controller === \"string\") {\n      opts.controller = opts.controller.replace(/-/g, \"\");\n    }\n\n    if (!Expander) {\n      Expander = __webpack_require__(/*! ./expander */ \"./node_modules/johnny-five/lib/expander.js\");\n    }\n\n    if (Expander.hasController(opts.controller)) {\n      componentOpts = {\n        normalizePin: false,\n        requestPin: false,\n      };\n    }\n  }\n\n  componentOpts = Board.Component.initialization(componentOpts);\n\n  if (componentOpts.normalizePin) {\n    opts = Board.Pins.normalize(opts, this.board);\n  }\n\n  // var requesting = [];\n\n  if (typeof opts.pins !== UNDEFINED) {\n    this.pins = opts.pins || [];\n\n    // if (Array.isArray(this.pins)) {\n    //   requesting = requesting.concat(\n    //     this.pins.map(function(pin) {\n    //       return {\n    //         value: pin,\n    //         type: \"pin\"\n    //       };\n    //     })\n    //   );\n    // } else {\n    //   requesting = requesting.concat(\n    //     Object.keys(this.pins).map(function(key) {\n    //       return {\n    //         value: this.pins[key],\n    //         type: \"pin\"\n    //       };\n    //     }, this)\n    //   );\n    // }\n  }\n\n  if (typeof opts.pin !== UNDEFINED) {\n    this.pin = opts.pin;\n    // requesting.push({\n    //   value: this.pin,\n    //   type: \"pin\"\n    // });\n  }\n\n  // TODO: Figure out what is using this\n  /* istanbul ignore if */\n  if (typeof opts.emitter !== UNDEFINED) {\n    /* istanbul ignore next */\n    this.emitter = opts.emitter;\n    // requesting.push({\n    //   value: this.emitter,\n    //   type: \"emitter\"\n    // });\n  }\n\n  if (typeof opts.address !== UNDEFINED) {\n    this.address = opts.address;\n    // requesting.forEach(function(request) {\n    //   request.address = this.address;\n    // }, this);\n  }\n\n  if (typeof opts.controller !== UNDEFINED) {\n    this.controller = opts.controller;\n    // requesting.forEach(function(request) {\n    //   request.controller = this.controller;\n    // }, this);\n  }\n\n  // TODO: Figure out what is using this\n  /* istanbul ignore if */\n  if (typeof opts.bus !== UNDEFINED) {\n    /* istanbul ignore next */\n    this.bus = opts.bus;\n    // requesting.forEach(function(request) {\n    //   request.bus = this.bus;\n    // }, this);\n  }\n\n  // if (componentOpts.requestPin) {\n  //   // With the pins being requested for use by this component,\n  //   // compare with the list of pins that are already known to be\n  //   // in use by other components. If any are known to be in use,\n  //   // produce a warning for the user.\n  //   requesting.forEach(function(request, index) {\n  //     var hasController = typeof request.controller !== UNDEFINED;\n  //     var hasAddress = typeof request.address !== UNDEFINED;\n  //     var isOccupied = false;\n  //     var message = \"\";\n\n  //     request.value = originalPins[index];\n\n  //     if (this.board.occupied.length) {\n  //       isOccupied = this.board.occupied.some(function(occupied) {\n  //         var isPinOccupied = request.value === occupied.value && request.type === occupied.type;\n\n  //         if (typeof occupied.controller !== UNDEFINED) {\n  //           if (hasController) {\n  //             return isPinOccupied && (request.controller === occupied.controller);\n  //           }\n  //           return false;\n  //         }\n\n  //         if (typeof occupied.address !== UNDEFINED) {\n  //           if (hasAddress) {\n  //             return isPinOccupied && (request.address === occupied.address);\n  //           }\n  //           return false;\n  //         }\n\n  //         return isPinOccupied;\n  //       });\n  //     }\n\n  //     if (isOccupied) {\n  //       message = request.type + \": \" + request.value;\n\n  //       if (hasController) {\n  //         message += \", controller: \" + request.controller;\n  //       }\n\n  //       if (hasAddress) {\n  //         message += \", address: \" + request.address;\n  //       }\n\n  //       this.board.warn(\"Component\", message + \" is already in use\");\n  //     } else {\n  //       this.board.occupied.push(request);\n  //     }\n  //   }, this);\n  // }\n\n  this.board.register.push(this);\n};\n\nBoard.Component.initialization = function(opts) {\n  var defaults = {\n    requestPin: true,\n    normalizePin: true\n  };\n\n  return Object.assign({}, defaults, opts);\n};\n\n/**\n * Board.Controller\n *\n * Decorate a Component with a Controller. Must be called\n * _AFTER_ a Controller is identified.\n *\n * Board.Controller is a |this| sensitive constructor,\n * and must be called as:\n *\n * Board.Controller.call( this, controller, opts );\n *\n */\n\nBoard.Controller = function(controller, options) {\n  var requirements = controller.requirements && controller.requirements.value;\n\n  if (requirements) {\n    /* istanbul ignore else */\n    if (requirements.options) {\n      Object.keys(requirements.options).forEach(function(key) {\n        /*\n        requirements: {\n          value: {\n            options: {\n              parameterName: {\n                throws: false,\n                message: \"...blah blah blah\",\n                typeof: \"number\",\n              }\n            }\n          }\n        },\n        */\n        if (typeof options[key] === UNDEFINED ||\n          typeof options[key] !== requirements.options[key].typeof) {\n          if (requirements.options[key].throws) {\n            throw new Error(requirements.options[key].message);\n          } else {\n            this.board.warn(this.constructor.name, requirements.options[key].message);\n          }\n        }\n      }, this);\n    }\n  }\n\n  Object.defineProperties(this, controller);\n};\n\n\n\n\n/**\n * Pin Capability Signature Mapping\n */\n\nBoard.Pins = Pins;\n\nBoard.Options = Options;\n\n// Define a user-safe, unwritable hardware cache access\nObject.defineProperty(Board, \"cache\", {\n  get: function() {\n    return boards;\n  }\n});\n\n/**\n * Board event constructor.\n * opts:\n *   type - event type. eg: \"read\", \"change\", \"up\" etc.\n *   target - the instance for which the event fired.\n *   0..* other properties\n */\nBoard.Event = function(event) {\n\n  if (typeof event === UNDEFINED) {\n    throw new Error(\"Board.Event missing Event object\");\n  }\n\n  // default event is read\n  this.type = event.type || \"data\";\n\n  // actual target instance\n  this.target = event.target || null;\n\n  // Initialize this Board instance with\n  // param specified properties.\n  Object.assign(this, event);\n};\n\n\n/**\n * Boards or Board.Collection; Used when the program must connect to\n * more then one board.\n *\n * @memberof Board\n *\n * @param {Array} ports List of port objects { id: ..., port: ... }\n *                      List of id strings (initialized in order)\n *\n * @return {Boards} board object references\n */\nfunction Boards(opts) {\n  if (!(this instanceof Boards)) {\n    return new Boards(opts);\n  }\n\n  var ports;\n\n  // new Boards([ ...Array of board opts ])\n  if (Array.isArray(opts)) {\n    ports = opts.slice();\n    opts = {\n      ports: ports,\n    };\n  }\n\n  // new Boards({ ports: [ ...Array of board opts ], .... })\n  /* istanbul ignore else */\n  if (!Array.isArray(opts) && typeof opts === \"object\" && opts.ports !== undefined) {\n    ports = opts.ports;\n  }\n\n  // new Boards(non-Array?)\n  // new Boards({ ports: non-Array? })\n  /* istanbul ignore if */\n  if (!Array.isArray(ports)) {\n    throw new Error(\"Expected ports to be an array\");\n  }\n\n  if (typeof opts.debug === UNDEFINED) {\n    opts.debug = true;\n  }\n\n  if (typeof opts.repl === UNDEFINED) {\n    opts.repl = true;\n  }\n\n  var initialized = {};\n  var noRepl = ports.some(function(port) { return port.repl === false; });\n  var noDebug = ports.some(function(port) { return port.debug === false; });\n\n  this.length = ports.length;\n  this.debug = opts.debug;\n  this.repl = opts.repl;\n\n  // If any of the port definitions have\n  // explicitly shut off debug output, bubble up\n  // to the Boards instance\n  /* istanbul ignore else */\n  if (noDebug) {\n    this.debug = false;\n  }\n\n  // If any of the port definitions have\n  // explicitly shut off the repl, bubble up\n  // to the Boards instance\n  /* istanbul ignore else */\n  if (noRepl) {\n    this.repl = false;\n  }\n\n  var expecteds = ports.map(function(port, index) {\n    var portOpts;\n\n    if (typeof port === \"string\") {\n      portOpts = {};\n\n      // If the string matches a known valid port\n      // name pattern, then assume this is what\n      // the user code intended.\n      if (rport.test(port)) {\n        portOpts.port = port;\n      } else {\n        // Otherwise they expect Johnny-Five to figure\n        // out what ports to use and intended this\n        // value to be used an id\n        portOpts.id = port;\n      }\n    } else {\n      portOpts = port;\n    }\n\n    // Shut off per-board repl instance creation\n    portOpts.repl = false;\n\n    this[index] = initialized[portOpts.id] = new Board(portOpts);\n\n    // \"error\" event is not async, register immediately\n    this[index].on(\"error\", function(error) {\n      this.emit(\"error\", error);\n    }.bind(this));\n\n    // echo the fail event from the boards\n    this[index].on(\"fail\", function (event) {\n      this.emit(\"fail\", event);\n    }.bind(this));\n\n    return new Promise(function(resolve) {\n      this[index].on(\"ready\", function() {\n        resolve(initialized[portOpts.id]);\n      });\n    }.bind(this));\n  }, this);\n\n  Promise.all(expecteds).then(function(boards) {\n    Object.assign(this, boards);\n\n    this.each(function(board) {\n      board.info(\"Board ID: \", chalk.green(board.id));\n    });\n\n    // If the Boards instance requires a REPL,\n    // make sure it's created before calling \"ready\"\n    if (this.repl) {\n      this.repl = new Repl(\n        Object.assign({}, initialized, {\n          board: this\n        })\n      );\n      this.repl.initialize(function() {\n        this.emit(\"ready\", initialized);\n      }.bind(this));\n    } else {\n      // Otherwise, call ready immediately\n      this.emit(\"ready\", initialized);\n    }\n  }.bind(this));\n}\n\nutil.inherits(Boards, Emitter);\n\nObject.assign(Boards.prototype, Collection.prototype);\n\nBoards.prototype.byId = function(id) {\n  for (var i = 0; i < this.length; i++) {\n    if (this[i].id === id) {\n      return this[i];\n    }\n  }\n\n  return null;\n};\n\nBoards.prototype.log = Board.prototype.log;\n\nlogging.specials.forEach(function(type) {\n  /* istanbul ignore next */\n  Boards.prototype[type] = function() {\n    var args = [].slice.call(arguments);\n    args.unshift(type);\n\n    this.log.apply(this, args);\n  };\n});\n\n/* istanbul ignore else */\nif (IS_TEST_MODE) {\n  Serial.purge = function() {\n    Serial.used.length = 0;\n  };\n  Board.Serial = Serial;\n\n  Board.purge = function() {\n    Board.Pins.normalize.clear();\n    Repl.isActive = false;\n    Repl.isBlocked = true;\n    Repl.ref = null;\n    boards.length = 0;\n  };\n\n  Board.testMode = function(state) {\n    if (!arguments.length) {\n      return IS_TEST_MODE;\n    } else {\n      IS_TEST_MODE = state;\n    }\n  };\n}\n\n// TODO: Eliminate .Array for 1.0.0\nBoard.Array = Boards;\nBoard.Collection = Boards;\n\nmodule.exports = Board;\n\n// References:\n// http://arduino.cc/en/Main/arduinoBoardUno\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/board.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/board.options.js":
/*!*******************************************************!*\
  !*** ./node_modules/johnny-five/lib/board.options.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Many pins have common aliases, especially SPI!\n */\n\nvar MISO = \"miso\";\nvar MOSI = \"mosi\";\nvar SCLK = \"sclk\";\nvar SS = \"ss\";\n\n// jshint unused:false\nvar aliases = {\n\n  // SCLK\n  clk: SCLK,\n  clock: SCLK,\n  sclk: SCLK,\n\n  // MISO\n  somi: MISO,\n  sdo: MISO,\n  do: MISO,\n  dout: MISO,\n  so: MISO,\n  mrsr: MISO,\n  miso: MISO,\n\n  // MOSI\n  simo: MOSI,\n  sdi: MOSI,\n  data: MOSI,\n  di: MOSI,\n  din: MOSI,\n  si: MOSI,\n  mtst: MOSI,\n  mosi: MOSI,\n\n  // SS\n  ncs: SS,\n  cs: SS,\n  csb: SS,\n  csn: SS,\n  en: SS,\n  ld: SS,\n  load: SS,\n  nss: SS,\n  ste: SS,\n  sync: SS,\n  ss: SS,\n};\n\n\n/**\n * Options\n *\n * @param {String} arg Pin address.\n * @param {Number} arg Pin address.\n * @param {Array} arg List of Pin addresses.\n *\n * @return {Options} normalized board options instance.\n */\n\nfunction Options(arg) {\n  if (!(this instanceof Options)) {\n    return new Options(arg);\n  }\n\n  var opts = {};\n\n  if (typeof arg === \"number\" ||\n    typeof arg === \"string\") {\n    opts.pin = arg;\n  } else if (Array.isArray(arg)) {\n    opts.pins = arg;\n  } else {\n    opts = arg;\n\n\n    // @Nick, this is where you want to focus.\n    // Anytime this path is taken, the constructor\n    // received an object. If the object contains\n    // a \"pins\" property that is ALSO an object, we need\n    // to normalize the keys of that object, using the\n    // \"aliases\" map defined above.\n    //\n    // This change will require renaming pin properties in\n    // a few classes, but I'm ok with that, because if we do this\n    // right, no existing code will break.\n    //\n  }\n\n  Object.assign(this, opts);\n}\n\nmodule.exports = Options;\n\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/board.options.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/board.pins.js":
/*!****************************************************!*\
  !*** ./node_modules/johnny-five/lib/board.pins.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Options = __webpack_require__(/*! ./board.options */ \"./node_modules/johnny-five/lib/board.options.js\");\n\nvar MODES = {\n  INPUT: 0x00,\n  OUTPUT: 0x01,\n  ANALOG: 0x02,\n  PWM: 0x03,\n  SERVO: 0x04\n};\n\n\n/**\n * Pin Capability Signature Mapping\n */\n\nvar pinsToType = {\n  20: \"UNO\",\n  25: \"LEONARDO\",\n  70: \"MEGA\"\n};\n\nfunction Pins(board) {\n  if (!(this instanceof Pins)) {\n    return new Pins(board);\n  }\n\n  var io = board.io;\n  var pins = io.pins.slice();\n  var length = pins.length;\n  var type = pinsToType[length] || \"OTHER\";\n\n  board.type = type;\n\n  // Copy pin data to index\n  for (var i = 0; i < length; i++) {\n    this[i] = pins[i];\n  }\n\n  Object.defineProperties(this, {\n    type: {\n      value: type\n    },\n    length: {\n      value: length\n    }\n  });\n\n  // If an IO Plugin or Expander defines\n  // these, override the default\n  [\n    \"isInput\",\n    \"isOutput\",\n    \"isAnalog\",\n    \"isPwm\",\n    \"isServo\",\n  ].forEach(function(isType) {\n    if (io[isType]) {\n      this[isType] = io[isType];\n    }\n  }, this);\n}\n\nObject.keys(MODES).forEach(function(mode) {\n  Object.defineProperty(Pins, mode, {\n    value: MODES[mode]\n  });\n});\n\nfunction isFirmata(board) {\n  return board.io.name === \"Firmata\" || board.io.name === \"Mock\";\n}\n\nfunction hasPins(opts) {\n  return typeof opts.pin !== \"undefined\" ||\n    (typeof opts.pins !== \"undefined\" && opts.pins.length);\n}\n\nPins.isFirmata = isFirmata;\n\nPins.Error = function(opts) {\n  throw new Error(\n    \"Pin Error: \" + opts.pin +\n    \" is not a valid \" + opts.type +\n    \" pin (\" + opts.via + \")\"\n  );\n};\n\nvar normalizers = new Map();\n\nPins.normalize = function(opts, board) {\n  var type = board.pins.type;\n  var isArduino = isFirmata(board);\n  var normalizer = normalizers.get(board);\n  var isNormalizing;\n\n  if (typeof opts === \"string\" ||\n    typeof opts === \"number\" ||\n    Array.isArray(opts)) {\n\n    opts = new Options(opts);\n  }\n\n  if (!normalizer) {\n    isNormalizing = board.io && typeof board.io.normalize === \"function\";\n\n    normalizer = function(pin) {\n      return isArduino ?\n        Pins.fromAnalog(Pins.translate(pin, type)) :\n        (isNormalizing ? board.io.normalize(pin) : pin);\n    };\n\n    normalizers.set(board, normalizer);\n  }\n\n  // Auto-normalize pin values, this reduces boilerplate code\n  // inside module constructors\n  if (hasPins(opts)) {\n\n    // When an array of pins is present, attempt to\n    // normalize them if necessary\n    if (opts.pins) {\n      opts.pins = opts.pins.map(normalizer);\n    } else {\n      opts.pin = normalizer(opts.pin);\n    }\n  }\n\n  return opts;\n};\n\nPins.normalize.clear = function() {\n  normalizers.clear();\n};\n\n// Special kit-centric pin translations\nPins.translations = {\n  UNO: {\n    dtoa: {\n      14: \"A0\",\n      15: \"A1\",\n      16: \"A2\",\n      17: \"A3\",\n      18: \"A4\",\n      19: \"A5\"\n    },\n\n    // TinkerKit\n    tinker: {\n      I0: \"A0\",\n      I1: \"A1\",\n      I2: \"A2\",\n      I3: \"A3\",\n      I4: \"A4\",\n      I5: \"A5\",\n\n      O0: 11,\n      O1: 10,\n      O2: 9,\n      O3: 6,\n      O4: 5,\n      O5: 3,\n\n      D13: 13,\n      D12: 12,\n      D8: 8,\n      D7: 7,\n      D4: 4,\n      D2: 2\n    }\n  },\n  MEGA: {\n    dtoa: {\n      54: \"A0\",\n      55: \"A1\",\n      56: \"A2\",\n      57: \"A3\",\n      58: \"A4\",\n      59: \"A5\",\n      60: \"A6\",\n      61: \"A7\",\n      62: \"A8\",\n      63: \"A9\"\n    },\n\n    // TinkerKit\n    tinker: {\n      I0: \"A0\",\n      I1: \"A1\",\n      I2: \"A2\",\n      I3: \"A3\",\n      I4: \"A4\",\n      I5: \"A5\",\n      I6: \"A6\",\n      I7: \"A7\",\n      I8: \"A8\",\n      I9: \"A9\",\n\n      O0: 11,\n      O1: 10,\n      O2: 9,\n      O3: 6,\n      O4: 5,\n      O5: 3,\n\n      D13: 13,\n      D12: 12,\n      D8: 8,\n      D7: 7,\n      D4: 4,\n      D2: 2\n    }\n  }\n};\n\nPins.translations.LEONARDO = Pins.translations.UNO;\n\nPins.translate = function(pin, type) {\n  var translations = Pins.translations[type.toUpperCase()];\n\n  if (!translations) {\n    return pin;\n  }\n\n  return Object.keys(translations).reduce(function(pin, map) {\n    return translations[map][pin] || pin;\n  }, pin);\n};\n\nPins.fromAnalog = function(pin) {\n  if (typeof pin === \"string\" && pin[0] === \"A\") {\n    return parseInt(pin.slice(1), 10);\n  }\n  return pin;\n};\n\nPins.identity = function(pins, needle) {\n  return [].findIndex.call(pins, function(pin) {\n    return pin.name === needle || pin.id === needle || pin.port === needle;\n  });\n};\n\n/**\n * (generated methods)\n *\n * Pins.prototype.isInput\n * Pins.prototype.isOutput\n * Pins.prototype.isAnalog\n * Pins.prototype.isPwm\n * Pins.prototype.isServo\n *\n */\nObject.keys(MODES).forEach(function(key) {\n  var name = key[0] + key.slice(1).toLowerCase();\n\n  Pins.prototype[\"is\" + name] = function(pin) {\n    var attrs = this[pin] || this[Pins.identity(this, pin)];\n\n    if (attrs && attrs.supportedModes.includes(MODES[key])) {\n      return true;\n    }\n    return false;\n  };\n});\n\nPins.prototype.isDigital = function(pin) {\n  var attrs = this[pin] || this[Pins.identity(this, pin)];\n\n  if (attrs && attrs.supportedModes.length) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = Pins;\n\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/board.pins.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/button.js":
/*!************************************************!*\
  !*** ./node_modules/johnny-five/lib/button.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\");\nvar Collection = __webpack_require__(/*! ./mixins/collection */ \"./node_modules/johnny-five/lib/mixins/collection.js\");\nvar EVS = __webpack_require__(/*! ./evshield */ \"./node_modules/johnny-five/lib/evshield.js\");\nvar Pins = Board.Pins;\nvar Fn = __webpack_require__(/*! ./fn */ \"./node_modules/johnny-five/lib/fn.js\");\nvar Emitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\n\n// Button instance private data\nvar priv = new Map();\nvar aliases = {\n  down: [\"down\", \"press\"],\n  up: [\"up\", \"release\"]\n};\n\n\n\nvar Controllers = {\n  DEFAULT: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n\n        if (Pins.isFirmata(this) && typeof opts.pinValue === \"string\" && opts.pinValue[0] === \"A\") {\n          opts.pinValue = this.io.analogPins[+opts.pinValue.slice(1)];\n        }\n\n        this.pin = Number.isNaN(+opts.pinValue) ? opts.pinValue : +opts.pinValue;\n\n        this.io.pinMode(this.pin, this.io.MODES.INPUT);\n\n        // Enable the pullup resistor after setting pin mode\n        if (this.pullup) {\n          this.io.digitalWrite(this.pin, this.io.HIGH);\n        }\n\n        // Enable the pulldown resistor after setting pin mode\n        if (this.pulldown) {\n          this.io.digitalWrite(this.pin, this.io.LOW);\n        }\n\n        this.io.digitalRead(this.pin, function(data) {\n          if (data !== state.last) {\n            dataHandler(data);\n          }\n        });\n      }\n    },\n    toBoolean: {\n      value: function(raw) {\n        return raw === this.downValue;\n      }\n    }\n  },\n\n  TINKERKIT: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n        var value = 0;\n\n        this.io.pinMode(this.pin, this.io.MODES.ANALOG);\n\n        this.io.analogRead(this.pin, function(data) {\n          data = data > 512 ?  1 : 0;\n\n          // This condition simulates digitalRead's\n          // behavior of limiting calls to changes in\n          // pin value.\n          /* istanbul ignore else */\n          if (data !== value && data !== state.last) {\n            dataHandler(data);\n          }\n\n          value = data;\n        });\n      }\n    },\n    toBoolean: {\n      value: function(raw) {\n        return raw === this.downValue;\n      }\n    }\n  },\n\n  EVS_EV3: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n\n        state.previous = 0;\n        state.shield = EVS.shieldPort(opts.pin);\n        state.register = EVS.Touch;\n\n        state.ev3 = new EVS(Object.assign(opts, {\n          io: this.io\n        }));\n        state.ev3.setup(state.shield, EVS.Type_EV3_TOUCH);\n        state.ev3.read(state.shield, EVS.Touch, EVS.Touch_Bytes, function(data) {\n          var value = data[0];\n          // Since i2cRead is continuous regardless of the reading,\n          // and digitalRead is continuous but only called for changes\n          // in reading value, we need to suppress repeated calls to\n          // dataHandler by limiting to only changed values.\n          /* istanbul ignore else */\n          if (state.previous !== value) {\n            dataHandler(value);\n          }\n          state.previous = value;\n        });\n      }\n    },\n    toBoolean: {\n      value: function(raw) {\n        return raw === this.downValue;\n      }\n    }\n  },\n  EVS_NXT: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n\n        state.previous = 0;\n        state.shield = EVS.shieldPort(opts.pin);\n\n        state.ev3 = new EVS(Object.assign(opts, {\n          io: this.io\n        }));\n        state.ev3.setup(state.shield, EVS.Type_ANALOG);\n        state.ev3.read(state.shield, state.shield.analog, EVS.Analog_Bytes, function(data) {\n          var value = data[0] | (data[1] << 8);\n          // Since i2cRead is continuous regardless of the reading,\n          // and digitalRead is continuous but only called for changes\n          // in reading value, we need to suppress repeated calls to\n          // dataHandler by limiting to only changed values.\n          value = value < 300 ? 1 : 0;\n\n          /* istanbul ignore else */\n          if (state.previous !== value) {\n            dataHandler(value);\n          }\n          state.previous = value;\n        });\n      }\n    },\n    toBoolean: {\n      value: function(raw) {\n        return raw === this.downValue;\n      }\n    }\n  }\n};\n\n/**\n * Button\n * @constructor\n *\n * five.Button();\n *\n * five.Button({\n *   pin: 10\n * });\n *\n *\n * @param {Object} opts [description]\n *\n */\n\nfunction Button(opts) {\n  if (!(this instanceof Button)) {\n    return new Button(opts);\n  }\n\n  var pinValue;\n  var raw;\n  var invert = false;\n  var downValue = 1;\n  var upValue = 0;\n  var controller = null;\n  var state = {\n    interval: null,\n    last: null\n  };\n\n  // Create a debounce boundary on event triggers\n  // this avoids button events firing on\n  // press noise and false positives\n  var trigger = Fn.debounce(function(key) {\n    aliases[key].forEach(function(type) {\n      this.emit(type);\n    }, this);\n  }, 7);\n\n  pinValue = typeof opts === \"object\" ? opts.pin : opts;\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  opts.pinValue = pinValue;\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    controller = Controllers.DEFAULT;\n  }\n\n  Board.Controller.call(this, controller, opts);\n\n  // `holdtime` is used by an interval to determine\n  // if the button has been released within a specified\n  // time frame, in milliseconds.\n  this.holdtime = opts.holdtime || 500;\n\n  // `opts.isPullup` is included as part of an effort to\n  // phase out \"isFoo\" options properties\n  this.pullup = opts.pullup || opts.isPullup || false;\n\n  this.pulldown = opts.pulldown || opts.isPulldown || false;\n\n  // Turns out some button circuits will send\n  // 0 for up and 1 for down, and some the inverse,\n  // so we can invert our function with this option.\n  // Default to invert in pullup mode, but use opts.invert\n  // if explicitly defined (even if false)\n  invert = typeof opts.invert !== \"undefined\" ?\n    opts.invert : (this.pullup || false);\n\n  if (invert) {\n    downValue = downValue ^ 1;\n    upValue = upValue ^ 1;\n  }\n\n  state.last = upValue;\n\n  // Create a \"state\" entry for privately\n  // storing the state of the button\n  priv.set(this, state);\n\n  Object.defineProperties(this, {\n    value: {\n      get: function() {\n        return Number(this.isDown);\n      }\n    },\n    invert: {\n      get: function() {\n        return invert;\n      },\n      set: function(value) {\n        invert = value;\n        downValue = invert ? 0 : 1;\n        upValue = invert ? 1 : 0;\n\n        state.last = upValue;\n      }\n    },\n    downValue: {\n      get: function() {\n        return downValue;\n      },\n      set: function(value) {\n        downValue = value;\n        upValue = value ^ 1;\n        invert = value ? true : false;\n\n        state.last = upValue;\n      }\n    },\n    upValue: {\n      get: function() {\n        return upValue;\n      },\n      set: function(value) {\n        upValue = value;\n        downValue = value ^ 1;\n        invert = value ? true : false;\n\n        state.last = downValue;\n      }\n    },\n    isDown: {\n      get: function() {\n        return this.toBoolean(raw);\n      }\n    }\n  });\n\n  /* istanbul ignore else */\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts, function(data) {\n      // Update the raw data value, which\n      // is used by isDown = toBoolean()\n      raw = data;\n\n      if (!this.isDown) {\n        /* istanbul ignore else */\n        if (state.interval) {\n          clearInterval(state.interval);\n        }\n        trigger.call(this, \"up\");\n      }\n\n      if (this.isDown) {\n        trigger.call(this, \"down\");\n\n        state.interval = setInterval(function() {\n          /* istanbul ignore else */\n          if (this.isDown) {\n            this.emit(\"hold\");\n          }\n        }.bind(this), this.holdtime);\n      }\n\n      state.last = data;\n    }.bind(this));\n  }\n}\n\nutil.inherits(Button, Emitter);\n\n\n/**\n * Fired when the button is pressed down\n *\n * @event\n * @name down\n * @memberOf Button\n */\n\n/**\n * Fired when the button is held\n *\n * @event\n * @name hold\n * @memberOf Button\n */\n\n/**\n * Fired when the button is released\n *\n * @event\n * @name up\n * @memberOf Button\n */\n\n\n/**\n * Buttons()\n * new Buttons()\n */\n\nfunction Buttons(numsOrObjects) {\n  if (!(this instanceof Buttons)) {\n    return new Buttons(numsOrObjects);\n  }\n\n  Object.defineProperty(this, \"type\", {\n    value: Button\n  });\n\n  Collection.Emitter.call(this, numsOrObjects);\n}\n\nutil.inherits(Buttons, Collection.Emitter);\n\nCollection.installMethodForwarding(\n  Buttons.prototype, Button.prototype\n);\n\n// Assign Buttons Collection class as static \"method\" of Button.\nButton.Collection = Buttons;\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Button.Controllers = Controllers;\n  Button.purge = function() {\n    priv.clear();\n  };\n}\n\n\nmodule.exports = Button;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/button.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/color.js":
/*!***********************************************!*\
  !*** ./node_modules/johnny-five/lib/color.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\");\nvar EVS = __webpack_require__(/*! ./evshield */ \"./node_modules/johnny-five/lib/evshield.js\");\nvar Emitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\nvar Fn = __webpack_require__(/*! ./fn */ \"./node_modules/johnny-five/lib/fn.js\");\nvar priv = new Map();\n\n\nfunction pad(value, length) {\n  return Array(length - String(value).length + 1).join(\"0\") + value;\n}\n\nvar Controllers = {\n  EVS_EV3: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n\n        if (opts.mode) {\n          opts.mode = opts.mode.toUpperCase();\n        }\n\n        state.mode = opts.mode === \"RAW\" ? EVS.Type_EV3_COLOR_RGBRAW : EVS.Type_EV3_COLOR;\n        state.bytes = state.mode === EVS.Type_EV3_COLOR_RGBRAW ? 6 : 2;\n\n        // Do not change the order of these items. They are listed such that the\n        // index corresponds to the color code produced by the EV3 color sensor.\n        // The range is very limited.\n        state.colors = [\n          [],\n          [0, 0, 0],\n          [0, 0, 255],\n          [0, 128, 0],\n          [255, 255, 0],\n          [255, 0, 0],\n          [255, 255, 255],\n          [139, 69, 19],\n        ];\n\n        state.shield = EVS.shieldPort(opts.pin);\n        state.ev3 = new EVS(Object.assign(opts, {\n          io: this.io\n        }));\n\n        state.ev3.setup(state.shield, EVS.Type_EV3);\n        state.ev3.write(state.shield, 0x81 + state.shield.offset, state.mode);\n        state.ev3.read(state.shield, EVS.ColorMeasure, state.bytes, function(data) {\n          var value = \"\";\n          if (state.bytes === 2) {\n            value += String((data[0] | (data[1] << 8)) || 1);\n          } else {\n            for (var i = 0; i < 3; i++) {\n              value += pad(data[i * 2].toString(16), 2);\n            }\n          }\n          dataHandler(value);\n        });\n      }\n    },\n    toRGB: {\n      value: function(raw) {\n        var state = priv.get(this);\n\n        if (state.mode === EVS.Type_EV3_COLOR) {\n          return raw > 0 && raw < 8 ? state.colors[raw] : state.colors[0];\n        } else {\n          raw = String(raw);\n          return [0, 0, 0].map(function(zero, index) {\n            return parseInt(raw.slice(index * 2, index * 2 + 2), 16);\n          });\n        }\n      }\n    }\n  },\n  EVS_NXT: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n\n        if (opts.mode) {\n          opts.mode = opts.mode.toUpperCase();\n        }\n\n        state.mode = opts.mode === \"RAW\" ? EVS.Type_NXT_COLOR_RGBRAW : EVS.Type_NXT_COLOR;\n        state.bytes = state.mode === EVS.Type_NXT_COLOR_RGBRAW ? 10 : 1;\n\n        if (state.mode === EVS.Type_NXT_COLOR_RGBRAW) {\n          throw new Error(\"Raw RGB is not currently supported for the NXT.\");\n        }\n\n        // Do not change the order of these items. They are listed such that the\n        // index corresponds to the color code produced by the EV3 color sensor.\n        // The range is very limited.\n        state.colors = [\n          [],\n          [0, 0, 0],\n          [0, 0, 255],\n          [0, 128, 0],\n          [255, 255, 0],\n          [255, 0, 0],\n          [255, 255, 255],\n        ];\n\n        state.shield = EVS.shieldPort(opts.pin);\n        state.ev3 = new EVS(Object.assign(opts, {\n          io: this.io\n        }));\n        state.ev3.setup(state.shield, EVS.Type_NXT_COLOR);\n        state.ev3.read(state.shield, 0x70 + state.shield.offset, state.bytes, function(data) {\n          var value = \"\";\n\n          if (state.bytes === 1) {\n            value += String(data[0]);\n          } else {\n\n            // One day I'll figure this out :|\n            // There is a lot of documentation that\n            // claims this is possible, but I couldn't\n            // figure out how to make sense of the\n            // data that's returned.\n            //\n            // http://www.mathworks.com/help/supportpkg/legomindstormsnxt/ref/legomindstormsnxtcolorsensor.html#zmw57dd0e700\n            // https://msdn.microsoft.com/en-us/library/ff631052.aspx\n            // http://www.lejos.org/nxt/nxj/api/lejos/nxt/ColorSensor.html\n            // http://www.robotc.net/forums/viewtopic.php?f=52&t=6939\n            // http://code.metager.de/source/xref/lejos/classes/src/lejos/nxt/SensorPort.java#calData\n            // http://code.metager.de/source/xref/lejos/classes/src/lejos/nxt/SensorPort.java#SP_MODE_INPUT\n            // http://code.metager.de/source/xref/lejos/classes/src/lejos/nxt/SensorPort.java#416\n          }\n\n          // if (data[4] !== 0) {\n          dataHandler(value);\n          // }\n        });\n      }\n    },\n    toRGB: {\n      value: function(raw) {\n        var state = priv.get(this);\n\n        if (state.mode === EVS.Type_NXT_COLOR) {\n          return raw > 0 && raw < 7 ? state.colors[raw] : state.colors[0];\n        } else {\n          raw = String(raw);\n          return [0, 0, 0].map(function(zero, index) {\n            return parseInt(raw.slice(index * 2, index * 2 + 2), 16);\n          });\n        }\n      }\n    }\n  },\n  ISL29125: {\n\n    REGISTER: {\n      value: {\n        RESET: 0x00,\n        // mode/lux range\n        CONFIG1: 0x01,\n        // ir adjust/filtering\n        CONFIG2: 0x02,\n        // interrupt control\n        CONFIG3: 0x03,\n        // Same as \"GREEN DATA - LOW BYTE\"\n        READ: 0x09\n      }\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        // Cannot change address, so all values const/closed.\n        var address = opts.address || 0x44;\n\n        // TODO: make configs user \"definable\"\n\n        opts.address = address;\n\n        this.io.i2cConfig();\n\n        // Reset chip\n        this.io.i2cWriteReg(address, this.REGISTER.RESET, 0x46);\n\n        // RGB | 10K Lux | 12bits\n        this.io.i2cWriteReg(address, this.REGISTER.CONFIG1, 0x05 | 0x08 | 0x00);\n\n        // High adjust\n        this.io.i2cWriteReg(address, this.REGISTER.CONFIG2, 0x3F);\n\n        // No Interrupts\n        this.io.i2cWriteReg(address, this.REGISTER.CONFIG3, 0x00);\n\n        this.io.i2cRead(address, this.REGISTER.READ, 6, function(data) {\n          var value = \"\";\n\n          // Register order: GLSB, GMSB, RLSB, RMSB, BLSB, BMSB\n          var g = (data[1] << 8) | data[0];\n          var r = (data[3] << 8) | data[2];\n          var b = (data[5] << 8) | data[4];\n\n          var rgb = [r >> 2, g >> 2, b >> 2].map(function(value) {\n            return Fn.constrain(value, 0, 255);\n          });\n\n          for (var i = 0; i < 3; i++) {\n            value += pad(rgb[i].toString(16), 2);\n          }\n\n          dataHandler(value);\n        });\n      }\n    },\n    toRGB: {\n      value: function(raw) {\n        raw = String(raw);\n        return [0, 0, 0].map(function(zero, index) {\n          return parseInt(raw.slice(index * 2, index * 2 + 2), 16);\n        });\n      }\n    }\n  },\n};\n\n\nvar colorNames = [\"red\", \"green\", \"blue\"];\n\n\n/**\n * Color\n * @constructor\n *\n */\n\nfunction Color(opts) {\n\n  if (!(this instanceof Color)) {\n    return new Color(opts);\n  }\n\n  var controller = null;\n  var state = {};\n  var freq = opts.freq || 25;\n  var raw = 0;\n  var last = null;\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  if (typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    throw new Error(\"Color expects a valid controller\");\n  }\n\n  priv.set(this, state);\n\n  Board.Controller.call(this, controller, opts);\n\n  if (!this.toRGB) {\n    this.toRGB = opts.toRGB || function(x) {\n      return x;\n    };\n  }\n\n  Object.defineProperties(this, {\n    value: {\n      get: function() {\n        return raw;\n      }\n    },\n    rgb: {\n      get: function() {\n        return this.toRGB(raw).reduce(function(accum, value, index) {\n          accum[colorNames[index]] = value;\n          return accum;\n        }, {});\n      }\n    }\n  });\n\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts, function(data) {\n      raw = data;\n    });\n  }\n\n  setInterval(function() {\n    if (raw === undefined) {\n      return;\n    }\n\n    var data = {\n      rgb: this.rgb,\n    };\n\n    this.emit(\"data\", data);\n\n    if (raw !== last) {\n      last = raw;\n      this.emit(\"change\", data);\n    }\n  }.bind(this), freq);\n}\n\nutil.inherits(Color, Emitter);\n\nColor.hexCode = function(rgb) {\n  if (rgb.red === undefined || rgb.green === undefined || rgb.blue === undefined) {\n    return null;\n  }\n  return rgb.length === 0 ? \"unknown\" : colorNames.reduce(function(accum, name) {\n    return accum += pad(rgb[name].toString(16), 2);\n  }, \"\");\n};\n\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Color.Controllers = Controllers;\n  Color.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = Color;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/color.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/compass.js":
/*!*************************************************!*\
  !*** ./node_modules/johnny-five/lib/compass.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\");\nvar Emitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\nvar Fn = __webpack_require__(/*! ./fn */ \"./node_modules/johnny-five/lib/fn.js\");\nvar int16 = Fn.int16;\nvar TAU = Fn.TAU;\n\nvar priv = new Map();\n\nvar Controllers = {\n\n  HMC5883L: {\n    REGISTER: {\n      value: {\n        // Page 11\n        // Table 2: Register List\n        //\n        // Configuration Register A\n        CRA: 0x00,\n        // Configuration Register B\n        // This may change, depending on gauss\n        CRB: 0x01,\n        // Mode Register\n        MODE: 0x02,\n        // Data Output X MSB Register\n        READ: 0x03,\n      }\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n        var address = opts.address || 0x1E;\n        var READLENGTH = 6;\n\n        state.scale = 1;\n\n        Object.assign(state, new Compass.Scale(opts.gauss || 0.88));\n\n        opts.address = address;\n\n        this.io.i2cConfig(opts);\n\n        // Page 18\n        // OPERATIONAL EXAMPLES...\n        //\n        // 1. Write CRA (00) – send 0x3C 0x00 0x70 (8-average, 15 Hz default, normal measurement)\n        //\n        // Set CRA\n        // Page 12\n        this.io.i2cWrite(address, this.REGISTER.CRA, 0x70);\n\n        // Set CRB\n        // Page 13\n        this.io.i2cWrite(address, this.REGISTER.CRB, 0x40);\n\n        // Page 14\n        // Measurement: Continuous\n        this.io.i2cWrite(address, this.REGISTER.MODE, 0x00);\n\n        this.io.i2cRead(address, this.REGISTER.READ, READLENGTH, function(bytes) {\n          dataHandler({\n            x: int16(bytes[0], bytes[1]),\n            y: int16(bytes[4], bytes[5]),\n            z: int16(bytes[2], bytes[3]),\n          });\n        });\n      }\n    },\n    toScaledHeading: {\n      value: function(raw) {\n        var state = priv.get(this);\n\n        return ToHeading(raw.x * state.scale, raw.y * state.scale);\n      }\n    }\n  },\n\n  /**\n   * HMC6352: 2-Axis Compass Module\n   * 0x42\n   *\n   * http://bildr.org/2011/01/hmc6352/\n   */\n  HMC6352: {\n    REGISTER: {\n      value: {\n        READ: 0x41\n      }\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n        var address = opts.address || 0x21;\n        var READLENGTH = 2;\n\n        state.scale = 1;\n\n        opts.delay = 10;\n        opts.address = address;\n\n        this.io.i2cConfig(opts);\n\n        this.io.i2cWrite(address, this.REGISTER.READ);\n\n        // Initialize continuous read\n        this.io.i2cRead(address, this.REGISTER.READ, READLENGTH, function(bytes) {\n          dataHandler({\n            x: (((bytes[0] << 8) + bytes[1]) / 10) | 0,\n            y: null,\n            z: null,\n          });\n        });\n      }\n    },\n    toScaledHeading: {\n      value: function(raw) {\n        var state = priv.get(this);\n        return raw.x * state.scale;\n      },\n    },\n  },\n\n  BNO055: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var IMU = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = IMU.Drivers.get(this.board, \"BNO055\", opts);\n        var state = priv.get(this);\n\n        // AF p.32, Table 3-19: Magnetometer Unit settings\n        state.sensitivity = 16;\n\n        driver.on(\"data\", function(data) {\n          dataHandler(data.magnetometer);\n        });\n      }\n    },\n    toScaledHeading: {\n      value: function(raw) {\n        var state = priv.get(this);\n\n        var x = raw.x / state.sensitivity;\n        var y = raw.y / state.sensitivity;\n\n        return ToHeading(x, y);\n      },\n    },\n  },\n\n  // http://www.nxp.com/files/sensors/doc/data_sheet/MAG3110.pdf\n  MAG3110: {\n    REGISTER: {\n      value: {\n        // Page 15\n        // Table 11 Register Address Map\n        // DR_STATUS\n        STATUS: 0x00,\n        // OUT_X_MSB\n        READ: 0x01,\n        // OFF_X_MSB\n        OFFSETS: 0x09,\n        // CTRL_REG1\n        CTRL_REG1: 0x10,\n        // CTRL_REG2\n        CTRL_REG2: 0x11,\n      }\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n\n        // MAG3110 has only one possible address\n        var address = 0x0E;\n        var isDataPending = false;\n        var temp;\n\n        state.isCalibrated = false;\n        state.isPreCalibrated = false;\n        state.hasEmittedCalibration = false;\n        state.measurements = 20;\n\n        state.offsets = {\n          x: 0,\n          y: 0,\n          z: 0,\n        };\n        state.accum = {\n          x: { offset: null, high: 0, low: 0 },\n          y: { offset: null, high: 0, low: 0 },\n          z: { offset: null, high: 0, low: 0 },\n        };\n        opts.delay = 2;\n        opts.address = address;\n\n        if (opts.offsets) {\n          state.isCalibrated = true;\n          state.isPreCalibrated = true;\n\n          if (Array.isArray(opts.offsets)) {\n            temp = opts.offsets.slice();\n            opts.offsets = {\n              x: temp[0],\n              y: temp[1],\n              z: temp[2],\n            };\n          }\n\n          state.accum.x.low = opts.offsets.x[0];\n          state.accum.x.high = opts.offsets.x[1];\n          state.accum.x.offset = (state.accum.x.low + state.accum.x.high) / 2;\n\n          state.accum.y.low = opts.offsets.y[0];\n          state.accum.y.high = opts.offsets.y[1];\n          state.accum.y.offset = (state.accum.y.low + state.accum.y.high) / 2;\n\n          state.accum.z.low = opts.offsets.z[0];\n          state.accum.z.high = opts.offsets.z[1];\n          state.accum.z.offset = (state.accum.z.low + state.accum.z.high) / 2;\n        }\n\n        /*\n          Page 14\n          4.2.7 MAG3110 Setup Examples\n\n          Continuous measurements with ODR = 80 Hz, OSR = 1\n\n          1. Enable automatic magnetic sensor resets by setting bit AUTO_MRST_EN in CTRL_REG2.\n            (CTRL_REG2 = 0x80)\n          2. Put MAG3110 in active mode 80 Hz ODR with OSR = 1 by writing 0x01 to CTRL_REG1\n            (CTRL_REG1 = 0x01)\n          3. At this point it is possible to sync with MAG3110 utilizing INT1 pin or\n              using polling of the DR_STATUS register as explained in section 4.2.5.\n        */\n\n        this.io.i2cConfig(opts);\n        /*\n          Page 21\n          5.5.2 CTRL_REG2 (0x11)\n          Table 33.\n          CTRL_REG2 Register\n\n          | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |\n          |---|---|---|---|---|---|---|---|\n          | A |   | R | M |   |   |   |   |\n\n          A: Automatic Magnetic Sensor Reset. Default value: 0.\n          R: Data output correction. Default value: 0.\n          M: Magnetic Sensor Reset (One-Shot). Default value: 0.\n\n          | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |\n          |---|---|---|---|---|---|---|---|\n          | 1 |   | 0 | 0 |   |   |   |   |\n\n          0b10000000 = 128 = 0x80\n\n          RAW\n          0b10100000 = 160 = 0xA0\n        */\n        this.io.i2cWrite(address, this.REGISTER.CTRL_REG2, 0x80);\n        // this.io.i2cWrite(address, this.REGISTER.CTRL_REG2, 0xA0);\n\n        /*\n          Page 20\n          5.5.1 CTRL_REG1 (0x10)\n          Table 30. CTRL_REG1 Register\n          | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |\n          |---|---|---|---|---|---|---|---|\n          |DR2|DR1|DR0|OS1|OS0|FR |TM |AC |\n\n          See Table 31. CTRL_REG1 Description for complete descriptions\n\n          (Active mode, 80Hz)\n\n          | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |\n          |---|---|---|---|---|---|---|---|\n          | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 |\n\n          0b00000001 = 1 = 0x01\n        */\n        this.io.i2cWrite(address, this.REGISTER.CTRL_REG1, 0x01);\n\n        var measured = {\n          x: 0,\n          y: 0,\n          z: 0,\n        };\n\n        var readCycle = function() {\n          this.io.i2cReadOnce(address, this.REGISTER.STATUS, 1, function(data) {\n            /*\n              Page 16\n              5.1.1 DR_STATUS (0x00)\n\n              Table 12\n              | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |\n              |---|---|---|---|---|---|---|---|\n              |OVR|ZOW|XOW|YOW|DR |ZDR|YDR|XDR|\n\n              Table 13\n              (Contains Complete descriptions)\n\n              OVR (ZYXOW) (X, Y, Z-axis Data Overwrite. Default value: 0.)\n                0: No Data overwritten\n                1: Previous X, Y, Z has been overwritten\n\n              ZOW, YOW, XOW:\n                0: No Data overwritten\n                1: Previous X, Y, Z has been overwritten\n\n              DR (ZYXDR) (X or Y or Z-axis new Data Ready. Default value: 0.)\n                0: No new data is ready\n                1: New full set of data is ready\n\n              ZDR, YDR, XDR:\n                0: No new data is ready\n                1: New X, Y, Z data is ready\n\n              | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |\n              |---|---|---|---|---|---|---|---|\n              | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 1 |\n\n\n              0b00001111 = 15 = 0x0F: A complete set of axis data is available\n\n              0b11111111 = 255 = 0xFF: All data is newly written\n\n            */\n            if (!isDataPending && (data[0] === 0x0F || data[0] === 0xFF)) {\n              isDataPending = true;\n\n              this.io.i2cReadOnce(address, this.REGISTER.READ, 6, function(bytes) {\n                var timeout = 0;\n\n                isDataPending = false;\n\n                measured.x = int16(bytes[0], bytes[1]);\n                measured.y = int16(bytes[2], bytes[3]);\n                measured.z = int16(bytes[4], bytes[5]);\n\n                if (!state.isCalibrated) {\n\n                  if (state.accum.x.offset === null) {\n                    state.accum.x.offset = measured.x;\n                    state.accum.x.low = measured.x;\n                    state.accum.x.high = measured.x;\n                  }\n\n                  if (state.accum.y.offset === null) {\n                    state.accum.y.offset = measured.y;\n                    state.accum.y.low = measured.y;\n                    state.accum.y.high = measured.y;\n                  }\n\n                  state.accum.x.low = Math.min(state.accum.x.low, measured.x);\n                  state.accum.x.high = Math.max(state.accum.x.high, measured.x);\n                  state.accum.x.offset = Math.trunc((state.accum.x.low + state.accum.x.high) / 2);\n\n                  state.accum.y.low = Math.min(state.accum.y.low, measured.y);\n                  state.accum.y.high = Math.max(state.accum.y.high, measured.y);\n                  state.accum.y.offset = Math.trunc((state.accum.y.low + state.accum.y.high) / 2);\n\n                  state.accum.z.low = Math.min(state.accum.z.low, measured.z);\n                  state.accum.z.high = Math.max(state.accum.z.high, measured.z);\n                  state.accum.z.offset = Math.trunc((state.accum.z.low + state.accum.z.high) / 2);\n\n                  --state.measurements;\n\n                  if (!state.measurements) {\n                    state.isCalibrated = true;\n                  }\n                }\n\n                if (state.isCalibrated) {\n                  if (!state.hasEmittedCalibration) {\n                    state.hasEmittedCalibration = true;\n\n                    state.offsets.x = state.accum.x.offset;\n                    state.offsets.y = state.accum.y.offset;\n                    state.offsets.z = state.accum.z.offset;\n\n                    this.io.i2cWrite(address, this.REGISTER.OFFSETS, [\n                      state.offsets.x >> 7, (state.offsets.x << 1) & 0xFF,\n                      state.offsets.y >> 7, (state.offsets.y << 1) & 0xFF,\n                      state.offsets.z >> 7, (state.offsets.z << 1) & 0xFF,\n                    ]);\n\n                    this.emit(\"calibrated\", {\n                      x: [state.accum.x.low, state.accum.x.high],\n                      y: [state.accum.y.low, state.accum.y.high],\n                      z: [state.accum.z.low, state.accum.z.high],\n                    });\n                  }\n\n                  timeout = Math.floor(1000 / 80);\n\n                  dataHandler(measured);\n                }\n\n                // MAG3110 is set to read at 80Hz (do this after calibration)\n                setTimeout(readCycle, timeout);\n              }.bind(this));\n            } else {\n              readCycle();\n            }\n          }.bind(this));\n        }.bind(this);\n\n        readCycle();\n      }\n    },\n    calibrate: {\n      value: function(measurements) {\n        var state = priv.get(this);\n\n        state.isCalibrated = false;\n        state.measurements = measurements;\n      }\n    },\n    toScaledHeading: {\n      value: function(raw) {\n        var state = priv.get(this);\n        var scale = {\n          x: 1 / (state.accum.x.high - state.accum.x.low),\n          y: 1 / (state.accum.y.high - state.accum.y.low),\n        };\n\n        var heading = Math.atan2(-raw.y * scale.y, raw.x * scale.x);\n\n        if (heading < 0) {\n          heading += TAU;\n        }\n\n        return Math.trunc(heading * Fn.RAD_TO_DEG);\n      },\n    },\n  },\n\n  /**\n   * LSM303C: 6Dof 3-Axis Magnetometer & Accelerometer\n   *\n   * https://learn.sparkfun.com/tutorials/lsm303c-6dof-hookup-guide\n   * https://github.com/sparkfun/LSM303C_6_DOF_IMU_Breakout\n   */\n  LSM303C: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var IMU = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = IMU.Drivers.get(this.board, \"LSM303C\", opts);\n\n        driver.on(\"data\", function(data) {\n          dataHandler(data.magnetometer);\n        });\n      }\n    },\n    toScaledHeading: {\n      value: function(raw) {\n        return ToHeading(raw.x, raw.y);\n      },\n    },\n  },\n};\n\n\n/**\n * Compass\n * @constructor\n *\n * five.Compass();\n *\n * five.Compass({\n *  controller: \"HMC5883L\",\n *  freq: 50,\n * });\n *\n *\n * Device Shorthands:\n *\n * \"HMC5883L\": new five.Magnetometer()\n *\n *\n * @param {Object} opts [description]\n *\n */\n\nfunction Compass(opts) {\n\n  if (!(this instanceof Compass)) {\n    return new Compass(opts);\n  }\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  var freq = opts.freq || 25;\n  var controller = null;\n  var raw = {\n    x: null,\n    y: null,\n    z: null,\n  };\n  var state = {\n    x: 0,\n    y: 0,\n    z: 0,\n    scale: 0,\n    register: 0,\n    heading: 0\n  };\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    throw new Error(\"Compass expects a valid controller\");\n  }\n\n  Board.Controller.call(this, controller, opts);\n\n  if (!this.toScaledHeading) {\n    this.toScaledHeading = opts.toScaledHeading || function(raw) {\n      return raw;\n    };\n  }\n\n  priv.set(this, state);\n\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts, function(data) {\n      raw = data;\n    });\n  }\n\n  setInterval(function() {\n    if (raw.x === null) {\n      return;\n    }\n    var isChange = false;\n\n    state.x = raw.x;\n    state.y = raw.y;\n    state.z = raw.z;\n\n    var heading = this.heading;\n\n    if (heading !== state.heading) {\n      state.heading = heading;\n      isChange = true;\n    }\n\n    this.emit(\"data\", {\n      heading: state.heading\n    });\n\n    if (isChange) {\n      this.emit(\"change\", {\n        heading: state.heading\n      });\n    }\n  }.bind(this), freq);\n\n  Object.defineProperties(this, {\n    /**\n     * [read-only] Bearing information\n     * @name bearing\n     * @property\n     * @type Object\n     *\n     *\n        name\n        abbr\n        low\n        mid\n        high\n        heading\n     *\n     */\n\n    bearing: {\n      get: function() {\n        var length = Compass.Points.length;\n        var heading = this.heading;\n        var point;\n\n        for (var i = 0; i < length; i++) {\n          point = Compass.Points[i];\n\n          if (heading >= point.low && heading <= point.high) {\n            // Specify fields to return to avoid returning the\n            // range array (too much noisy data)\n            return {\n              name: point.name,\n              abbr: point.abbr,\n              low: point.low,\n              high: point.high,\n              heading: heading\n            };\n          }\n        }\n      }\n    },\n\n    /**\n     * [read-only] Raw X/Y/Z\n     * @name raw\n     * @property\n     * @type Object\n     *\n        x\n        y\n        z\n     */\n    raw: {\n      get: function() {\n        return {\n          x: raw.x,\n          y: raw.y,\n          z: raw.z\n        };\n      }\n    },\n\n    /**\n     * [read-only] Heading (azimuth)\n     * @name heading\n     * @property\n     * @type number\n     */\n    heading: {\n      get: function() {\n        return this.toScaledHeading(raw);\n      }\n    }\n  });\n}\n\n\nutil.inherits(Compass, Emitter);\n\nfunction ToHeading(x, y) {\n  /**\n   *\n   * Applications of Magnetoresistive Sensors in Navigation Systems\n   * by Michael J. Caruso of Honeywell Inc.\n   * http://www.ssec.honeywell.com/position-sensors/datasheets/sae.pdf\n   *\n   *\n   * Azimuth (x=0, y<0)   = 90.0 (3)\n   * Azimuth (x=0, y>0)   = 270.0\n   * Azimuth (x<0)        = 180 - [arcTan(y/x)]*180/PI\n   * Azimuth (x>0, y<0)   = - [arcTan(y/x)]*180/PI\n   * Azimuth (x>0, y>0)   = 360 - [arcTan(y/x)]*180/PI\n   */\n  /**\n   * http://bildr.org/2012/02/hmc5883l_arduino/\n   * @type {[type]}\n   * Copyright (C) 2011 Love Electronics (loveelectronics.co.uk)\n\n   This program is free software: you can redistribute it and/or modify it under the terms of the version 3 GNU General Public License as published by the Free Software Foundation.\n\n   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n   */\n\n  var radians = Math.atan2(y, x);\n\n  if (radians < 0) {\n    radians += TAU;\n  }\n\n  if (radians > TAU) {\n    radians -= TAU;\n  }\n\n  return radians * Fn.RAD_TO_DEG;\n}\n\n\n/**\n * Compass.scale Set the scale gauss for compass readings\n * @param  {Number} gauss [description]\n * @return {register}       [description]\n *\n * Ported from:\n * http://bildr.org/2012/02/hmc5883l_arduino/\n */\n\nCompass.Scale = function(gauss) {\n\n  if (gauss === 0.88) {\n    this.register = 0x00;\n    this.scale = 0.73;\n  } else if (gauss === 1.3) {\n    this.register = 0x01;\n    this.scale = 0.92;\n  } else if (gauss === 1.9) {\n    this.register = 0x02;\n    this.scale = 1.22;\n  } else if (gauss === 2.5) {\n    this.register = 0x03;\n    this.scale = 1.52;\n  } else if (gauss === 4.0) {\n    this.register = 0x04;\n    this.scale = 2.27;\n  } else if (gauss === 4.7) {\n    this.register = 0x05;\n    this.scale = 2.56;\n  } else if (gauss === 5.6) {\n    this.register = 0x06;\n    this.scale = 3.03;\n  } else if (gauss === 8.1) {\n    this.register = 0x07;\n    this.scale = 4.35;\n  } else {\n    this.register = 0x00;\n    this.scale = 1;\n  }\n\n  // Setting is in the top 3 bits of the register.\n  this.register = this.register << 5;\n};\n\n\n/**\n * Compass.Points\n *\n * 32 Point Compass\n * +1 for North\n *\n */\n\nCompass.Points = [{\n  name: \"North\",\n  abbr: \"N\",\n  low: 354.38,\n  high: 360\n}, {\n  name: \"North\",\n  abbr: \"N\",\n  low: 0,\n  high: 5.62\n}, {\n  name: \"North by East\",\n  abbr: \"NbE\",\n  low: 5.63,\n  high: 16.87\n}, {\n  name: \"North-NorthEast\",\n  abbr: \"NNE\",\n  low: 16.88,\n  high: 28.12\n}, {\n  name: \"NorthEast by North\",\n  abbr: \"NEbN\",\n  low: 28.13,\n  high: 39.37\n}, {\n  name: \"NorthEast\",\n  abbr: \"NE\",\n  low: 39.38,\n  high: 50.62\n}, {\n  name: \"NorthEast by East\",\n  abbr: \"NEbE\",\n  low: 50.63,\n  high: 61.87\n}, {\n  name: \"East-NorthEast\",\n  abbr: \"ENE\",\n  low: 61.88,\n  high: 73.12\n}, {\n  name: \"East by North\",\n  abbr: \"EbN\",\n  low: 73.13,\n  high: 84.37\n}, {\n  name: \"East\",\n  abbr: \"E\",\n  low: 84.38,\n  high: 95.62\n}, {\n  name: \"East by South\",\n  abbr: \"EbS\",\n  low: 95.63,\n  high: 106.87\n}, {\n  name: \"East-SouthEast\",\n  abbr: \"ESE\",\n  low: 106.88,\n  high: 118.12\n}, {\n  name: \"SouthEast by East\",\n  abbr: \"SEbE\",\n  low: 118.13,\n  high: 129.37\n}, {\n  name: \"SouthEast\",\n  abbr: \"SE\",\n  low: 129.38,\n  high: 140.62\n}, {\n  name: \"SouthEast by South\",\n  abbr: \"SEbS\",\n  low: 140.63,\n  high: 151.87\n}, {\n  name: \"South-SouthEast\",\n  abbr: \"SSE\",\n  low: 151.88,\n  high: 163.12\n}, {\n  name: \"South by East\",\n  abbr: \"SbE\",\n  low: 163.13,\n  high: 174.37\n}, {\n  name: \"South\",\n  abbr: \"S\",\n  low: 174.38,\n  high: 185.62\n}, {\n  name: \"South by West\",\n  abbr: \"SbW\",\n  low: 185.63,\n  high: 196.87\n}, {\n  name: \"South-SouthWest\",\n  abbr: \"SSW\",\n  low: 196.88,\n  high: 208.12\n}, {\n  name: \"SouthWest by South\",\n  abbr: \"SWbS\",\n  low: 208.13,\n  high: 219.37\n}, {\n  name: \"SouthWest\",\n  abbr: \"SW\",\n  low: 219.38,\n  high: 230.62\n}, {\n  name: \"SouthWest by West\",\n  abbr: \"SWbW\",\n  low: 230.63,\n  high: 241.87\n}, {\n  name: \"West-SouthWest\",\n  abbr: \"WSW\",\n  low: 241.88,\n  high: 253.12\n}, {\n  name: \"West by South\",\n  abbr: \"WbS\",\n  low: 253.13,\n  high: 264.37\n}, {\n  name: \"West\",\n  abbr: \"W\",\n  low: 264.38,\n  high: 275.62\n}, {\n  name: \"West by North\",\n  abbr: \"WbN\",\n  low: 275.63,\n  high: 286.87\n}, {\n  name: \"West-NorthWest\",\n  abbr: \"WNW\",\n  low: 286.88,\n  high: 298.12\n}, {\n  name: \"NorthWest by West\",\n  abbr: \"NWbW\",\n  low: 298.13,\n  high: 309.37\n}, {\n  name: \"NorthWest\",\n  abbr: \"NW\",\n  low: 309.38,\n  high: 320.62\n}, {\n  name: \"NorthWest by North\",\n  abbr: \"NWbN\",\n  low: 320.63,\n  high: 331.87\n}, {\n  name: \"North-NorthWest\",\n  abbr: \"NNW\",\n  low: 331.88,\n  high: 343.12\n}, {\n  name: \"North by West\",\n  abbr: \"NbW\",\n  low: 343.13,\n  high: 354.37\n}];\n\nObject.freeze(Compass.Points);\n\n/**\n * Fires once every N ms, equal to value of `freq`. Defaults to 66ms\n *\n * @event\n * @name read\n * @memberOf Compass\n */\n\n\n/**\n * Fires when the calculated heading has changed\n *\n * @event\n * @name headingchange\n * @memberOf Compass\n */\n\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Compass.Controllers = Controllers;\n  Compass.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = Compass;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/compass.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/definitions/mpr121.js":
/*!************************************************************!*\
  !*** ./node_modules/johnny-five/lib/definitions/mpr121.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// MPR121* Register Defines\nmodule.exports = {\n  MAPS: {\n    MPR121QR2_SHIELD: {\n      KEYS: {\n        0: 1,\n        1: 2,\n        2: 3,\n        3: 4,\n        4: 5,\n        5: 6,\n        6: 7,\n        7: 8,\n        8: 9,\n      },\n      TARGETS: {\n        256: 0,\n        32: 1,\n        4: 2,\n        128: 3,\n        16: 4,\n        2: 5,\n        64: 6,\n        8: 7,\n        1: 8,\n      }\n    },\n    MPR121: {\n      KEYS: {\n        0: 0,\n        1: 1,\n        2: 2,\n        3: 3,\n        4: 4,\n        5: 5,\n        6: 6,\n        7: 7,\n        8: 8,\n        9: 9,\n        10: 10,\n        11: 11,\n      },\n      TARGETS: {\n        1: 0,\n        2: 1,\n        4: 2,\n        8: 3,\n        16: 4,\n        32: 5,\n        64: 6,\n        128: 7,\n        256: 8,\n        512: 9,\n        1024: 10,\n        2048: 11,\n      }\n    },\n    MPR121_KEYPAD: {\n      KEYS: {\n        0: 1,\n        1: 2,\n        2: 3,\n        3: 4,\n        4: 5,\n        5: 6,\n        6: 7,\n        7: 8,\n        8: 9,\n        9: 10,\n        10: 11,\n        11: 12,\n      },\n      TARGETS: {\n        8: 0,\n        128: 1,\n        2048: 2,\n        4: 3,\n        64: 4,\n        1024: 5,\n        2: 6,\n        32: 7,\n        512: 8,\n        1: 9,\n        16: 10,\n        256: 11,\n      },\n    },\n    MPR121_SHIELD: {\n      KEYS: {\n        0: 0,\n        1: 1,\n        2: 2,\n        3: 3,\n        4: 4,\n        5: 5,\n        6: 6,\n        7: 7,\n        8: 8,\n        9: 9,\n        10: 10,\n        11: 11,\n      },\n      TARGETS: {\n        1: 0,\n        2: 1,\n        4: 2,\n        8: 3,\n        16: 4,\n        32: 5,\n        64: 6,\n        128: 7,\n        256: 8,\n        512: 9,\n        1024: 10,\n        2048: 11,\n      },\n    },\n  },\n  MPR121_DEFAULT_ADDRESS: 0x5A,\n  MPR121_SOFTRESET: 0x80,\n\n  // MPR121 Registers (from data sheet)\n  ELE0_ELE7_TOUCH_STATUS: 0x00,\n  ELE8_ELE11_ELEPROX_TOUCH_STATUS: 0x01,\n\n  ELE0_7_OOR_STATUS: 0x02,\n  ELE8_11_ELEPROX_OOR_STATUS: 0x03,\n\n  ELE0_FILTERED_DATA_LSB: 0x04,\n  ELE0_FILTERED_DATA_MSB: 0x05,\n  ELE1_FILTERED_DATA_LSB: 0x06,\n  ELE1_FILTERED_DATA_MSB: 0x07,\n  ELE2_FILTERED_DATA_LSB: 0x08,\n  ELE2_FILTERED_DATA_MSB: 0x09,\n  ELE3_FILTERED_DATA_LSB: 0x0A,\n  ELE3_FILTERED_DATA_MSB: 0x0B,\n  ELE4_FILTERED_DATA_LSB: 0x0C,\n  ELE4_FILTERED_DATA_MSB: 0x0D,\n  ELE5_FILTERED_DATA_LSB: 0x0E,\n  ELE5_FILTERED_DATA_MSB: 0x0F,\n  ELE6_FILTERED_DATA_LSB: 0x10,\n  ELE6_FILTERED_DATA_MSB: 0x11,\n  ELE7_FILTERED_DATA_LSB: 0x12,\n  ELE7_FILTERED_DATA_MSB: 0x13,\n  ELE8_FILTERED_DATA_LSB: 0x14,\n  ELE8_FILTERED_DATA_MSB: 0x15,\n  ELE9_FILTERED_DATA_LSB: 0x16,\n  ELE9_FILTERED_DATA_MSB: 0x17,\n  ELE10_FILTERED_DATA_LSB: 0x18,\n  ELE10_FILTERED_DATA_MSB: 0x19,\n  ELE11_FILTERED_DATA_LSB: 0x1A,\n  ELE11_FILTERED_DATA_MSB: 0x1B,\n  ELEPROX_FILTERED_DATA_LSB: 0x1C,\n  ELEPROX_FILTERED_DATA_MSB: 0x1D,\n\n  ELE0_BASELINE_VALUE: 0x1E,\n  ELE1_BASELINE_VALUE: 0x1F,\n  ELE2_BASELINE_VALUE: 0x20,\n  ELE3_BASELINE_VALUE: 0x21,\n  ELE4_BASELINE_VALUE: 0x22,\n  ELE5_BASELINE_VALUE: 0x23,\n  ELE6_BASELINE_VALUE: 0x24,\n  ELE7_BASELINE_VALUE: 0x25,\n  ELE8_BASELINE_VALUE: 0x26,\n  ELE9_BASELINE_VALUE: 0x27,\n  ELE10_BASELINE_VALUE: 0x28,\n  ELE11_BASELINE_VALUE: 0x29,\n  ELEPROX_BASELINE_VALUE: 0x2A,\n\n  MHD_RISING: 0x2B,\n  NHD_AMOUNT_RISING: 0x2C,\n  NCL_RISING: 0x2D,\n  FDL_RISING: 0x2E,\n  MHD_FALLING: 0x2F,\n  NHD_AMOUNT_FALLING: 0x30,\n  NCL_FALLING: 0x31,\n  FDL_FALLING: 0x32,\n  NHD_AMOUNT_TOUCHED: 0x33,\n  NCL_TOUCHED: 0x34,\n  FDL_TOUCHED: 0x35,\n  ELEPROX_MHD_RISING: 0x36,\n  ELEPROX_NHD_AMOUNT_RISING: 0x37,\n  ELEPROX_NCL_RISING: 0x38,\n  ELEPROX_FDL_RISING: 0x39,\n  ELEPROX_MHD_FALLING: 0x3A,\n  ELEPROX_NHD_AMOUNT_FALLING: 0x3B,\n  ELEPROX_FDL_FALLING: 0x3C,\n  ELEPROX_NHD_AMOUNT_TOUCHED: 0x3E,\n  ELEPROX_NCL_TOUCHED: 0x3F,\n  ELEPROX_FDL_TOUCHED: 0x40,\n\n  ELE0_TOUCH_THRESHOLD: 0x41,\n  ELE0_RELEASE_THRESHOLD: 0x42,\n  ELE1_TOUCH_THRESHOLD: 0x43,\n  ELE1_RELEASE_THRESHOLD: 0x44,\n  ELE2_TOUCH_THRESHOLD: 0x45,\n  ELE2_RELEASE_THRESHOLD: 0x46,\n  ELE3_TOUCH_THRESHOLD: 0x47,\n  ELE3_RELEASE_THRESHOLD: 0x48,\n  ELE4_TOUCH_THRESHOLD: 0x49,\n  ELE4_RELEASE_THRESHOLD: 0x4A,\n  ELE5_TOUCH_THRESHOLD: 0x4B,\n  ELE5_RELEASE_THRESHOLD: 0x4C,\n  ELE6_TOUCH_THRESHOLD: 0x4D,\n  ELE6_RELEASE_THRESHOLD: 0x4E,\n  ELE7_TOUCH_THRESHOLD: 0x4F,\n  ELE7_RELEASE_THRESHOLD: 0x50,\n  ELE8_TOUCH_THRESHOLD: 0x51,\n  ELE8_RELEASE_THRESHOLD: 0x52,\n  ELE9_TOUCH_THRESHOLD: 0x53,\n  ELE9_RELEASE_THRESHOLD: 0x54,\n  ELE10_TOUCH_THRESHOLD: 0x55,\n  ELE10_RELEASE_THRESHOLD: 0x56,\n  ELE11_TOUCH_THRESHOLD: 0x57,\n  ELE11_RELEASE_THRESHOLD: 0x58,\n  ELEPROX_TOUCH_THRESHOLD: 0x59,\n  ELEPROX_RELEASE_THRESHOLD: 0x5A,\n  DEBOUNCE_TOUCH_AND_RELEASE: 0x5B,\n  AFE_CONFIGURATION: 0x5C,\n\n  FILTER_CONFIG: 0x5D,\n  ELECTRODE_CONFIG: 0x5E,\n  ELE0_CURRENT: 0x5F,\n  ELE1_CURRENT: 0x60,\n  ELE2_CURRENT: 0x61,\n  ELE3_CURRENT: 0x62,\n  ELE4_CURRENT: 0x63,\n  ELE5_CURRENT: 0x64,\n  ELE6_CURRENT: 0x65,\n  ELE7_CURRENT: 0x66,\n  ELE8_CURRENT: 0x67,\n  ELE9_CURRENT: 0x68,\n  ELE10_CURRENT: 0x69,\n  ELE11_CURRENT: 0x6A,\n  ELEPROX_CURRENT: 0x6B,\n\n  ELE0_ELE1_CHARGE_TIME: 0x6C,\n  ELE2_ELE3_CHARGE_TIME: 0x6D,\n  ELE4_ELE5_CHARGE_TIME: 0x6E,\n  ELE6_ELE7_CHARGE_TIME: 0x6F,\n  ELE8_ELE9_CHARGE_TIME: 0x70,\n  ELE10_ELE11_CHARGE_TIME: 0x71,\n  ELEPROX_CHARGE_TIME: 0x72,\n\n  GPIO_CONTROL_0: 0x73,\n  GPIO_CONTROL_1: 0x74,\n  GPIO_DATA: 0x75,\n  GPIO_DIRECTION: 0x76,\n  GPIO_ENABLE: 0x77,\n  GPIO_SET: 0x78,\n  GPIO_CLEAR: 0x79,\n  GPIO_TOGGLE: 0x7A,\n  AUTO_CONFIG_CONTROL_0: 0x7B,\n  AUTO_CONFIG_CONTROL_1: 0x7C,\n  AUTO_CONFIG_USL: 0x7D,\n  AUTO_CONFIG_LSL: 0x7E,\n  AUTO_CONFIG_TARGET_LEVEL: 0x7F,\n\n  // Other Constants\n  // these are suggested values from app note 3944\n  TOUCH_THRESHOLD: 0x0F,\n  RELEASE_THRESHOLD: 0x0A,\n  NUM_CHANNELS: 12\n};\n\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/definitions/mpr121.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/esc.js":
/*!*********************************************!*\
  !*** ./node_modules/johnny-five/lib/esc.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\");\nvar Expander = __webpack_require__(/*! ./expander */ \"./node_modules/johnny-five/lib/expander.js\");\nvar Pins = Board.Pins;\nvar Collection = __webpack_require__(/*! ./mixins/collection */ \"./node_modules/johnny-five/lib/mixins/collection.js\");\nvar Fn = __webpack_require__(/*! ./fn */ \"./node_modules/johnny-five/lib/fn.js\");\nvar Emitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\n\nvar priv = new Map();\n\n\nvar Controllers = {\n  PCA9685: {\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n\n        this.address = opts.address || 0x40;\n        this.pwmRange = opts.pwmRange || [544, 2400];\n        this.frequency = opts.frequency || 50;\n\n        state.expander = Expander.get({\n          address: this.address,\n          controller: this.controller,\n          bus: this.bus,\n          pwmRange: this.pwmRange,\n          frequency: this.frequency,\n        });\n\n        this.pin = state.expander.normalize(opts.pin);\n      }\n    },\n    write: {\n      writable: true,\n      value: function(pin, microseconds) {\n        var state = priv.get(this);\n        state.expander.servoWrite(pin, microseconds);\n      }\n    }\n  },\n  DEFAULT: {\n    initialize: {\n      value: function(opts) {\n\n        // When in debug mode, if pin is not a PWM pin, emit an error\n        if (opts.debug && !this.board.pins.isServo(this.pin)) {\n          Board.Pins.Error({\n            pin: this.pin,\n            type: \"PWM\",\n            via: \"Servo\",\n          });\n        }\n\n        this.io.servoConfig(this.pin, this.pwmRange[0], this.pwmRange[1]);\n      }\n    },\n    write: {\n      writable: true,\n      value: function(pin, microseconds) {\n        microseconds |= 0;\n        this.io.servoWrite(pin, microseconds);\n      }\n    }\n  }\n};\n\nvar Devices = {\n  FORWARD: {\n    deviceName: {\n      get: function() {\n        return \"FORWARD\";\n      }\n    },\n    dir: {\n      value: function(speed, dir) {\n        if (dir.name === \"forward\") {\n          return this.speed(speed);\n        }\n      }\n    }\n  },\n  FORWARD_REVERSE: {\n    deviceName: {\n      get: function() {\n        return \"FORWARD_REVERSE\";\n      }\n    },\n    dir: {\n      value: function(speed, dir) {\n        if (dir.name === \"forward\") {\n          return this.speed(Fn.fscale(speed, 0, 100, this.neutral, this.range[1]));\n        } else {\n          return this.speed(Fn.fscale(speed, 0, 100, this.neutral, this.range[0]));\n        }\n      }\n    }\n  },\n  FORWARD_BRAKE_REVERSE: {\n    deviceName: {\n      get: function() {\n        return \"FORWARD_BRAKE_REVERSE\";\n      }\n    },\n    dir: {\n      value: function(speed, dir) {\n\n        /*\n          As far as I can tell, this isn't possible.\n\n          To enable reverse, the brakes must first be applied,\n          but it's not nearly as simple as it sounds since there\n          appears to be a timing factor that differs across\n          speed controllers.\n         */\n\n        if (dir.name === \"forward\") {\n          this.speed(Fn.fscale(speed, 0, 100, this.neutral, this.range[1]));\n        } else {\n          this.speed(Fn.fscale(speed, 0, 100, this.neutral, this.range[0]));\n        }\n      }\n    }\n  }\n};\n\n/**\n * ESC\n * @constructor\n *\n * @param {Object} opts Options: pin, range\n * @param {Number} pin  Pin number\n */\n\nfunction ESC(opts) {\n  if (!(this instanceof ESC)) {\n    return new ESC(opts);\n  }\n\n  var controller = null;\n  var pinValue;\n  var device;\n  var state = {\n    // All speed history for this ESC\n    // history = [\n    //   {\n    //     timestamp: Date.now(),\n    //     speed: speed\n    //   }\n    // ];\n    history: [],\n    value: 0\n  };\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  priv.set(this, state);\n\n  this.startAt = typeof opts.startAt !== \"undefined\" ? opts.startAt : null;\n  this.neutral = opts.neutral;\n  this.range = opts.range || [0, 100];\n  this.pwmRange = opts.pwmRange || [544, 2400];\n  this.interval = null;\n\n  // StandardFirmata on Arduino allows controlling\n  // servos from analog pins.\n  // If we're currently operating with an Arduino\n  // and the user has provided an analog pin name\n  // (eg. \"A0\", \"A5\" etc.), parse out the numeric\n  // value and capture the fully qualified analog\n  // pin number.\n  if (typeof opts.controller === \"undefined\" && Pins.isFirmata(this)) {\n    if (typeof pinValue === \"string\" && pinValue[0] === \"A\") {\n      pinValue = this.io.analogPins[+pinValue.slice(1)];\n    }\n\n    pinValue = +pinValue;\n\n    // If the board's default pin normalization\n    // came up with something different, use the\n    // the local value.\n    if (!Number.isNaN(pinValue) && this.pin !== pinValue) {\n      this.pin = pinValue;\n    }\n  }\n\n  // Allow users to pass in custom device types\n  device = typeof opts.device === \"string\" ?\n    Devices[opts.device] : opts.device;\n\n  if (!device) {\n    device = Devices.FORWARD;\n  }\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (!controller) {\n    controller = Controllers.DEFAULT;\n  }\n\n  Object.defineProperties(this, Object.assign({}, device, controller, {\n    value: {\n      get: function() {\n        return state.value;\n      }\n    },\n    history: {\n      get: function() {\n        return state.history.slice(-5);\n      }\n    },\n    last: {\n      get: function() {\n        return state.history[state.history.length - 1] || {\n          last: null\n        };\n      }\n    }\n  }));\n\n  this.initialize(opts);\n\n  if (this.deviceName !== \"FORWARD\") {\n    if (Number.isNaN(+this.neutral)) {\n      throw new Error(\"Directional speed controllers require a neutral point from 0-100 (number)\");\n    }\n\n    this.startAt = this.neutral;\n  }\n\n  // Match either null or undefined, but not 0\n  if (this.startAt !== null && this.startAt !== undefined) {\n    this.speed(this.startAt);\n  }\n}\n\nutil.inherits(ESC, Emitter);\n\n/**\n * speed\n *\n * Set the ESC's speed\n *\n * @param  {Float} speed 0...100 (full range)\n *\n * @return {ESC} instance\n */\n\nESC.prototype.speed = function(speed) {\n  var state = priv.get(this);\n  var history = state.history;\n  var noInterval = false;\n  var steps = 0;\n  var lspeed, hspeed;\n\n  speed = Fn.constrain(speed, this.range[0], this.range[1]);\n\n  if (this.interval) {\n    // Bail out if speed is the same as whatever was\n    // last _provided_\n    if (this.value === speed) {\n      return this;\n    } else {\n      clearInterval(this.interval);\n      this.interval = null;\n    }\n  }\n\n  state.value = speed;\n\n  // This is the very first speed command being received.\n  // Safe to assume that the ESC and Brushless motor are\n  // not yet moving.\n  if (history.length === 0) {\n    noInterval = true;\n  }\n\n  // Bail out if speed is the same as whatever was\n  // last _written_\n\n  if (this.last.speed === speed) {\n    return this;\n  }\n\n  lspeed = this.last.speed;\n  hspeed = speed;\n  steps = Math.ceil(Math.abs(lspeed - hspeed));\n\n  if (!steps || steps === 1) {\n    noInterval = true;\n  }\n\n  if (noInterval) {\n    this.write(this.pin, Fn.fscale(speed, 0, 100, this.pwmRange[0], this.pwmRange[1]));\n\n    history.push({\n      timestamp: Date.now(),\n      speed: speed\n    });\n    return this;\n  }\n\n  var throttle = lspeed;\n\n  this.interval = setInterval(function() {\n\n    if (hspeed > throttle) {\n      throttle++;\n    } else {\n      throttle--;\n    }\n\n    this.write(this.pin, Fn.fscale(throttle, 0, 100, this.pwmRange[0], this.pwmRange[1]));\n\n    history.push({\n      timestamp: Date.now(),\n      speed: throttle\n    });\n\n    if (steps) {\n      steps--;\n\n      if (!steps) {\n        clearInterval(this.interval);\n        this.interval = null;\n      }\n    }\n  }.bind(this), 1);\n\n  return this;\n};\n\n\n/**\n * brake Stop the ESC by hitting the brakes ;)\n * @return {Object} instance\n */\nESC.prototype.brake = function() {\n  var state = priv.get(this);\n  var speed = this.neutral || 0;\n\n  this.speed(speed);\n\n  state.history.push({\n    timestamp: Date.now(),\n    speed: speed\n  });\n\n  return this;\n};\n\n[\n  /**\n   * forward Set forward speed\n   * fwd Set forward speed\n   *\n   * @param  {Number} 0-100, 0 is stopped, 100 is fastest\n   * @return {Object} this\n   */\n  {\n    name: \"forward\",\n    abbr: \"fwd\",\n    value: 1\n  },\n  /**\n   * reverse Set revese speed\n   * rev Set revese speed\n   *\n   * @param  {Number} 0-100, 0 is stopped, 100 is fastest\n   * @return {Object} this\n   */\n  {\n    name: \"reverse\",\n    abbr: \"rev\",\n    value: 0\n  }\n].forEach(function(dir) {\n  var method = function(speed) {\n    this.dir(speed, dir);\n    return this;\n  };\n\n  ESC.prototype[dir.name] = ESC.prototype[dir.abbr] = method;\n});\n\n\n/**\n * stop Stop the ESC\n * @return {Object} instance\n */\nESC.prototype.stop = function() {\n  var state = priv.get(this);\n  var history = state.history;\n  var speed = this.type === \"bidirectional\" ? this.neutral : 0;\n\n  this.write(this.pin, Fn.fscale(speed, 0, 100, this.pwmRange[0], this.pwmRange[1]));\n\n  history.push({\n    timestamp: Date.now(),\n    speed: speed\n  });\n\n  return this;\n};\n\n/**\n * ESC.Collection()\n * new ESC.Collection()\n *\n * Constructs an Array-like instance of all escs\n */\nfunction ESCs(numsOrObjects) {\n  if (!(this instanceof ESCs)) {\n    return new ESCs(numsOrObjects);\n  }\n\n  Object.defineProperty(this, \"type\", {\n    value: ESC\n  });\n\n  Collection.call(this, numsOrObjects);\n}\n\nutil.inherits(ESCs, Collection);\n\n/**\n *\n * ESCs, speed(0-100%)\n *\n * set all escs to the specified speed from 0-100%\n *\n * eg. array.min();\n\n * ESCs, min()\n *\n * set all escs to the minimum throttle\n *\n * eg. array.min();\n\n * ESCs, max()\n *\n * set all escs to the maximum throttle\n *\n * eg. array.max();\n\n * ESCs, stop()\n *\n * stop all escs\n *\n * eg. array.stop();\n */\n\nCollection.installMethodForwarding(\n  ESCs.prototype, ESC.prototype\n);\n\n\n// Assign ESCs Collection class as static \"method\" of ESC.\n// TODO: Eliminate .Array for 1.0.0\nESC.Array = ESCs;\nESC.Collection = ESCs;\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  ESC.Controllers = Controllers;\n  ESC.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = ESC;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/esc.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/evshield.js":
/*!**************************************************!*\
  !*** ./node_modules/johnny-five/lib/evshield.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Emitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\nvar shared;\n\nfunction Bank(options) {\n  this.address = options.address;\n  this.io = options.io;\n  this.io.i2cConfig(options);\n}\n\nBank.prototype.read = function(register, numBytes, callback) {\n  if (register) {\n    this.io.i2cRead(this.address, register, numBytes, callback);\n  } else {\n    this.io.i2cRead(this.address, numBytes, callback);\n  }\n};\n\nBank.prototype.write = function(register, bytes) {\n  if (!Array.isArray(bytes)) {\n    bytes = [bytes];\n  }\n  this.io.i2cWrite(this.address, register, bytes);\n};\n\nfunction EVS(options) {\n  if (shared) {\n    return shared;\n  }\n\n  this.bank = {\n    a: new Bank({\n      address: EVS.BANK_A,\n      io: options.io,\n    }),\n    b: new Bank({\n      address: EVS.BANK_B,\n      io: options.io,\n    })\n  };\n\n  shared = this;\n}\n\nEVS.shieldPort = function(pin) {\n  var port = EVS[pin];\n\n  if (port === undefined) {\n    throw new Error(\"Invalid EVShield pin name\");\n  }\n\n  var address, analog, bank, motor, mode, offset, sensor;\n  var endsWithS1 = false;\n\n  if (pin.startsWith(\"BA\")) {\n    address = EVS.BANK_A;\n    bank = \"a\";\n  } else {\n    address = EVS.BANK_B;\n    bank = \"b\";\n  }\n\n  if (pin.includes(\"M\")) {\n    motor = pin.endsWith(\"M1\") ? EVS.S1 : EVS.S2;\n  }\n\n  if (pin.includes(\"S\")) {\n    endsWithS1 = pin.endsWith(\"S1\");\n\n    // Used for reading 2 byte integer values from raw sensors\n    analog = endsWithS1 ? EVS.S1_ANALOG : EVS.S2_ANALOG;\n    // Sensor Mode (1 or 2?)\n    mode = endsWithS1 ? EVS.S1_MODE : EVS.S2_MODE;\n    // Used for read registers\n    offset = endsWithS1 ? EVS.S1_OFFSET : EVS.S2_OFFSET;\n    // Used to address \"sensor type\"\n    sensor = endsWithS1 ? EVS.S1 : EVS.S2;\n  }\n\n  return {\n    address: address,\n    analog: analog,\n    bank: bank,\n    mode: mode,\n    motor: motor,\n    offset: offset,\n    port: port,\n    sensor: sensor,\n  };\n};\n\nEVS.isRawSensor = function(port) {\n  return port.analog === EVS.S1_ANALOG || port.analog === EVS.S2_ANALOG;\n};\n\nutil.inherits(EVS, Emitter);\n\nEVS.prototype.setup = function(port, type) {\n  this.bank[port.bank].write(port.mode, [type]);\n};\n\nEVS.prototype.read = function(port, register, numBytes, callback) {\n\n  if (port.sensor && port.offset && !EVS.isRawSensor(port)) {\n    register += port.offset;\n  }\n\n  this.bank[port.bank].read(register, numBytes, callback);\n};\n\nEVS.prototype.write = function(port, register, data) {\n  this.bank[port.bank].write(register, data);\n};\n\n/*\n * Shield Registers\n */\n\nEVS.BAS1 = 0x01;\nEVS.BAS2 = 0x02;\nEVS.BBS1 = 0x03;\nEVS.BBS2 = 0x04;\n\nEVS.BAM1 = 0x05;\nEVS.BAM2 = 0x06;\nEVS.BBM1 = 0x07;\nEVS.BBM2 = 0x08;\n\nEVS.BANK_A = 0x1A;\nEVS.BANK_B = 0x1B;\n\nEVS.S1 = 0x01;\nEVS.S2 = 0x02;\n\nEVS.M1 = 0x01;\nEVS.M2 = 0x02;\nEVS.MM = 0x03;\n\nEVS.Type_NONE = 0x00;\nEVS.Type_SWITCH = 0x01;\nEVS.Type_ANALOG = 0x02;\n\nEVS.Type_I2C = 0x09;\n\n/*\n * Sensor Mode NXT\n */\nEVS.Type_NXT_LIGHT_REFLECTED = 0x03;\nEVS.Type_NXT_LIGHT = 0x04;\nEVS.Type_NXT_COLOR = 0x0D;\nEVS.Type_NXT_COLOR_RGBRAW = 0x04;\nEVS.Type_NXT_COLORRED = 0x0E;\nEVS.Type_NXT_COLORGREEN = 0x0F;\nEVS.Type_NXT_COLORBLUE = 0x10;\nEVS.Type_NXT_COLORNONE = 0x11;\n\n\nEVS.Type_DATABIT0_HIGH = 0x40;\n\n/*\n * Sensor Port Controls\n */\nEVS.S1_MODE = 0x6F;\n// EVS.S1_EV3_MODE = 0x6F;\nEVS.S1_ANALOG = 0x70;\nEVS.S1_OFFSET = 0;\n\nEVS.S2_MODE = 0xA3;\n// EVS.S2_EV3_MODE = 0x6F;\nEVS.S2_ANALOG = 0xA4;\nEVS.S2_OFFSET = 52;\n\n/*\n * Sensor Mode EV3\n */\nEVS.Type_EV3_LIGHT_REFLECTED = 0x00;\nEVS.Type_EV3_LIGHT = 0x01;\nEVS.Type_EV3_COLOR = 0x02;\nEVS.Type_EV3_COLOR_REFRAW = 0x03;\nEVS.Type_EV3_COLOR_RGBRAW = 0x04;\nEVS.Type_EV3_TOUCH = 0x12;\nEVS.Type_EV3 = 0x13;\n\n/*\n * Sensor Read Registers\n */\nEVS.Light = 0x83;\nEVS.Bump = 0x84;\nEVS.ColorMeasure = 0x83;\nEVS.Proximity = 0x83;\nEVS.Touch = 0x83;\nEVS.Ultrasonic = 0x81;\nEVS.Mode = 0x81;\n\n/*\n * Sensor Read Byte Counts\n */\nEVS.Light_Bytes = 2;\nEVS.Analog_Bytes = 2;\nEVS.Bump_Bytes = 1;\nEVS.ColorMeasure_Bytes = 2;\nEVS.Proximity_Bytes = 2;\nEVS.Touch_Bytes = 1;\n\n\n/*\n * Motor selection\n */\nEVS.Motor_1 = 0x01;\nEVS.Motor_2 = 0x02;\nEVS.Motor_Both = 0x03;\n\n/*\n * Motor next action\n */\n// stop and let the motor coast.\nEVS.Motor_Next_Action_Float = 0x00;\n// apply brakes, and resist change to tachometer, but if tach position is forcibly changed, do not restore position\nEVS.Motor_Next_Action_Brake = 0x01;\n// apply brakes, and restore externally forced change to tachometer\nEVS.Motor_Next_Action_BrakeHold = 0x02;\n\nEVS.Motor_Stop = 0x60;\nEVS.Motor_Reset = 0x52;\n\n/*\n * Motor direction\n */\n\nEVS.Motor_Reverse = 0x00;\nEVS.Motor_Forward = 0x01;\n\n/*\n * Motor Tachometer movement\n */\n\n// Move the tach to absolute value provided\nEVS.Motor_Move_Absolute = 0x00;\n// Move the tach relative to previous position\nEVS.Motor_Move_Relative = 0x01;\n\n/*\n * Motor completion\n */\n\nEVS.Motor_Completion_Dont_Wait = 0x00;\nEVS.Motor_Completion_Wait_For = 0x01;\n\n/*\n * 0-100\n */\nEVS.Speed_Full = 90;\nEVS.Speed_Medium = 60;\nEVS.Speed_Slow = 25;\n\n/*\n * Motor Port Controls\n */\nEVS.CONTROL_SPEED = 0x01;\nEVS.CONTROL_RAMP = 0x02;\nEVS.CONTROL_RELATIVE = 0x04;\nEVS.CONTROL_TACHO = 0x08;\nEVS.CONTROL_BRK = 0x10;\nEVS.CONTROL_ON = 0x20;\nEVS.CONTROL_TIME = 0x40;\nEVS.CONTROL_GO = 0x80;\n\nEVS.STATUS_SPEED = 0x01;\nEVS.STATUS_RAMP = 0x02;\nEVS.STATUS_MOVING = 0x04;\nEVS.STATUS_TACHO = 0x08;\nEVS.STATUS_BREAK = 0x10;\nEVS.STATUS_OVERLOAD = 0x20;\nEVS.STATUS_TIME = 0x40;\nEVS.STATUS_STALL = 0x80;\n\nEVS.COMMAND = 0x41;\nEVS.VOLTAGE = 0x6E;\n\nEVS.SETPT_M1 = 0x42;\nEVS.SPEED_M1 = 0x46;\nEVS.TIME_M1 = 0x47;\nEVS.CMD_B_M1 = 0x48;\nEVS.CMD_A_M1 = 0x49;\n\nEVS.SETPT_M2 = 0x4A;\nEVS.SPEED_M2 = 0x4E;\nEVS.TIME_M2 = 0x4F;\nEVS.CMD_B_M2 = 0x50;\nEVS.CMD_A_M2 = 0x51;\n\n\n/*\n * Motor Read registers.\n */\nEVS.POSITION_M1 = 0x52;\nEVS.POSITION_M2 = 0x56;\nEVS.STATUS_M1 = 0x5A;\nEVS.STATUS_M2 = 0x5B;\nEVS.TASKS_M1 = 0x5C;\nEVS.TASKS_M2 = 0x5D;\n\nEVS.ENCODER_PID = 0x5E;\nEVS.SPEED_PID = 0x64;\nEVS.PASS_COUNT = 0x6A;\nEVS.TOLERANCE = 0x6B;\n\n/*\n * Built-in components\n */\nEVS.BTN_PRESS = 0xDA;\nEVS.RGB_LED = 0xD7;\nEVS.CENTER_RGB_LED = 0xDE;\n\n\n\nmodule.exports = EVS;\n\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/evshield.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/expander.js":
/*!**************************************************!*\
  !*** ./node_modules/johnny-five/lib/expander.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\");\nvar Emitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\nvar nanosleep = __webpack_require__(/*! ./sleep */ \"./node_modules/johnny-five/lib/sleep.js\").nano;\nvar Fn = __webpack_require__(/*! ./fn */ \"./node_modules/johnny-five/lib/fn.js\");\nvar priv = new Map();\nvar active = new Map();\n\nfunction Base() {\n  Emitter.call(this);\n\n  this.HIGH = 1;\n  this.LOW = 0;\n  this.isReady = false;\n\n  this.MODES = {};\n  this.pins = [];\n  this.analogPins = [];\n}\n\nutil.inherits(Base, Emitter);\n\nvar Controllers = {\n  MCP23017: {\n    ADDRESSES: {\n      value: [0x20]\n    },\n    REGISTER: {\n      value: {\n        // IO A\n        IODIRA: 0x00,\n        GPPUA: 0x0C,\n        GPIOA: 0x12,\n        OLATA: 0x14,\n        // IO B\n        IODIRB: 0x01,\n        GPPUB: 0x0D,\n        GPIOB: 0x13,\n        OLATB: 0x15,\n      }\n    },\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n\n        state.iodir = [0xff, 0xff];\n        state.olat = [0xff, 0xff];\n        state.gpio = [0xff, 0xff];\n        state.gppu = [0x00, 0x00];\n\n        this.address = opts.address || this.ADDRESSES[0];\n        opts.address = this.address;\n\n        this.io.i2cConfig(opts);\n        this.io.i2cWrite(this.address, [this.REGISTER.IODIRA, state.iodir[this.REGISTER.IODIRA]]);\n        this.io.i2cWrite(this.address, [this.REGISTER.IODIRB, state.iodir[this.REGISTER.IODIRB]]);\n\n        Object.assign(this.MODES, this.io.MODES);\n\n        for (var i = 0; i < 16; i++) {\n          this.pins.push({\n            supportedModes: [\n              this.MODES.INPUT,\n              this.MODES.OUTPUT\n            ],\n            mode: 0,\n            value: 0,\n            report: 0,\n            analogChannel: 127\n          });\n\n          this.pinMode(i, this.MODES.OUTPUT);\n          this.digitalWrite(i, this.LOW);\n        }\n\n        this.name = \"MCP23017\";\n        this.isReady = true;\n\n        this.emit(\"connect\");\n        this.emit(\"ready\");\n      }\n    },\n    normalize: {\n      value: function(pin) {\n        return pin;\n      }\n    },\n    // 1.6.1 I/O DIRECTION REGISTER\n    pinMode: {\n      value: function(pin, mode) {\n        var state = priv.get(this);\n        var pinIndex = pin;\n        var port = 0;\n        var iodir = null;\n\n        if (pin < 8) {\n          port = this.REGISTER.IODIRA;\n        } else {\n          port = this.REGISTER.IODIRB;\n          pin -= 8;\n        }\n\n        iodir = state.iodir[port];\n\n        if (mode === this.io.MODES.INPUT) {\n          iodir |= 1 << pin;\n        } else {\n          iodir &= ~(1 << pin);\n        }\n\n        this.pins[pinIndex].mode = mode;\n        this.io.i2cWrite(this.address, [port, iodir]);\n\n        state.iodir[port] = iodir;\n      }\n    },\n    // 1.6.10 PORT REGISTER\n    digitalWrite: {\n      value: function(pin, value) {\n        var state = priv.get(this);\n        var pinIndex = pin;\n        var port = 0;\n        var gpio = 0;\n        // var olataddr = 0;\n        var gpioaddr = 0;\n\n        if (pin < 8) {\n          port = this.REGISTER.IODIRA;\n          // olataddr = this.REGISTER.OLATA;\n          gpioaddr = this.REGISTER.GPIOA;\n        } else {\n          port = this.REGISTER.IODIRB;\n          // olataddr = this.REGISTER.OLATB;\n          gpioaddr = this.REGISTER.GPIOB;\n          pin -= 8;\n        }\n\n        gpio = state.olat[port];\n\n        if (value === this.io.HIGH) {\n          gpio |= 1 << pin;\n        } else {\n          gpio &= ~(1 << pin);\n        }\n\n        this.pins[pinIndex].report = 0;\n        this.pins[pinIndex].value = value;\n        this.io.i2cWrite(this.address, [gpioaddr, gpio]);\n\n        state.olat[port] = gpio;\n        state.gpio[port] = gpio;\n      }\n    },\n    // 1.6.7 PULL-UP RESISTOR\n    // CONFIGURATION REGISTER\n    pullUp: {\n      value: function(pin, value) {\n        var state = priv.get(this);\n        var port = 0;\n        var gppu = 0;\n        var gppuaddr = 0;\n\n        if (pin < 8) {\n          port = this.REGISTER.IODIRA;\n          gppuaddr = this.REGISTER.GPPUA;\n        } else {\n          port = this.REGISTER.IODIRB;\n          gppuaddr = this.REGISTER.GPPUB;\n          pin -= 8;\n        }\n\n        gppu = state.gppu[port];\n\n        if (value === this.io.HIGH) {\n          gppu |= 1 << pin;\n        } else {\n          gppu &= ~(1 << pin);\n        }\n\n        this.io.i2cWrite(this.address, [gppuaddr, gppu]);\n\n        state.gppu[port] = gppu;\n      }\n    },\n    digitalRead: {\n      value: function(pin, callback) {\n        var pinIndex = pin;\n        var gpioaddr = 0;\n\n        if (pin < 8) {\n          gpioaddr = this.REGISTER.GPIOA;\n        } else {\n          gpioaddr = this.REGISTER.GPIOB;\n          pin -= 8;\n        }\n\n        this.pins[pinIndex].report = 1;\n\n        this.on(\"digital-read-\" + pinIndex, callback);\n\n        this.io.i2cRead(this.address, gpioaddr, 1, function(data) {\n          var byte = data[0];\n          var value = byte >> pin & 0x01;\n\n          this.pins[pinIndex].value = value;\n\n          this.emit(\"digital-read-\" + pinIndex, value);\n        }.bind(this));\n      }\n    },\n  },\n  MCP23008: {\n    ADDRESSES: {\n      value: [0x20]\n    },\n    REGISTER: {\n      value: {\n        IODIR: 0x00,\n        GPPU: 0x06,\n        GPIO: 0x09,\n        OLAT: 0x0A,\n      }\n    },\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n\n        state.iodir = [0xff];\n        state.olat = [0xff];\n        state.gpio = [0xff];\n        state.gppu = [0x00];\n\n        this.address = opts.address || this.ADDRESSES[0];\n\n        opts.address = this.address;\n\n        this.io.i2cConfig(opts);\n        this.io.i2cWrite(this.address, [this.REGISTER.IODIR, state.iodir[this.REGISTER.IODIR]]);\n\n        Object.assign(this.MODES, this.io.MODES);\n\n        for (var i = 0; i < 8; i++) {\n          this.pins.push({\n            supportedModes: [\n              this.MODES.INPUT,\n              this.MODES.OUTPUT\n            ],\n            mode: 0,\n            value: 0,\n            report: 0,\n            analogChannel: 127\n          });\n\n          this.pinMode(i, this.MODES.OUTPUT);\n          this.digitalWrite(i, this.LOW);\n        }\n\n        this.name = \"MCP23008\";\n        this.isReady = true;\n\n        this.emit(\"connect\");\n        this.emit(\"ready\");\n      }\n    },\n    normalize: {\n      value: function(pin) {\n        return pin;\n      }\n    },\n    // 1.6.1 I/O DIRECTION REGISTER\n    pinMode: {\n      value: function(pin, mode) {\n        var state = priv.get(this);\n        var pinIndex = pin;\n        var port = this.REGISTER.IODIR;\n        var iodir = state.iodir[port];\n\n        if (mode === this.io.MODES.INPUT) {\n          iodir |= 1 << pin;\n        } else {\n          iodir &= ~(1 << pin);\n        }\n\n        this.pins[pinIndex].mode = mode;\n        this.io.i2cWrite(this.address, [port, iodir]);\n\n        state.iodir[port] = iodir;\n      }\n    },\n    // 1.6.10 PORT REGISTER\n    digitalWrite: {\n      value: function(pin, value) {\n        var state = priv.get(this);\n        var pinIndex = pin;\n        var port = this.REGISTER.IODIR;\n        var gpioaddr = this.REGISTER.GPIO;\n        var gpio = state.olat[port];\n\n        if (value === this.io.HIGH) {\n          gpio |= 1 << pin;\n        } else {\n          gpio &= ~(1 << pin);\n        }\n\n        this.pins[pinIndex].report = 0;\n        this.pins[pinIndex].value = value;\n        this.io.i2cWrite(this.address, [gpioaddr, gpio]);\n\n        state.olat[port] = gpio;\n        state.gpio[port] = gpio;\n      }\n    },\n    // 1.6.7 PULL-UP RESISTOR\n    // CONFIGURATION REGISTER\n    pullUp: {\n      value: function(pin, value) {\n        var state = priv.get(this);\n        var port = this.REGISTER.IODIR;\n        var gppuaddr = this.REGISTER.GPPU;\n        var gppu = state.gppu[port];\n\n        if (value === this.io.HIGH) {\n          gppu |= 1 << pin;\n        } else {\n          gppu &= ~(1 << pin);\n        }\n\n        this.io.i2cWrite(this.address, [gppuaddr, gppu]);\n\n        state.gppu[port] = gppu;\n      }\n    },\n    digitalRead: {\n      value: function(pin, callback) {\n        var pinIndex = pin;\n        var gpioaddr = this.REGISTER.GPIO;\n\n        this.pins[pinIndex].report = 1;\n\n        this.on(\"digital-read-\" + pin, callback);\n\n        this.io.i2cRead(this.address, gpioaddr, 1, function(data) {\n          var byte = data[0];\n          var value = byte >> pin & 0x01;\n\n          this.pins[pinIndex].value = value;\n\n          this.emit(\"digital-read-\" + pin, value);\n        }.bind(this));\n      }\n    },\n  },\n  PCF8574: {\n    ADDRESSES: {\n      value: [0x20]\n    },\n    REGISTER: {},\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n\n        state.port = 0x00;\n        state.ddr = 0x00;\n        state.pins = 0x00;\n\n        this.address = opts.address || this.ADDRESSES[0];\n\n        opts.address = this.address;\n        this.io.i2cConfig(opts);\n\n        Object.assign(this.MODES, this.io.MODES);\n\n        for (var i = 0; i < 8; i++) {\n          this.pins.push({\n            supportedModes: [\n              this.MODES.INPUT,\n              this.MODES.OUTPUT\n            ],\n            mode: 1,\n            value: 0,\n            report: 0,\n            analogChannel: 127\n          });\n\n          this.pinMode(i, this.MODES.OUTPUT);\n          this.digitalWrite(i, this.LOW);\n        }\n\n        this.name = \"PCF8574\";\n        this.isReady = true;\n\n        this.emit(\"connect\");\n        this.emit(\"ready\");\n      }\n    },\n    normalize: {\n      value: function(pin) {\n        return pin;\n      }\n    },\n    pinMode: {\n      value: function(pin, mode) {\n        var state = priv.get(this);\n        var pinIndex = pin;\n        var port = state.port;\n        var ddr = state.ddr;\n        var pins = state.pins;\n\n        if (mode === this.MODES.INPUT) {\n          ddr &= ~(1 << pin);\n          port &= ~(1 << pin);\n        } else {\n          ddr |= (1 << pin);\n          port &= ~(1 << pin);\n        }\n\n        this.pins[pinIndex].mode = mode;\n\n        state.port = port;\n        state.ddr = ddr;\n\n        this.io.i2cWrite(this.address, (pins & ~ddr) | port);\n      }\n    },\n    digitalWrite: {\n      value: function(pin, value) {\n        var state = priv.get(this);\n        var pinIndex = pin;\n        var port = state.port;\n        var ddr = state.ddr;\n        var pins = state.pins;\n\n        if (value) {\n          port |= 1 << pin;\n        } else {\n          port &= ~(1 << pin);\n        }\n\n        this.pins[pinIndex].report = 0;\n        this.pins[pinIndex].value = value;\n\n        state.port = port;\n\n        this.io.i2cWrite(this.address, (pins & ~ddr) | port);\n      }\n    },\n    digitalRead: {\n      value: function(pin, callback) {\n        var state = priv.get(this);\n        var pinIndex = pin;\n\n        this.pins[pinIndex].report = 1;\n\n        this.on(\"digital-read-\" + pin, callback);\n\n        this.io.i2cRead(this.address, 1, function(data) {\n          var byte = data[0];\n          var value = byte >> pin & 0x01;\n\n          state.pins = byte;\n\n          this.pins[pinIndex].value = value;\n\n          this.emit(\"digital-read-\" + pin, value);\n        }.bind(this));\n      }\n    },\n  },\n  PCF8575: {\n    ADDRESSES: {\n      value: [0x20]\n    },\n    REGISTER: {},\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n\n        state.port = [0x00, 0x01];\n        state.gpio = [0x00, 0x00];\n\n        this.address = opts.address || this.ADDRESSES[0];\n\n        opts.address = this.address;\n        this.io.i2cConfig(opts);\n\n        Object.assign(this.MODES, this.io.MODES);\n\n        for (var i = 0; i < 16; i++) {\n          this.pins.push({\n            supportedModes: [\n              this.MODES.INPUT,\n              this.MODES.OUTPUT\n            ],\n            mode: 1,\n            value: 0,\n            report: 0,\n            analogChannel: 127\n          });\n\n          this.pinMode(i, this.MODES.OUTPUT);\n          this.digitalWrite(i, this.LOW);\n        }\n\n        // Set all pins low on initialization\n        this.io.i2cWrite(this.address, state.gpio);\n\n        this.name = \"PCF8575\";\n        this.isReady = true;\n\n        this.emit(\"connect\");\n        this.emit(\"ready\");\n      }\n    },\n    normalize: {\n      value: function(pin) {\n        return pin;\n      }\n    },\n    pinMode: {\n      value: function(pin, mode) {\n        var pinIndex = pin;\n        this.pins[pinIndex].mode = mode;\n      }\n    },\n    digitalWrite: {\n      value: function(pin, value) {\n        var state = priv.get(this);\n        var pinIndex = pin;\n        var port;\n\n        if (pin < 8) {\n          port = 0;\n        } else {\n          port = 1;\n          pin -= 8;\n        }\n\n        if (value === this.io.HIGH) {\n          state.gpio[port] |= 1 << pin;\n        } else {\n          state.gpio[port] &= ~(1 << pin);\n        }\n\n        this.pins[pinIndex].report = 0;\n        this.pins[pinIndex].value = value;\n\n        this.io.i2cWrite(this.address, state.gpio);\n      }\n    },\n    digitalRead: {\n      value: function(pin, callback) {\n        var pinIndex = pin;\n        var port;\n\n        if (pin < 8) {\n          port = 0;\n        } else {\n          port = 1;\n          pin -= 8;\n        }\n\n        this.pins[pinIndex].report = 1;\n\n        this.on(\"digital-read-\" + pin, callback);\n\n        this.io.i2cRead(this.address, 2, function(data) {\n          var byte = data[port];\n          var value = byte >> pin & 0x01;\n\n          this.pins[pinIndex].value = value;\n\n          this.emit(\"digital-read-\" + pin, value);\n        }.bind(this));\n      }\n    },\n  },\n  PCA9685: {\n    ADDRESSES: {\n      value: [0x40]\n    },\n    REGISTER: {\n      value: {\n        MODE1: 0x00,\n        PRESCALE: 0xFE,\n        BASE: 0x06\n      }\n    },\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n\n        // 7.3.5 PWM frequency PRE_SCALE\n        //\n        state.frequency = Board.constrain(opts.frequency || 1526, 24, 1526) * 0.9;\n\n        this.address = opts.address || this.ADDRESSES[0];\n        this.pwmRange = opts.pwmRange || [0, 4095];\n\n        Object.defineProperties(this, {\n          prescale: {\n            get: function() {\n              // PCA9685 has an on-board 25MHz clock source\n\n              // 7.3.5 PWM frequency PRE_SCALE\n              return Math.round(25000000 / (4096 * state.frequency)) - 1;\n            }\n          },\n          frequency: {\n            get: function() {\n              return state.frequency;\n            }\n          }\n        });\n\n        opts.address = this.address;\n\n        this.io.i2cConfig(opts);\n\n        // Reset\n        this.io.i2cWriteReg(this.address, this.REGISTER.MODE1, 0x00);\n        // Sleep\n        this.io.i2cWriteReg(this.address, this.REGISTER.MODE1, 0x10);\n        // Set prescalar\n        this.io.i2cWriteReg(this.address, this.REGISTER.PRESCALE, this.prescale);\n        // Wake up\n        this.io.i2cWriteReg(this.address, this.REGISTER.MODE1, 0x00);\n        // Wait 5 nanoseconds for restart\n        nanosleep(5);\n        // Auto-increment\n        this.io.i2cWriteReg(this.address, this.REGISTER.MODE1, 0xa1);\n\n        Object.assign(this.MODES, this.io.MODES);\n\n        for (var i = 0; i < 16; i++) {\n          this.pins.push({\n            supportedModes: [\n              this.MODES.OUTPUT,\n              this.MODES.PWM,\n              this.MODES.SERVO,\n            ],\n            mode: 0,\n            value: 0,\n            report: 0,\n            analogChannel: 127\n          });\n\n          this.pinMode(i, this.MODES.OUTPUT);\n          this.digitalWrite(i, this.LOW);\n        }\n\n        this.name = \"PCA9685\";\n        this.isReady = true;\n\n        this.emit(\"connect\");\n        this.emit(\"ready\");\n      }\n    },\n    normalize: {\n      value: function(pin) {\n        return this.io.name === \"Tessel 2\" ? (pin - 1) : pin;\n      }\n    },\n    pinMode: {\n      value: function(pin, mode) {\n        if (this.pins[pin] === undefined) {\n          throw new RangeError(\"Invalid PCA9685 pin: \" + pin);\n        }\n        this.pins[pin].mode = mode;\n      }\n    },\n    digitalWrite: {\n      value: function(pin, value) {\n        this.pwmWrite(pin, value ? 255 : 0);\n      }\n    },\n    analogWrite: {\n      value: function(pin, value) {\n        this.pwmWrite(pin, value);\n      }\n    },\n    servoWrite: {\n      value: function(pin, value) {\n\n        var off;\n\n        if (value < 544) {\n          value = Board.constrain(value, 0, 180);\n          off = Fn.map(value, 0, 180, this.pwmRange[0] / 4, this.pwmRange[1] / 4);\n        } else {\n          off = value / 4;\n        }\n\n        off |= 0;\n\n        this.io.i2cWrite(this.address, [\n          this.REGISTER.BASE + 4 * pin,\n          0, 0,\n          off, off >> 8\n        ]);\n      }\n    },\n    pwmWrite: {\n      value: function(pin, value) {\n\n        if (this.pins[pin] === undefined) {\n          throw new RangeError(\"Invalid PCA9685 pin: \" + pin);\n        }\n\n        value = Board.constrain(value, 0, 255);\n\n        var on = 0;\n        var off = this.pwmRange[1] * value / 255;\n\n        if (value === 0) {\n          // Special value for signal fully off.\n          on = 0;\n          off = 4096;\n        }\n\n        if (value === 255) {\n          // Special value for signal fully on.\n          on = 4096;\n          off = 0;\n        }\n\n        this.io.i2cWrite(this.address, [\n          this.REGISTER.BASE + 4 * pin,\n          on, on >> 8,\n          off, off >> 8\n        ]);\n\n        this.pins[pin].value = value;\n      }\n    }\n  },\n  PCF8591: {\n    ADDRESSES: {\n      value: [0x48]\n    },\n    REGISTER: {},\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n\n        state.control = 0x45;\n        state.reading = false;\n\n        this.address = opts.address || this.ADDRESSES[0];\n\n        opts.address = this.address;\n        this.io.i2cConfig(opts);\n\n        Object.assign(this.MODES, this.io.MODES);\n\n        for (var i = 0; i < 4; i++) {\n          this.pins.push({\n            supportedModes: [\n              this.MODES.ANALOG\n            ],\n            mode: 1,\n            value: 0,\n            report: 0,\n            analogChannel: i\n          });\n        }\n\n        this.analogPins.push(0, 1, 2, 3);\n\n        this.io.i2cWrite(this.address, state.control);\n\n        this.name = \"PCF8591\";\n        this.isReady = true;\n\n        this.emit(\"connect\");\n        this.emit(\"ready\");\n      }\n    },\n    normalize: {\n      value: function(pin) {\n        if (typeof pin === \"string\" && pin[0] === \"A\") {\n          return +pin.slice(1);\n        }\n        return pin;\n      }\n    },\n    pinMode: {\n      value: function(pin, mode) {\n        this.pins[pin].mode = mode;\n      }\n    },\n    analogRead: {\n      value: function(pin, callback) {\n        var state = priv.get(this);\n        var pinIndex = pin;\n\n        this.pins[pinIndex].report = 1;\n\n        this.on(\"analog-read-\" + pin, callback);\n\n        // Since this operation will read all 4 pins,\n        // it only needs to be initiated once.\n        if (!state.reading) {\n          state.reading = true;\n\n          this.io.i2cRead(this.address, 4, function(data) {\n            var value;\n            for (var i = 0; i < 4; i++) {\n              value = data[i] << 2;\n              this.pins[i].value = value;\n\n              if (this.pins[i].report) {\n                this.emit(\"analog-read-\" + i, value);\n              }\n            }\n          }.bind(this));\n        }\n      }\n    },\n  },\n  MUXSHIELD2: {\n    initialize: {\n      value: function() {\n        var state = priv.get(this);\n\n        // _S[\\d]   (Digital: 2, 4, 6, 7)\n        state.select = [2, 4, 6, 7];\n        // _IOS[\\d] (Digital: 10, 11, 12)\n        state.ios = [null, 10, 11, 12];\n        // _IO[\\d]  (Analog In: \"A0\", \"A1\", \"A2\")\n        state.io = [null, 14, 15, 16];\n        state.aio = [null, 0, 1, 2];\n\n        state.outMode = 8;\n        state.pinMap = {};\n        state.rowReading = [false, false, false];\n        state.rowMode = [null, null, null];\n        // Each rowValue is a single uint16\n        state.rowValues = [0, 0, 0];\n\n        Object.assign(this.MODES, {\n          INPUT: 0,\n          OUTPUT: 1,\n          ANALOG: 2,\n        });\n\n        this.io.pinMode(state.select[0], this.MODES.OUTPUT);\n        this.io.pinMode(state.select[1], this.MODES.OUTPUT);\n        this.io.pinMode(state.select[2], this.MODES.OUTPUT);\n        this.io.pinMode(state.select[3], this.MODES.OUTPUT);\n\n        this.io.pinMode(state.outMode, this.MODES.OUTPUT);\n        this.io.digitalWrite(state.outMode, this.LOW);\n\n        this.io.pinMode(state.ios[1], this.MODES.OUTPUT);\n        this.io.pinMode(state.ios[2], this.MODES.OUTPUT);\n        this.io.pinMode(state.ios[3], this.MODES.OUTPUT);\n\n        var row = 1;\n        var mask = 16;\n        var index = 0;\n\n        for (var i = 0; i < 48; i++) {\n          var band = i & mask;\n\n          if (band === mask) {\n            row++;\n            mask *= 2;\n            index = 0;\n          }\n\n          state.pinMap[\"IO\" + row + \"-\" + index] = i;\n\n          this.pins.push({\n            row: row,\n            index: index,\n            supportedModes: [\n              this.MODES.INPUT,\n              this.MODES.OUTPUT,\n              this.MODES.ANALOG,\n            ],\n            mode: 1,\n            value: 0,\n            report: 0,\n            analogChannel: i\n          });\n\n          this.analogPins.push(i);\n\n          // TODO: Not sure about this?\n          // this.io.pinMode(i, this.MODES.OUTPUT);\n          // this.io.digitalWrite(i, this.LOW);\n\n          index++;\n        }\n\n        this.name = \"MUXSHIELD2\";\n        this.isReady = true;\n\n        this.emit(\"connect\");\n        this.emit(\"ready\");\n      }\n    },\n    normalize: {\n      value: function(pin) {\n        return pin;\n      }\n    },\n    pinMode: {\n      value: function(pin, mode) {\n        var state = priv.get(this);\n        var pinIndex = state.pinMap[pin];\n\n        if (pinIndex === undefined) {\n          throw new Error(\"MUXSHIELD2: Invalid Pin number or name: \" + pin);\n        }\n\n        var row = this.pins[pinIndex].row;\n        var rowModeIndex = row - 1;\n        var rowMode = state.rowMode[rowModeIndex];\n\n        if (rowMode === mode) {\n          return this;\n        }\n\n        if (rowMode !== null && rowMode !== mode) {\n          throw new Error(\"MUXSHIELD2: Cannot set mixed modes per IO row.\");\n        }\n\n        state.rowMode[rowModeIndex] = mode;\n\n        // MUXSHIELD2 Disallows mixing modes per row.\n        // Once a mode is set for a given pin in a given row,\n        // set all the pins in that row to the same mode.\n        for (var i = 0; i < 16; i++) {\n          this.pins[rowModeIndex + i].mode = mode;\n        }\n\n        var IO = state.io[row];\n        var IOS = state.ios[row];\n\n        if (mode === this.MODES.INPUT) {\n          // Read an analog input as digital\n          this.io.pinMode(IO, this.MODES.INPUT);\n          // this.io.digitalWrite(IOS, this.LOW);\n        }\n\n        if (mode === this.MODES.OUTPUT) {\n          this.io.pinMode(IO, this.MODES.OUTPUT);\n          this.io.digitalWrite(IOS, this.HIGH);\n        }\n      }\n    },\n    digitalWrite: {\n      value: function(pin, value) {\n        var state = priv.get(this);\n        var pinIndex = state.pinMap[pin];\n\n        if (pinIndex === undefined) {\n          throw new Error(\"MUXSHIELD2: Invalid Pin number or name: \" + pin);\n        }\n\n        var row = this.pins[pinIndex].row;\n        var rowValueIndex = row - 1;\n        var rowValue = state.rowValues[rowValueIndex];\n\n        var ioPin = row - 1;\n        var offset = ioPin * 16;\n        var channel = pinIndex - offset;\n\n        if (value) {\n          rowValue |= 1 << channel;\n        } else {\n          rowValue &= ~(1 << channel);\n        }\n\n        this.io.digitalWrite(state.select[3], this.LOW);\n        this.io.digitalWrite(state.outMode, this.HIGH);\n\n        var S = state.select[row - 1];\n        var IO = state.io[row];\n\n        for (var i = 15; i >= 0; i--) {\n          this.io.digitalWrite(S, this.LOW);\n          this.io.digitalWrite(IO, (rowValue >> i) & 1);\n          this.io.digitalWrite(S, this.HIGH);\n        }\n\n        this.io.digitalWrite(state.select[3], this.HIGH);\n        this.io.digitalWrite(state.outMode, this.LOW);\n\n        this.pins[pinIndex].value = value;\n\n        state.rowValues[rowValueIndex] = rowValue;\n      }\n    },\n    digitalRead: {\n      value: function(pin, callback) {\n        this.ioRead(\"digital\", pin, callback);\n      }\n    },\n    analogRead: {\n      value: function(pin, callback) {\n        this.ioRead(\"analog\", pin, callback);\n      }\n    },\n    ioRead: {\n      value: function(type, pin, callback) {\n        var state = priv.get(this);\n        var pinIndex = state.pinMap[pin];\n\n        if (pinIndex === undefined) {\n          throw new Error(\"MUXSHIELD2: Invalid Pin number or name: \" + pin);\n        }\n\n        this.on(type + \"-read-\" + pinIndex, callback);\n\n        var isAnalog = type === \"analog\" ? true : false;\n        var row = this.pins[pinIndex].row;\n        var rowReadingIndex = row - 1;\n        var offset = rowReadingIndex * 16;\n        var channel = pinIndex - offset;\n\n        this.pins[pinIndex].report = 1;\n        this.pins[pinIndex].channel = channel;\n        this.pins[pinIndex].ioPin = isAnalog ? rowReadingIndex : rowReadingIndex + 14;\n\n        var nextPinIndex = function() {\n          var startAt = nextPinIndex.lastPinIndex + 1;\n\n          for (var i = startAt; i < this.pins.length; i++) {\n            if (this.pins[i].report === 1) {\n              nextPinIndex.lastPinIndex = i;\n              return nextPinIndex.lastPinIndex;\n            }\n          }\n\n          nextPinIndex.lastPinIndex = -1;\n\n          return nextPinIndex();\n        }.bind(this);\n\n        nextPinIndex.lastPinIndex = -1;\n\n        var handler = function(value) {\n          var pinIndex = nextPinIndex.lastPinIndex;\n          var pin = this.pins[pinIndex];\n\n          this.emit(type + \"-read-\" + pinIndex, value);\n\n          this.io.removeListener(type + \"-read-\" + pin.ioPin, handler);\n\n          setTimeout(read, 10);\n        }.bind(this);\n\n        var read = function() {\n          var pinIndex = nextPinIndex();\n          var pin = this.pins[pinIndex];\n\n          this.select(pin.channel);\n\n          if (isAnalog) {\n            this.io.pinMode(pin.ioPin, this.io.MODES.ANALOG);\n            this.io.analogRead(pin.ioPin, handler);\n          } else {\n            this.io.digitalRead(pin.ioPin, handler);\n          }\n        }.bind(this);\n\n        if (!state.rowReading[rowReadingIndex]) {\n          state.rowReading[rowReadingIndex] = true;\n          read();\n        }\n      }\n    },\n\n\n    select: {\n      value: function(channel) {\n        var state = priv.get(this);\n        this.io.digitalWrite(state.outMode, this.LOW);\n        this.io.digitalWrite(state.select[0], (channel & 1));\n        this.io.digitalWrite(state.select[1], (channel & 3) >> 1);\n        this.io.digitalWrite(state.select[2], (channel & 7) >> 2);\n        this.io.digitalWrite(state.select[3], (channel & 15) >> 3);\n      }\n    }\n  },\n\n  GROVEPI: {\n    ADDRESSES: {\n      value: [0x04]\n    },\n    REGISTER: {},\n    COMMANDS: {\n      value: {\n        DIGITAL_READ: 0x01,\n        DIGITAL_WRITE: 0x02,\n        ANALOG_READ: 0x03,\n        ANALOG_WRITE: 0x04,\n        PIN_MODE: 0x05,\n        PING_READ: 0x07,\n      }\n    },\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n\n        state.isReading = false;\n        state.pinMap = {\n          D2: 2,\n          D3: 3,\n          D4: 4,\n          D5: 5,\n          D6: 6,\n          D7: 7,\n          D8: 8,\n          A0: 14,\n          A1: 15,\n          A2: 16,\n        };\n\n        // Override the relevant default \"isType\" methods\n        this.isPwm = function(name) {\n          var number = typeof name === \"number\" ? name : parseInt(name[1]);\n          return number === 3 || number === 5 || number === 6;\n        };\n\n        this.address = opts.address || this.ADDRESSES[0];\n        opts.address = this.address;\n\n        this.io.i2cConfig(opts);\n\n        Object.assign(this.MODES, this.io.MODES);\n\n        var analogChannel;\n\n        for (var i = 0; i < 17; i++) {\n          analogChannel = 127;\n\n          if (i <= 1 || (i >= 9 && i < 14)) {\n            // There are no connections for:\n            // O, 1, 9, 10, 11, 12, 13\n            this.pins.push({\n              supportedModes: [],\n              mode: 0,\n              value: 0,\n              report: 0,\n              analogChannel: analogChannel\n            });\n          } else {\n\n            this.pins.push({\n              supportedModes: [\n                this.MODES.INPUT,\n                this.MODES.OUTPUT,\n              ],\n              mode: 0,\n              value: 0,\n              report: 0,\n              analogChannel: analogChannel\n            });\n\n            // Digital pins with PWM Support\n            // D3, D5, D6\n            if (this.isPwm(i)) {\n              this.pins[i].supportedModes.push(\n                this.MODES.PWM\n              );\n            }\n\n            if (i >= 14 && i <= 17) {\n              // A0 = 0 = 14\n              // A1 = 1 = 15\n              // A2 = 2 = 16\n              //\n              // 14 is the analog offset\n              this.pins[i].analogChannel = i - 14;\n\n              // Add ANALOG \"read\" mode\n              this.pins[i].supportedModes.push(\n                this.MODES.ANALOG\n              );\n\n              this.analogPins.push(i);\n\n              // Default all analog IO pins to\n              // ANALOG \"read\"\n              this.pinMode(\"A\" + this.pins[i].analogChannel, this.MODES.ANALOG);\n            } else {\n              // Default all digital IO pins to\n              // OUTPUT and LOW\n              this.pinMode(\"D\" + i, this.MODES.OUTPUT);\n              this.digitalWrite(\"D\" + i, this.LOW);\n            }\n          }\n        }\n\n        this.name = \"GROVEPI\";\n        this.isReady = true;\n\n        this.emit(\"connect\");\n        this.emit(\"ready\");\n      }\n    },\n    normalize: {\n      value: function(pin) {\n        return pin;\n      }\n    },\n\n    pinMode: {\n      value: function(pin, mode) {\n        var state = priv.get(this);\n        var pinIndex = state.pinMap[pin];\n\n        if (mode === this.io.MODES.INPUT ||\n          mode === this.io.MODES.ANALOG) {\n          this.pins[pinIndex].mode = 0;\n        } else {\n          this.pins[pinIndex].mode = 1;\n        }\n\n        this.io.i2cWrite(\n          this.address, [\n            this.COMMANDS.PIN_MODE,\n            pinIndex,\n            this.pins[pinIndex].mode,\n            0\n          ]\n        );\n      }\n    },\n\n    digitalWrite: {\n      value: function(pin, value) {\n        var state = priv.get(this);\n        var pinIndex = state.pinMap[pin];\n\n        // Any truthy value is converted to HIGH (1)\n        value = value ? 1 : 0;\n\n        this.io.i2cWrite(\n          this.address, [\n            this.COMMANDS.DIGITAL_WRITE,\n            pinIndex,\n            value,\n            0\n          ]\n        );\n\n        this.pins[pinIndex].value = value;\n      }\n    },\n\n    ioRead: {\n      value: function(pin, type, callback) {\n        var state = priv.get(this);\n        var pinIndex = state.pinMap[pin];\n        var isAnalog = type === \"analog\";\n        var length = isAnalog ? 3 : 1;\n        var command = isAnalog ? this.COMMANDS.ANALOG_READ : this.COMMANDS.DIGITAL_READ;\n\n        this.on(type + \"-read-\" + pinIndex, callback);\n\n        this.pins[pinIndex].report = 1;\n        this.pins[pinIndex].command = command;\n        this.pins[pinIndex].type = type;\n        this.pins[pinIndex].length = length;\n\n        var nextPinIndex = function() {\n          var startAt = nextPinIndex.lastPinIndex + 1;\n\n          for (var i = startAt; i < this.pins.length; i++) {\n            if (this.pins[i].report === 1) {\n              nextPinIndex.lastPinIndex = i;\n              return nextPinIndex.lastPinIndex;\n            }\n          }\n\n          nextPinIndex.lastPinIndex = -1;\n\n          return nextPinIndex();\n        }.bind(this);\n\n        nextPinIndex.lastPinIndex = -1;\n\n        var handler = function(pinIndex, value) {\n          var pin = this.pins[pinIndex];\n          var canEmit = true;\n\n          if (pin.type === \"digital\" && this.pins[pinIndex].value === value) {\n            canEmit = false;\n          }\n\n          this.pins[pinIndex].value = value;\n\n          if (canEmit) {\n            this.emit(pin.type + \"-read-\" + pinIndex, value);\n          }\n\n          setTimeout(read, 1);\n        }.bind(this);\n\n        var read = function() {\n          var pinIndex = nextPinIndex();\n          var pin = this.pins[pinIndex];\n          var isAnalog = pin.type === \"analog\";\n\n          this.io.i2cWrite(this.address, [pin.command, pinIndex, 0, 0]);\n          this.io.i2cReadOnce(this.address, pin.length, function(data) {\n            var value;\n\n            if (isAnalog) {\n              value = (data[1] << 8) + data[2];\n            } else {\n              value = data[0];\n            }\n            handler(pinIndex, value);\n          }.bind(this));\n        }.bind(this);\n\n        if (!state.isReading) {\n          state.isReading = true;\n          read();\n        }\n      }\n    },\n\n    digitalRead: {\n      value: function(pin, callback) {\n        this.ioRead(pin, \"digital\", callback);\n      },\n    },\n    analogRead: {\n      value: function(pin, callback) {\n        this.ioRead(pin, \"analog\", callback);\n      },\n    },\n    pingRead: {\n      value: function(settings, callback) {\n        var state = priv.get(this);\n        var pinIndex = state.pinMap[settings.pin];\n\n        this.io.i2cWrite(\n          this.address, [\n            this.COMMANDS.PING_READ,\n            pinIndex,\n            0, 0\n          ]\n        );\n\n        setTimeout(function() {\n          this.once(\"ping-read-\" + settings.pin, callback);\n\n          this.io.i2cReadOnce(this.address, 3, function(data) {\n            // The GrovePi firmware sends this value in CM\n            // so the value must be converted back to duration.\n            var value = Math.round(((data[1] << 8) + data[2]) * 29 * 2);\n\n            this.pins[pinIndex].value = value;\n            this.emit(\"ping-read-\" + settings.pin, value);\n          }.bind(this));\n        }.bind(this), 200);\n      },\n    },\n    analogWrite: {\n      value: function(pin, value) {\n        this.pwmWrite(pin, value);\n      }\n    },\n    pwmWrite: {\n      writable: true,\n      value: function(pin, value) {\n        var state = priv.get(this);\n        var pinIndex = state.pinMap[pin];\n\n        value = Board.constrain(value, 0, 255);\n\n        this.io.i2cWrite(\n          this.address, [\n            this.COMMANDS.ANALOG_WRITE,\n            pinIndex,\n            value,\n            0\n          ]\n        );\n\n        this.pins[pinIndex].value = value;\n      }\n    }\n  },\n  \"74HC595\": {\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n\n        if (!opts.pins.data) {\n          throw new Error(\"Expected pins.data\");\n        }\n\n        if (!opts.pins.clock) {\n          throw new Error(\"Expected pins.clock\");\n        }\n\n        if (!opts.pins.latch) {\n          throw new Error(\"Expected pins.latch\");\n        }\n\n        state.data = opts.pins.data;\n        state.clock = opts.pins.clock;\n        state.latch = opts.pins.latch;\n        state.value = 0x00;\n\n        Object.assign(this.MODES, this.io.MODES);\n\n        // Reset pins property to empty array.\n        this.pins = [];\n\n        for (var i = 0; i < 8; i++) {\n          this.pins.push({\n            supportedModes: [\n              this.MODES.OUTPUT\n            ],\n            mode: 1,\n            value: 0,\n            report: 0,\n            analogChannel: 127\n          });\n        }\n\n        this.portWrite(0, state.value);\n\n        this.name = \"74HC595\";\n        this.isReady = true;\n\n        this.emit(\"connect\");\n        this.emit(\"ready\");\n      }\n    },\n    normalize: {\n      value: function(pin) {\n        return pin;\n      }\n    },\n    pinMode: {\n      value: function(pin, mode) {\n        this.pins[pin].mode = mode;\n      }\n    },\n    digitalWrite: {\n      value: function(pin, value) {\n        var state = priv.get(this);\n\n        if (value) {\n          state.value |= 1 << pin;\n        } else {\n          state.value &= ~(1 << pin);\n        }\n\n        this.pins[pin].value = value;\n\n        this.portWrite(0, state.value);\n      }\n    },\n    portWrite: {\n      writable: true,\n      configurable: true,\n      value: function(port, value) {\n        var state = priv.get(this);\n\n        state.value = value;\n\n        this.board.digitalWrite(state.latch, this.io.LOW);\n        this.board.shiftOut(state.data, state.clock, true, state.value);\n        this.board.digitalWrite(state.latch, this.io.HIGH);\n\n        for (var i = 0; i < 8; i++) {\n          this.pins[i].value = (state.value >> i) & 1;\n        }\n      }\n    },\n  },\n  CD74HC4067: {\n    /*\n    | Address 1 (D9) |  Address 0 (D8) | Address |\n    | -------------- |  -------------- | ------- |\n    | 0              |  0              | 0x0A    |\n    | 0              |  1              | 0x0B    |\n    | 1              |  0              | 0x0C    |\n    | 1              |  1              | 0x0D    |\n    */\n    ADDRESSES: {\n      value: [0x0A, 0x0B, 0x0C, 0x0D]\n    },\n    REGISTER: {},\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n\n        state.reading = false;\n\n        this.address = opts.address || this.ADDRESSES[0];\n\n        opts.address = this.address;\n        this.io.i2cConfig(opts);\n\n        Object.assign(this.MODES, this.io.MODES);\n\n        for (var i = 0; i < 16; i++) {\n          this.pins.push({\n            supportedModes: [\n              this.MODES.ANALOG\n            ],\n            mode: 1,\n            value: 0,\n            report: 0,\n            analogChannel: i\n          });\n          this.analogPins.push(i);\n        }\n\n        this.name = \"CD74HC4067\";\n        this.isReady = true;\n\n        this.emit(\"connect\");\n        this.emit(\"ready\");\n      }\n    },\n    normalize: {\n      value: function(pin) {\n        if (typeof pin === \"string\" && pin[0] === \"A\") {\n          return +pin.slice(1);\n        }\n        return pin;\n      }\n    },\n    pinMode: {\n      value: function(pin, mode) {\n        this.pins[pin].mode = mode;\n      }\n    },\n    analogRead: {\n      value: function(pin, callback) {\n        var state = priv.get(this);\n        var pinIndex = pin;\n\n        this.pins[pinIndex].report = 1;\n\n        this.on(\"analog-read-\" + pin, callback);\n\n        this.io.i2cWrite(this.address, pinIndex, 1);\n\n        // Since this operation will read all 4 pins,\n        // it only needs to be initiated once.\n        if (!state.reading) {\n          state.reading = true;\n\n          this.io.i2cRead(this.address, 32, function(data) {\n            var value;\n            for (var i = 0; i < 16; i++) {\n              var index = i * 2;\n\n              value = (data[index] << 8) + data[index + 1];\n\n              this.pins[i].value = value;\n\n              if (this.pins[i].report) {\n                this.emit(\"analog-read-\" + i, value);\n              }\n            }\n          }.bind(this));\n        }\n      }\n    },\n  },\n\n  LIS3DH: {\n    ADDRESSES: {\n      value: [0x18]\n    },\n    REGISTER: {\n      value: {\n        // Page 26\n        // Table 17. Register address map\n        //\n        // NAME:  BYTE\n        OUT_ADC1_L: 0x08,\n        OUT_X_L: 0x28,\n        CTRL_REG1: 0x20,\n        CTRL_REG2: 0x21,\n        CTRL_REG3: 0x22,\n        CTRL_REG4: 0x23,\n        CTRL_REG5: 0x24,\n\n        TEMP_CFG_REG: 0x1F,\n      },\n    },\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n\n        state.reading = false;\n\n        this.address = opts.address || this.ADDRESSES[0];\n\n        opts.address = this.address;\n\n        this.io.i2cConfig(opts);\n\n\n        // Page 29\n        // 8.8 CTRL_REG1\n        // Table 24. CTRL_REG1 register\n        //\n        // ODR3 ODR2 ODR1 ODR0 LPen Zen Yen Xen\n        //\n        //\n        // Enable Axis\n        // 0b00000111\n        //        ZYX\n        //\n        var ctrl1 = 0x07; // 0b00000111\n        //\n        // Date Rate\n        // Table 26. Data rate configuration\n        //\n        // ODR3 ODR2 ODR1 ODR0 Power mode selection\n        // 0 0 0 1 = 1 Hz\n        // 0 0 1 0 = 10 Hz\n        // 0 0 1 1 = 25 Hz\n        // 0 1 0 0 = 50 Hz\n        // 0 1 0 1 = 100 Hz\n        // 0 1 1 0 = 200 Hz\n        // 0 1 1 1 = 400 Hz\n        //\n        // 0b0111 << 4 = 0b01110000\n        //\n        ctrl1  = (ctrl1 & ~(0xF0)) | (0x07 << 4);\n\n        // ctrl1 = 0b01110111\n        // 0b01110000 = 0x70 = 112\n        this.io.i2cWrite(this.address, this.REGISTER.CTRL_REG1, ctrl1);\n\n        // Page 31\n        // 8.11 CTRL_REG4\n        //\n        // Table 32. CTRL_REG4 register\n        //\n        // BDU BLE FS1 FS0 HR ST1 ST0 SIM\n        //\n        // BDU  Block data update. Default value: 0\n        //      0: Continuous update\n        //      1: Updated when MSB and LSB read\n        //\n        // HR   High resolution output mode: Default value: 0\n        //      0: Disable\n        //      1: Enable\n        //\n        // Setting BDU and HR:\n        // 0b1---1---\n        //\n        // 0b10001000 = 0x88 = 136\n        //\n        this.io.i2cWrite(this.address, this.REGISTER.CTRL_REG4, 0x88);\n        //\n        // Page 31\n        // 8.10 CTRL_REG3\n        //\n        // I1_DRDY1 -> ON\n        //\n        // 0b00010000 = 0x10 = 16\n        this.io.i2cWrite(this.address, this.REGISTER.CTRL_REG3, 0x10);\n\n        Object.assign(this.MODES, this.io.MODES);\n\n        for (var i = 0; i < 4; i++) {\n          if (i === 0) {\n            this.pins.push({\n              supportedModes: [],\n              mode: 0,\n              value: 0,\n              report: 0,\n              analogChannel: 0x7F\n            });\n          } else {\n            this.pins.push({\n              supportedModes: [ this.MODES.ANALOG ],\n              mode: 1,\n              value: 0,\n              report: 0,\n              analogChannel: i\n            });\n            this.analogPins.push(i);\n          }\n        }\n\n        this.name = \"LIS3DH\";\n        this.isReady = true;\n\n        this.emit(\"connect\");\n        this.emit(\"ready\");\n      },\n    },\n    normalize: {\n      value: function(pin) {\n        if (typeof pin === \"string\" && pin[0] === \"A\") {\n          return +pin.slice(1);\n        }\n        return pin;\n      },\n    },\n    pinMode: {\n      value: function(pin, mode) {\n        this.pins[pin].mode = mode;\n      },\n    },\n    analogRead: {\n      value: function(pin, callback) {\n        var state = priv.get(this);\n        var pinIndex = pin;\n\n        this.pins[pinIndex].report = 1;\n\n        this.on(\"analog-read-\" + pin, callback);\n\n        // Since this operation will read all 3 ADC pins,\n        // it only needs to be initiated once.\n        if (!state.reading) {\n          state.reading = true;\n\n          // Page 29\n          // 8.7 TEMP_CFG_REG (1Fh)\n          // Table 23. TEMP_CFG_REG description\n          //\n          // ADC_PD TEMP_EN 0 0 0 0 0 0\n          //\n          // 0b10000000 = 128 = 0x80\n          //\n          this.io.i2cWrite(this.address, this.REGISTER.TEMP_CFG_REG, 0x80);\n\n          // Page 23, 24, 25\n          // bit 1: MS bit. When 0, the address remains unchanged in multiple read/write commands.\n          // When 1, the address is auto incremented in multiple read/write commands.\n          this.io.i2cRead(this.address, this.REGISTER.OUT_ADC1_L | 0x80, 6, function(data) {\n            // V range is 900\n\n            // First, scale the value to range that these ADCs support, which is\n            //\n            // 1.8V - 0.9V\n            //\n            // Then, scale that value to the full 10-bit 0-3.3V range\n            //\n            this.pins[1].value = Fn.scale(Fn.int16(data[1], data[0]), -32512, 32512, 1023, 0);\n            this.pins[2].value = Fn.scale(Fn.int16(data[3], data[2]), -32512, 32512, 1023, 0);\n            this.pins[3].value = Fn.scale(Fn.int16(data[5], data[4]), -32512, 32512, 1023, 0);\n\n            for (var i = 1; i < 4; i++) {\n              if (this.pins[i].report) {\n                this.emit(\"analog-read-\" + i, this.pins[i].value);\n              }\n            }\n          }.bind(this));\n        }\n      },\n    },\n    i2cConfig: {\n      value: function() {\n        return this.io.i2cConfig.apply(this.io, arguments);\n      },\n    },\n    i2cWrite: {\n      value: function() {\n        return this.io.i2cWrite.apply(this.io, arguments);\n      },\n    },\n    i2cWriteReg: {\n      value: function() {\n        return this.io.i2cWriteReg.apply(this.io, arguments);\n      },\n    },\n    i2cRead: {\n      value: function() {\n        return this.io.i2cRead.apply(this.io, arguments);\n      },\n    },\n    i2cReadOnce: {\n      value: function() {\n        return this.io.i2cReadOnce.apply(this.io, arguments);\n      },\n    },\n  },\n\n  ADS1115: {\n    ADDRESSES: {\n      value: [0x48, 0x49, 0x4A, 0x4B]\n    },\n    REGISTER: {\n      value: {\n        CONFIG: 0x01,\n        READ: 0x00,\n        PIN: [0xC1, 0xD1, 0xE1, 0xF1],\n        PIN_DATA: 0x83,\n      }\n    },\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n\n        state.reading = false;\n\n        this.address = opts.address || this.ADDRESSES[0];\n\n        opts.address = this.address;\n        this.io.i2cConfig(opts);\n\n        Object.assign(this.MODES, this.io.MODES);\n\n        for (var i = 0; i < 4; i++) {\n          this.pins.push({\n            supportedModes: [\n              this.MODES.ANALOG\n            ],\n            mode: 1,\n            value: 0,\n            report: 0,\n            analogChannel: i\n          });\n          this.analogPins.push(i);\n        }\n\n        this.name = \"ADS1115\";\n        this.isReady = true;\n\n        this.emit(\"connect\");\n        this.emit(\"ready\");\n      }\n    },\n    normalize: {\n      value: function(pin) {\n        if (typeof pin === \"string\" && pin[0] === \"A\") {\n          return +pin.slice(1);\n        }\n        return pin;\n      }\n    },\n    pinMode: {\n      value: function(pin, mode) {\n        this.pins[pin].mode = mode;\n      }\n    },\n    analogRead: {\n      value: function(pin, callback) {\n        var state = priv.get(this);\n        this.pins[pin].report = 1;\n\n        var ready = false;\n\n        this.on(\"analog-read-\" + pin, callback);\n\n        // Since this operation will read all 4 pins,\n        // it only needs to be initiated once.\n        if (!state.reading) {\n          state.reading = true;\n\n          // CONVERSION DELAY\n          var delay = function () {\n            setTimeout(function () {\n              ready = true;\n            }, 8);\n          };\n\n          this.io.i2cWrite(this.address, this.REGISTER.CONFIG, [this.REGISTER.PIN[pin], this.REGISTER.PIN_DATA]);\n          delay();\n\n          this.io.i2cRead(this.address, this.REGISTER.READ, 2, function(data) {\n            if (ready) {\n              ready = false;\n\n              var newPin = pin === this.pins.length - 1 ? 0 : pin + 1;\n\n              this.io.i2cWrite(this.address, this.REGISTER.CONFIG, [this.REGISTER.PIN[newPin], this.REGISTER.PIN_DATA]);\n\n              var value = (data[0] << 8) + data[1];\n              this.pins[pin].value = value;\n\n              if (this.pins[pin].report) {\n                this.emit(\"analog-read-\" + pin, value);\n              }\n\n              pin = newPin;\n\n              delay();\n            }\n          }.bind(this));\n        }\n      }\n    },\n  }\n};\n\nControllers[\"CD74HCT4067\"] = Controllers.CD74HC4067;\nControllers[\"74HC4067\"] = Controllers.CD74HC4067;\n\nControllers.PCF8574A = Object.assign({}, Controllers.PCF8574, {\n  ADDRESSES: {\n    value: [0x38]\n  }\n});\n\nvar methods = Object.keys(Board.prototype);\n\nObject.keys(Controllers).forEach(function(name) {\n  methods.forEach(function(key) {\n    if (Controllers[name][key] === undefined) {\n      Controllers[name][key] = {\n        writable: true,\n        configurable: true,\n        value: function() {\n          throw new Error(\"Expander:\" + name + \" does not support \" + key);\n        }\n      };\n    }\n  });\n});\n\nvar nonAddressable = [\n  \"74HC595\"\n];\n\nfunction Expander(opts) {\n  if (!(this instanceof Expander)) {\n    return new Expander(opts);\n  }\n\n  Base.call(this);\n\n  var expander = null;\n  var addressError = \"Expander cannot reuse an active address\";\n  var controller = null;\n  var state = {};\n  var controllerValue;\n\n  if (typeof opts === \"string\") {\n    controllerValue = opts;\n  }\n\n  Board.Component.call(\n    this, opts = Board.Options(opts), {\n      normalizePin: false,\n      requestPin: false\n    }\n  );\n\n  if (nonAddressable.includes(opts.controller) &&\n      typeof this.address === \"undefined\") {\n    this.address = Fn.uid();\n  }\n\n  expander = active.get(this.address);\n\n  if (expander) {\n    if (this.bus && (expander.bus !== undefined && expander.bus === this.bus)) {\n      addressError += \" on this bus\";\n    }\n    throw new Error(addressError);\n  }\n\n  if (typeof opts.controller === \"undefined\" && controllerValue) {\n    opts.controller = controllerValue;\n  }\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    throw new Error(\"Expander expects a valid controller\");\n  }\n\n  Board.Controller.call(this, controller, opts);\n\n  priv.set(this, state);\n\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts);\n  }\n\n  active.set(this.address, this);\n}\n\nutil.inherits(Expander, Base);\n\n\nExpander.get = function(required) {\n\n  if (!required.address || !required.controller) {\n    throw new Error(\"Expander.get(...) requires an address and controller\");\n  }\n\n  if (required.address !== undefined) {\n    required.address = Number(required.address);\n  }\n\n  if (Number.isNaN(required.address)) {\n    throw new Error(\"Expander.get(...) expects address to be a number\");\n  }\n\n  if (typeof required.controller !== \"string\") {\n    throw new Error(\"Expander.get(...) expects controller name to be a string\");\n  }\n\n  // If no address was sent them assume the request wants\n  // to re-use an active Expander, by controller name.\n  // if (!required.address) {\n  //   return Expander.byController(required.controller);\n  // }\n\n  var expander = active.get(required.address);\n\n  if (expander && (expander.name === required.controller.toUpperCase())) {\n    return expander;\n  }\n\n  return new Expander(required);\n};\n\nExpander.byAddress = function(address) {\n  return active.get(address);\n};\n\nExpander.byController = function(name) {\n  var controller = null;\n\n  active.forEach(function(value) {\n    if (value.name === name.toUpperCase()) {\n      controller = value;\n    }\n  });\n  return controller;\n};\n\nExpander.hasController = function(key) {\n  return Controllers[key] !== undefined;\n};\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Expander.Controllers = Controllers;\n  Expander.purge = function() {\n    priv.clear();\n    active.clear();\n  };\n}\n\nmodule.exports = Expander;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/expander.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/fn.js":
/*!********************************************!*\
  !*** ./node_modules/johnny-five/lib/fn.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Fn = {\n  debounce: __webpack_require__(/*! lodash.debounce */ \"./node_modules/lodash.debounce/index.js\"),\n  cloneDeep: __webpack_require__(/*! lodash.clonedeep */ \"./node_modules/lodash.clonedeep/index.js\"),\n};\n\n/**\n * Format a number such that it has a given number of digits after the\n * decimal point.\n *\n * @param {Number} number - The number to format\n * @param {Number} [digits = 0] - The number of digits after the decimal point\n * @return {Number} Formatted number\n * @example\n * Fn.toFixed(5.4564, 2); // -> 5.46\n * @example\n * Fn.toFixed(1.5, 2); // -> 1.5\n */\nFn.toFixed = function(number, digits) {\n  // Guard against error when number is null or undefined\n  // Cast result as number\n  return +(number || 0).toFixed(digits);\n};\n\n\n/**\n * Map a value (number) from one range to another. Based on Arduino's map().\n *\n * @param {Number} value    - value to map\n * @param {Number} fromLow  - low end of originating range\n * @param {Number} fromHigh - high end of originating range\n * @param {Number} toLow    - low end of target range\n * @param {Number} toHigh   - high end of target range\n * @return {Number} mapped value (integer)\n * @example\n * Fn.map(500, 0, 1000, 0, 255); // ->\n */\n\nFn.map = function(value, fromLow, fromHigh, toLow, toHigh) {\n  return ((value - fromLow) * (toHigh - toLow) / (fromHigh - fromLow) + toLow) | 0;\n};\n// Alias\nFn.scale = Fn.map;\n\n/**\n * Like map, but returns a Float32\n *\n * For @param info, @see Fn.map\n * @return {Float32}\n */\nvar f32A = new Float32Array(1);\n\nFn.fmap = function(value, fromLow, fromHigh, toLow, toHigh) {\n  f32A[0] = (value - fromLow) * (toHigh - toLow) / (fromHigh - fromLow) + toLow;\n  return f32A[0];\n};\n// Alias\nFn.fscale = Fn.fmap;\n\n/**\n * Constrains a number to be within a range. Based on Arduino's constrain()\n *\n * @param {Number} value\n * @param {Number} lower - lower bound of range for constraint\n * @param {Number} upper - upper bound of range for constraint\n * @return {Number | NaN} constrained number or NaN if any of the provided\n *   parameters are not a {Number}.\n */\nFn.constrain = function(value, lower, upper) {\n  return Math.min(upper, Math.max(lower, value));\n};\n\n/**\n * Is value between the bounds of lower and upper?\n *\n * @param {Number} value\n * @param {Number} lower - Lower end of bounds to check\n * @param {Number} upper - Upper ends of bounds to check\n * @return {Boolean}\n */\nFn.inRange = function(value, lower, upper) {\n  return value >= lower && value <= upper;\n};\n\n/**\n * Generate an Array of Numbers with values between lower and upper; the\n * step (increment/decrement) between each defined by tick.\n *\n * @param {Number} lower - The value of the lowest element in the resulting\n *                         Array. If `Fn.range` invoked with only one\n *                         argument, this parameter will instead define the\n *                         length of the Array, which will start from 0.\n * @param {Number} upper - The value of the final element of the Array.\n * @param {Number} [tick = 1] - The difference between each element in the\n *                              Array. This value may be negative.\n * @return {Array} of {Numbers}\n *\n * @example\n * Fn.range(5, 10); // -> [5, 6, 7, 8, 9, 10];\n * @example\n * Fn.range(5); // -> [0, 1, 2, 3, 4];\n * @example\n * Fn.range(3, 27, 3); // -> [3, 6, 9, 12, 15, 18, 21, 24, 27];\n * @example\n * Fn.range(0, -9, -3); // -> [0, -3, -6, -9];\n */\nFn.range = function(lower, upper, tick) {\n\n  if (arguments.length === 1) {\n    upper = lower - 1;\n    lower = 0;\n  }\n\n  lower = lower || 0;\n  upper = upper || 0;\n  tick = tick || 1;\n\n  var len = Math.max(Math.ceil((upper - lower) / tick), 0),\n    idx = 0,\n    range = [];\n\n  while (idx <= len) {\n    range[idx++] = lower;\n    lower += tick;\n  }\n\n  return range;\n};\n\n/**\n * Adds prefix to each element in the range Array returned by Fn.range.\n *\n * Fn.range.prefixed( prefix, upper )\n * Fn.range.prefixed( prefix, lower, upper )\n * Fn.range.prefixed( prefix, lower, upper, tick )\n *\n * @param {*} prefix - You probably want to use a string, but you don't have to.\n * @return Array per range parameters, each element prefixed.\n * @see Fn.range\n * @example\n * Fn.range.prefixed(\"A\", 0, 10, 2); // -> [\"A0\", \"A2\", \"A4\", \"A6\", \"A8\", \"A10\"]\n */\nFn.range.prefixed = function(prefix) {\n  return Fn.range.apply(null, [].slice.call(arguments, 1)).map(function(val) {\n    return prefix + val;\n  });\n};\n\n/**\n * Generate a reasonably-unique ID string\n *\n * @return {String} - 36-character random-ish string\n */\nFn.uid = function() {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(chr) {\n    var rnd = Math.random() * 16 | 0;\n    return (chr === \"x\" ? rnd : (rnd & 0x3 | 0x8)).toString(16);\n  }).toUpperCase();\n};\n\n\n/**\n * Square your x!\n *\n * @param {Number} x\n * @return {Number| Nan} - x^2—unless you were goofy enough to provide a\n *   non-numeric x, in which case it's NaN for you!\n */\nFn.square = function(x) {\n  return x * x;\n};\n\n/**\n * Get a sum for all the values in an Array. This works best if the elements\n * in the Array are Numbers.\n *\n * @param {Array} values\n * @return {Number | String} - You probably want a Number so you'll want to\n *                             pass a values Array entirely consisting of\n *                             numeric elements.\n */\nFn.sum = function sum(values) {\n  var vals;\n  if (Array.isArray(values)) {\n    vals = values;\n  } else {\n    vals = [].slice.call(arguments);\n  }\n  return vals.reduce(function(accum, value) {\n    return accum + value;\n  }, 0);\n};\n\n/**\n * Fused multiply-add for precise floating-point calculations.\n */\n// fma function\n// Copyright (c) 2012, Jens Nockert\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n//  1. Redistributions of source code must retain the above copyright notice,\n//     this list of conditions and the following disclaimer.\n//  2. Redistributions in binary form must reproduce the above copyright notice,\n//     this list of conditions and the following disclaimer in the documentation\n//     and/or other materials provided with the distribution.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n// POSSIBILITY OF SUCH DAMAGE.\n//\nFn.fma = function(a, b, c) {\n  var aHigh = 134217729 * a;\n  var aLow;\n\n  aHigh = aHigh + (a - aHigh);\n  aLow = a - aHigh;\n\n  var bHigh = 134217729 * b;\n  var bLow;\n\n  bHigh = bHigh + (b - bHigh);\n  bLow = b - bHigh;\n\n  var r1 = a * b;\n  var r2 = -r1 + aHigh * bHigh + aHigh * bLow + aLow * bHigh + aLow * bLow;\n\n  var s = r1 + c;\n  var t = (r1 - (s - c)) + (c - (s - r1));\n\n  return s + (t + r2);\n};\n// end fma function copyright\n\n/**\n * Return a value with the bit at the position indicated set (to 1).\n * From avr/io.h \"BV\" => Bit Value\n *\n * An example: logically OR these bits together:\n * var ORed = _BV(0) | _BV(2) | _BV(7);\n *\n * BIT         7  6  5  4  3  2  1  0\n * ---------------------------------------------------------\n * _BV(0)  =   0  0  0  0  0  0  0  1\n * _BV(2)  =   0  0  0  0  0  1  0  0\n * _BV(7)  =   1  0  0  0  0  0  0  0\n * ORed    =   1  0  0  0  0  1  0  1\n *\n * ORed === 133;\n *\n * @param {Number} bit - bit position to set\n * @return {Number}\n * @example\n * Fn.bitValue(0); // --> 1\n * @example\n * Fn.bitValue(4); // --> 16\n *\n */\nFn._BV = Fn.bitValue = Fn.bv = function(bit) {\n  return 1 << bit;\n};\n\n/**\n * int16 Combine two bytes to make an signed 16-bit integer\n * @param  {byte} msb   Most signifcant byte\n * @param  {byte} lsb   Least signifcant byte\n * @return {word}       Signed 16-bit integer\n */\nFn.int16 = function(msb, lsb) {\n  var result = (msb << 8) | lsb;\n\n  // Check highest bit for sign. If on, value is negative\n  return result >> 15 ? ((result ^ 0xFFFF) + 1) * -1 : result;\n};\n\n/**\n * uint16 Combine two bytes to make an unsigned 16-bit integer\n * @param  {byte} msb   Most signifcant byte\n * @param  {byte} lsb   Least signifcant byte\n * @return {word}       unsigned 16-bit integer\n */\nFn.uint16 = function(msb, lsb) {\n  return (msb << 8) | lsb;\n};\n\n/**\n * int24 Combine three bytes to make a signed 24-bit integer\n * @param  {byte} b16   b[16:23]\n * @param  {byte} b8    b[8:15]\n * @param  {byte} b0    b[0:7]\n * @return {word}       Signed 24-bit integer\n */\nFn.int24 = function(b16, b8, b0) {\n  var result = (b16 << 16) | (b8 << 8) | b0;\n\n  // Check highest bit for sign. If on, value is negative\n  return result >> 23 ? ((result ^ 0xFFFFFF) + 1) * -1 : result;\n};\n\n/**\n * uint24 Combine three bytes to make an unsigned 24-bit integer\n * @param  {byte} b16   b[16:23]\n * @param  {byte} b8    b[8:15]\n * @param  {byte} b0    b[0:7]\n * @return {word}       Unsigned 24-bit integer\n */\nFn.uint24 = function(b16, b8, b0) {\n  return (b16 << 16) | (b8 << 8) | b0;\n};\n\n/**\n * int32 Combine four bytes to make a signed 24-bit integer\n * @param  {byte} b24   b[24:31]\n * @param  {byte} b16   b[16:23]\n * @param  {byte} b8    b[8:15]\n * @param  {byte} b0    b[0:7]\n * @return {word}       Signed 32-bit integer\n */\nFn.int32 = function(b24, b16, b8, b0) {\n  var result = (b24 << 24) | (b16 << 16) | (b8 << 8) | b0;\n  // Check highest bit for sign. If on, value is negative\n  return result >> 31 ? ((result ^ 0xFFFFFFFF) + 1) * -1 : result;\n};\n\n/**\n * int32 Combine four bytes to make an unsigned 32-bit integer\n * @param  {byte} b24   b[24:31]\n * @param  {byte} b16   b[16:23]\n * @param  {byte} b8    b[8:15]\n * @param  {byte} b0    b[0:7]\n * @return {Number}       unsigned 32-bit integer\n */\nFn.uint32 = function(b24, b16, b8, b0) {\n  // Note: If you left-shift a byte by 24 in JS and that byte's\n  // MSbit is 1, the resulting value will be negative because JS casts\n  // bitwise operands (temporarily) to SIGNED 32-bit numbers. The\n  // final >>> 0 causes the sign bit to be disregarded, making sure our\n  // result is non-negative.\n  return ((b24 << 24) | (b16 << 16) | (b8 << 8) | b0) >>> 0;\n};\n\n/**\n * bitSize Get the number of bits in a given number\n * @param  {number} n   The number to evaluate\n * @return {number}     The bit count\n */\nFn.bitSize = function(n) {\n  return Math.round(Math.log2(n));\n};\n\n/**\n * The following generates functions and constants for utility when working\n * with binary numbers:\n *   - Fn.POW_2_0 through Fn.POW_2_53\n *   - Fn.u4(value) through Fn.u32(value)\n *   - Fn.s4(value) through Fn.s32(value)\n */\nvar POW = \"POW_2_\";\nvar U = \"u\";\nvar S = \"s\";\nvar MAX = Fn.bitSize(Number.MAX_SAFE_INTEGER) + 1;\nvar bitSizes = [ 4, 8, 10, 12, 16, 20, 24, 32 ];\n\n/**\n * Generate \"constants\" that represent powers of 2. Available for powers\n * 0 through 53.\n * @example\n * Fn.POW_2_17; // -> 131072\n */\nfor (var i = 0; i < MAX; i++) {\n  Fn[POW + i] = Math.pow(2, i);\n}\n\nbitSizes.forEach(function(bitSize) {\n  var decimal = Fn[POW + bitSize];\n  var half = decimal / 2 >>> 0;\n  var halfMinusOne = half - 1;\n\n  /**\n   * The function Fn[\"u\" + bitSize] will constrain a value to an unsigned\n   * value of that bit size.\n   *\n   * @param {Number} value\n   * @return {Number} constrained to an unsigned int\n   * @example\n   * Fn.u8(255); // --> 255\n   * Fn.u8(256); // --> 255\n   * Fn.u8(-255); // --> 0\n   * Fn.u8(-254); // -- 1\n   */\n  Fn[U + bitSize] = function(value) {\n    if (value < 0) {\n      value += decimal;\n    }\n    return Fn.constrain(value, 0, decimal - 1);\n  };\n\n  /**\n   * The function Fn[\"s\" + bitSize] will constrain a value to a signed value\n   * of that bit size. Remember that, e.g., range for signed 8-bit numbers\n   * is -128 to 127.\n   *\n   * @param {Number} value\n   * @return {Number} constrained to a SIGNED integer in bitsize range\n   * @example\n   * Fn.s8(100); // --> 100\n   * Fn.s8(128); // --> -128\n   * Fn.s8(127); // --> 127\n   * Fn.s8(255); // --> -1\n   */\n  Fn[S + bitSize] = function(value) {\n    if (value > halfMinusOne) {\n      value -= decimal;\n    }\n    return Fn.constrain(value, -half, halfMinusOne);\n  };\n});\n/*\n  Fn.POW_2_0   => 1\n  Fn.POW_2_1   => 2\n  Fn.POW_2_2   => 4\n  Fn.POW_2_3   => 8\n  Fn.POW_2_4   => 16\n  Fn.POW_2_5   => 32\n  Fn.POW_2_6   => 64\n  Fn.POW_2_7   => 128\n  Fn.POW_2_8   => 256\n  Fn.POW_2_9   => 512\n  Fn.POW_2_10  => 1024\n  Fn.POW_2_11  => 2048\n  Fn.POW_2_12  => 4096\n  Fn.POW_2_13  => 8192\n  Fn.POW_2_14  => 16384\n  Fn.POW_2_15  => 32768\n  Fn.POW_2_16  => 65536\n  Fn.POW_2_17  => 131072\n  Fn.POW_2_18  => 262144\n  Fn.POW_2_19  => 524288\n  Fn.POW_2_20  => 1048576\n  Fn.POW_2_21  => 2097152\n  Fn.POW_2_22  => 4194304\n  Fn.POW_2_23  => 8388608\n  Fn.POW_2_24  => 16777216\n  Fn.POW_2_25  => 33554432\n  Fn.POW_2_26  => 67108864\n  Fn.POW_2_27  => 134217728\n  Fn.POW_2_28  => 268435456\n  Fn.POW_2_29  => 536870912\n  Fn.POW_2_30  => 1073741824\n  Fn.POW_2_31  => 2147483648\n  Fn.POW_2_32  => 4294967296\n  Fn.POW_2_33  => 8589934592\n  Fn.POW_2_34  => 17179869184\n  Fn.POW_2_35  => 34359738368\n  Fn.POW_2_36  => 68719476736\n  Fn.POW_2_37  => 137438953472\n  Fn.POW_2_38  => 274877906944\n  Fn.POW_2_39  => 549755813888\n  Fn.POW_2_40  => 1099511627776\n  Fn.POW_2_41  => 2199023255552\n  Fn.POW_2_42  => 4398046511104\n  Fn.POW_2_43  => 8796093022208\n  Fn.POW_2_44  => 17592186044416\n  Fn.POW_2_45  => 35184372088832\n  Fn.POW_2_46  => 70368744177664\n  Fn.POW_2_47  => 140737488355328\n  Fn.POW_2_48  => 281474976710656\n  Fn.POW_2_49  => 562949953421312\n  Fn.POW_2_50  => 1125899906842624\n  Fn.POW_2_51  => 2251799813685248\n  Fn.POW_2_52  => 4503599627370496\n  Fn.POW_2_53  => 9007199254740992\n\n  Fn.u4(value) => 4-bit Unsigned Integer\n  Fn.s4(value) => 4-bit Signed Integer\n\n  Fn.u8(value) => 8-bit Unsigned Integer\n  Fn.s8(value) => 8-bit Signed Integer\n\n  Fn.u10(value) => 10-bit Unsigned Integer\n  Fn.s10(value) => 10-bit Signed Integer\n\n  Fn.u12(value) => 12-bit Unsigned Integer\n  Fn.s12(value) => 12-bit Signed Integer\n\n  Fn.u16(value) => 16-bit Unsigned Integer\n  Fn.s16(value) => 16-bit Signed Integer\n\n  Fn.u20(value) => 20-bit Unsigned Integer\n  Fn.s20(value) => 20-bit Signed Integer\n\n  Fn.u24(value) => 24-bit Unsigned Integer\n  Fn.s24(value) => 24-bit Signed Integer\n\n  Fn.u32(value) => 32-bit Unsigned Integer\n  Fn.s32(value) => 32-bit Signed Integer\n\n}\n*/\n\nFn.RAD_TO_DEG = 180 / Math.PI;\nFn.DEG_TO_RAD = Math.PI / 180;\nFn.TAU = 2 * Math.PI;\n\nmodule.exports = Fn;\n\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/fn.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/gps.js":
/*!*********************************************!*\
  !*** ./node_modules/johnny-five/lib/gps.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process, Buffer) {var events = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\n\nvar Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\");\nvar Fn = __webpack_require__(/*! ./fn */ \"./node_modules/johnny-five/lib/fn.js\");\nvar Pin = __webpack_require__(/*! ./pin */ \"./node_modules/johnny-five/lib/pin.js\");\n\nvar toFixed = Fn.toFixed;\n\n\nvar priv = new Map();\n\nvar Breakouts = {\n\n  /*\n   * https://www.adafruit.com/products/746\n   */\n  ADAFRUIT_ULTIMATE_GPS: {\n    receiver: {\n      value: \"FGPMMOPA6H\"\n    }\n  }\n\n};\n\n// GPS Antenna Modules\nvar Receivers = {\n\n  /*\n   * http://www.gtop-tech.com/en/product/LadyBird-1-PA6H/MT3339_GPS_Module_04.html\n   */\n  FGPMMOPA6H: {\n    // Later, when we add logging that code will go here\n    chip: {\n      value: \"MT3339\"\n    }\n  }\n\n};\n\n// GPS chips\nvar Chips = {\n\n  DEFAULT: {\n    baud: {\n      value: 9600,\n      writable: true\n    },\n    configure: {\n      value: function(callback) {\n        process.nextTick(callback);\n      }\n    }\n  },\n\n  /*\n   * http://www.mediatek.com/en/products/connectivity/gps/mt3339/\n   */\n  MT3339: {\n    baud: {\n      value: 9600,\n      writable: true\n    },\n    configure: {\n      value: function(callback) {\n        process.nextTick(callback);\n      }\n    },\n    frequency: {\n      get: function() {\n        var state = priv.get(this);\n        return state.frequency;\n      },\n      set: function(frequency) {\n        var state = priv.get(this);\n\n        // Enforce maximum frequency of 10hz\n        if (frequency < 10) {\n          frequency = 10;\n        }\n\n        state.frequency = frequency;\n        this.sendCommand(\"$PMTK220,\" + String(1000 / state.frequency));\n      }\n    },\n    restart: {\n      // Reboot the receiver\n      value: function(coldRestart) {\n\n        if (coldRestart === true) {\n          this.sendCommand(\"$PMTK103\");\n        } else {\n          this.sendCommand(\"$PMTK101\");\n          setTimeout(function() {\n            this.sendCommand(\"\");\n          }.bind(this), 1000);\n        }\n\n      }\n    }\n  }\n\n};\n\n\n/**\n *\n * @constructor\n *\n * @param {Object} opts Options: pin(s), chip, receiver, breakout, fixed, serialport, frequency\n *\n * Sample initialization\n *\n *    new five.GPS({ pins: {rx: 10, tx: 11});\n *\n */\n\nfunction GPS(opts) {\n\n  var breakout, receiver, chip, state;\n\n  if (!(this instanceof GPS)) {\n    return new GPS(opts);\n  }\n\n  // Allow users to pass in a 2 element array for rx and tx pins\n  if (Array.isArray(opts)) {\n    opts = {\n      pins: {\n        rx: opts[0],\n        tx: opts[1],\n        onOff: opts[2]\n      }\n    };\n  }\n\n  if (typeof opts.pins === \"undefined\") {\n    opts.pins = {};\n  }\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n\n\n  // Get user values for breakout, receiver and chip\n  breakout = opts.breakout || {};\n  receiver = opts.receiver;\n  chip = opts.chip;\n\n  // If a breakout is defined check for receiver and chip\n  if (Breakouts[breakout]) {\n    if (!receiver && Breakouts[breakout].receiver) {\n      receiver = Breakouts[breakout].receiver.value;\n    }\n\n    if (!chip && Breakouts[breakout].chip) {\n      chip = Breakouts[breakout].chip.value;\n    }\n  }\n\n  // If a receiver was defined or derived but chip was not\n  if (!chip) {\n    if (receiver && Receivers[receiver].chip) {\n      chip = Receivers[receiver].chip.value;\n    } else {\n      chip = \"DEFAULT\";\n    }\n  }\n\n  // Allow users to pass in custom chip types\n  chip = typeof chip === \"string\" ?\n    Chips[chip] : opts.chip;\n\n  // Allow users to pass in custom receiver types\n  receiver = typeof receiver === \"string\" ?\n    Receivers[receiver] : opts.receiver;\n\n  // Chip decorates the instance\n  Object.defineProperties(this, chip);\n\n  // Receiver decorates this instance\n  if (receiver) {\n    Object.defineProperties(this, receiver);\n  }\n\n  // breakout decorates the instance\n  if (opts.breakout) {\n    breakout = typeof opts.breakout === \"string\" ?\n      Breakouts[opts.breakout] : opts.breakout;\n\n    Board.Controller.call(this, breakout, opts);\n  }\n\n  // If necessary set default property values\n  this.fixed = opts.fixed || 6;\n  this.baud = opts.baud || this.baud;\n\n  // Create a \"state\" entry for privately\n  // storing the state of the instance\n  state = {\n    sat: {},\n    latitude: 0.0,\n    longitude: 0.0,\n    altitude: 0.0,\n    speed: 0.0,\n    course: 0.0,\n    frequency: 1,\n    lowPowerMode: false\n  };\n\n  priv.set(this, state);\n\n  // Getters for private state values\n  Object.defineProperties(this, {\n    latitude: {\n      get: function() {\n        return state.latitude;\n      }\n    },\n    longitude: {\n      get: function() {\n        return state.longitude;\n      }\n    },\n    altitude: {\n      get: function() {\n        return state.altitude;\n      }\n    },\n    sat: {\n      get: function() {\n        return state.sat;\n      }\n    },\n    speed: {\n      get: function() {\n        return state.speed;\n      }\n    },\n    course: {\n      get: function() {\n        return state.course;\n      }\n    },\n    time: {\n      get: function() {\n        return state.time;\n      }\n    }\n  });\n\n  if (this.initialize) {\n    this.initialize(opts);\n  }\n\n}\n\nutil.inherits(GPS, events.EventEmitter);\n\n/*\n * Default intialization for serial GPS\n */\nGPS.prototype.initialize = function(opts) {\n\n  var state = priv.get(this);\n  state.portId = opts.serialPort || opts.portId || opts.port || opts.bus || this.io.SERIAL_PORT_IDs.DEFAULT;\n\n  // Set the pin modes\n  [\"tx\", \"rx\"].forEach(function(pin) {\n    if (this.pins[pin]) {\n      this.io.pinMode(this.pins[pin], this.io.MODES.SERIAL);\n    }\n  }, this);\n\n  if (this.pins.onOff) {\n    this.io.pinMode(this.pins.onOff, this.io.MODES.OUTPUT);\n    this.onOff = new Pin(this.pins.onOff);\n  }\n\n  this.io.serialConfig({\n    portId: state.portId,\n    baud: this.baud,\n    rxPin: this.pins.rx,\n    txPin: this.pins.tx\n  });\n\n  if (this.configure) {\n    this.configure(function() {\n      this.listen();\n      if (opts.frequency) {\n        this.frequency = opts.frequency;\n      }\n    }.bind(this));\n  }\n\n};\n\nGPS.prototype.sendCommand = function(string) {\n\n  var state = priv.get(this);\n  var cc = [];\n\n  // Convert the string to a charCode array\n  for (var i = 0; i < string.length; ++i) {\n    cc[i] = string.charCodeAt(i);\n  }\n\n  // Append *, checksum and cr/lf\n  var hexsum = getNmeaChecksum(string.substring(1));\n  cc.push(42, hexsum.charCodeAt(0), hexsum.charCodeAt(1), 13, 10);\n\n  this.io.serialWrite(state.portId, cc);\n};\n\nGPS.prototype.listen = function() {\n\n  var state = priv.get(this);\n  var input = \"\";\n\n  // Start the read loop\n  this.io.serialRead(state.portId, function(data) {\n\n    input += new Buffer(data).toString(\"ascii\");\n    var sentences = input.split(\"\\r\\n\");\n\n    if (sentences.length > 1) {\n      for (var i = 0; i < sentences.length - 1; i++) {\n        this.parseNmeaSentence(sentences[i]);\n      }\n      input = sentences[sentences.length - 1];\n    }\n  }.bind(this));\n};\n\n/*\n * NMEA Sentence Information\n * http://aprs.gids.nl/nmea\n */\nGPS.prototype.parseNmeaSentence = function(sentence) {\n\n  var state = priv.get(this);\n  var cksum = sentence.split(\"*\");\n\n  // Check for valid sentence\n  if (cksum[1] !== getNmeaChecksum(cksum[0].substring(1))) {\n    return;\n  }\n\n  this.emit(\"sentence\", sentence);\n\n  var segments = cksum[0].split(\",\");\n  var last = {\n    latitude: state.latitude,\n    longitude: state.longitude,\n    altitude: state.altitude,\n    speed: state.speed,\n    course: state.course\n  };\n\n  switch (segments[0]) {\n    case \"$GPGGA\":\n      // Time, position and fix related data\n      state.time = segments[1];\n      state.latitude = degToDec(segments[2], 2, segments[3], this.fixed);\n      state.longitude = degToDec(segments[4], 3, segments[5], this.fixed);\n      state.altitude = Number(segments[9]);\n      break;\n\n    case \"$GPGSA\":\n      // Operating details\n      state.sat.satellites = segments.slice(3, 15);\n      state.sat.pdop = Number(segments[15]);\n      state.sat.hdop = Number(segments[16]);\n      state.sat.vdop = Number(segments[17]);\n      this.emit(\"operations\", sentence);\n      break;\n\n    case \"$GPRMC\":\n      // GPS & Transit data\n      state.time = segments[1];\n      state.latitude = degToDec(segments[3], 2, segments[4], this.fixed);\n      state.longitude = degToDec(segments[5], 3, segments[6], this.fixed);\n      state.course = Number(segments[8]);\n      state.speed = toFixed(segments[7] * 0.514444, this.fixed);\n      break;\n\n    case \"$GPVTG\":\n      // Track Made Good and Ground Speed\n      state.course = Number(segments[1]);\n      state.speed = toFixed(segments[5] * 0.514444, this.fixed);\n      break;\n\n    case \"$GPGSV\":\n      // Satellites in view\n      break;\n\n    case \"$PGACK\":\n      // Acknowledge command\n      this.emit(\"acknowledge\", sentence);\n      break;\n\n    default:\n      this.emit(\"unknown\", sentence);\n      break;\n  }\n\n  this.emit(\"data\", {\n    latitude: state.latitude,\n    longitude: state.longitude,\n    altitude: state.altitude,\n    speed: state.speed,\n    course: state.course,\n    sat: state.sat,\n    time: state.time\n  });\n\n  if (last.latitude !== state.latitude ||\n    last.longitude !== state.longitude ||\n    last.altitude !== state.altitude) {\n\n    this.emit(\"change\", {\n      latitude: state.latitude,\n      longitude: state.longitude,\n      altitude: state.altitude\n    });\n  }\n\n  if (last.speed !== state.speed ||\n    last.course !== state.course) {\n\n    this.emit(\"navigation\", {\n      speed: state.speed,\n      course: state.course\n    });\n  }\n\n};\n\n// Convert Lat or Lng to decimal degrees\nfunction degToDec(degrees, intDigitsLength, cardinal, fixed) {\n  if (degrees) {\n    var decimal = Number(degrees.substring(0, intDigitsLength)) + Number(degrees.substring(intDigitsLength)) / 60;\n\n    if (cardinal === \"S\" || cardinal === \"W\") {\n      decimal *= -1;\n    }\n    return Number(decimal.toFixed(fixed));\n  } else {\n    return 0;\n  }\n}\n\nfunction getNmeaChecksum(string) {\n  var cksum = 0x00;\n  for (var i = 0; i < string.length; ++i) {\n    cksum ^= string.charCodeAt(i);\n  }\n  cksum = cksum.toString(16).toUpperCase();\n\n  if (cksum.length < 2) {\n    cksum = (\"00\" + cksum).slice(-2);\n  }\n\n  return cksum;\n}\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  GPS.Breakouts = Breakouts;\n  GPS.Chips = Chips;\n  GPS.Receivers = Receivers;\n  GPS.purge = function() {\n    priv.clear();\n  };\n}\nmodule.exports = GPS;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./../../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/gps.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/gripper.js":
/*!*************************************************!*\
  !*** ./node_modules/johnny-five/lib/gripper.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Servo = __webpack_require__(/*! ./servo */ \"./node_modules/johnny-five/lib/servo.js\"),\n  __ = __webpack_require__(/*! ./fn */ \"./node_modules/johnny-five/lib/fn.js\");\n\n/**\n * Gripper\n *\n * Supports:\n *   [Parallax Boe-Bot gripper](http://www.parallax.com/Portals/0/Downloads/docs/prod/acc/GripperManual-v3.0.pdf)\n *\n *   [DFRobot LG-NS](http://www.dfrobot.com/index.php?route=product/product&filter_name=gripper&product_id=628#.UCvGymNST_k)\n *\n *\n * @param {[type]} servo [description]\n */\n\nfunction Gripper(opts) {\n\n  if (!(this instanceof Gripper)) {\n    return new Gripper(opts);\n  }\n\n  // Default options mode, assume only when opts is a pin number\n  if (typeof opts === \"number\") {\n    opts = {\n      servo: {\n        pin: opts,\n        range: [0, 180]\n      },\n      scale: [0, 10]\n    };\n  }\n\n  // Default set() args to 0-10\n  this.scale = opts.scale || [0, 10];\n\n  // Setup servo\n  // Allows pre-constructed servo or creating new servo.\n  // Defaults for new Servo creation fall back to Servo defaults\n  this.servo = opts.servo instanceof Servo ?\n    opts.servo : new Servo(opts.servo);\n}\n\n[\n  /**\n   * open Open the gripper\n   *\n   * @return {Object} this\n   */\n  {\n    name: \"open\",\n    args: function() {\n      return this.servo.range[0];\n    }\n  },\n  /**\n   * close Close the gripper\n   *\n   * @return {Object} this\n   */\n  {\n    name: \"close\",\n    args: function() {\n      return this.servo.range[1];\n    }\n  },\n  /**\n   * set Set the gripper's open width\n   *\n   * @param  {Number} 0-10, 0 is closed, 10 is open\n   *\n   * @return {Object} this\n   */\n  {\n    name: \"set\",\n    args: function(position) {\n      // Map/Scale position value to a value within\n      // the servo's lo/hi range\n      return Math.floor(\n        __.map(\n          position,\n          this.scale[0], this.scale[1],\n          this.servo.range[1], this.servo.range[0]\n        )\n      );\n    }\n  }\n].forEach(function(api) {\n  Gripper.prototype[api.name] = function() {\n    return this.servo.to(\n      api.args.apply(this, [].slice.call(arguments))\n    );\n  };\n});\n\nmodule.exports = Gripper;\n\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/gripper.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/gyro.js":
/*!**********************************************!*\
  !*** ./node_modules/johnny-five/lib/gyro.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\");\nvar events = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\nvar Fn = __webpack_require__(/*! ./fn */ \"./node_modules/johnny-five/lib/fn.js\");\n\nvar sum = Fn.sum;\nvar toFixed = Fn.toFixed;\n\nvar priv = new Map();\nvar axes = [\"x\", \"y\", \"z\"];\n\nvar Controllers = {\n  ANALOG: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var pins = opts.pins || [],\n          sensitivity, resolution,\n          state = priv.get(this),\n          dataPoints = {};\n\n        if (opts.sensitivity === undefined) {\n          throw new Error(\"Expected a Sensitivity\");\n        }\n\n        // 4.88mV / (0.167mV/dps * 2)\n        // 0.67 = 4X\n        // 0.167 = 1X\n        sensitivity = opts.sensitivity;\n        resolution = opts.resolution || 4.88;\n        state.K = resolution / sensitivity;\n\n        pins.forEach(function(pin, index) {\n          this.io.pinMode(pin, this.io.MODES.ANALOG);\n          this.io.analogRead(pin, function(data) {\n            var axis = axes[index];\n            dataPoints[axis] = data;\n            dataHandler(dataPoints);\n          }.bind(this));\n        }, this);\n      }\n    },\n    toNormal: {\n      value: function(raw) {\n        return raw >> 2;\n      }\n    },\n    toDegreesPerSecond: {\n      value: function(raw, rawCenter) {\n        var normal = this.toNormal(raw);\n        var center = this.toNormal(rawCenter);\n        var state = priv.get(this);\n\n        return ((normal - center) * state.K) | 0;\n      }\n    }\n  },\n  // http://www.invensense.com/mems/gyro/mpu6050.html\n  // Default to the +- 250 which has a 131 LSB/dps\n  MPU6050: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var IMU = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var state = priv.get(this),\n          driver = IMU.Drivers.get(this.board, \"MPU6050\", opts);\n\n        state.sensitivity = opts.sensitivity || 131;\n\n        driver.on(\"data\", function(data) {\n          dataHandler(data.gyro);\n        });\n      }\n    },\n    toNormal: {\n      value: function(raw) {\n        return (raw >> 11) + 127;\n      }\n    },\n    toDegreesPerSecond: {\n      // Page 12, Paragraph 6.1\n      // Sensitivity scale factor\n      // FS_SEL=0    131 LSB/dps -> 0,007633588 dps/LSB\n      // FS_SEL=1    65.5 LSB/dps -> 0,015267176 dps/LSB\n      // FS_SEL=2    32.8 LSB/dps -> 0,00304878 dps/LSB\n      // FS_SEL=3    16.4 LSB/dps -> 0,06097561 dps/LSB\n      // Using 4 digits resolution\n      value: function(raw, rawCenter) {\n        var state = priv.get(this);\n\n        return toFixed((raw - rawCenter) / state.sensitivity, 4);\n      }\n    }\n  },\n  BNO055: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var IMU = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var state = priv.get(this),\n          driver = IMU.Drivers.get(this.board, \"BNO055\", opts);\n\n        // AF p.14, OUTPUT SIGNAL GYROSCOPE, set this to 16 as according to AF.51 the default for the unit register\n        // is degrees. and there may be a bug in the Ada fruit code as it has the setting to radians disabled\n        // but the sensitivity / scale set to 900 which is used for radian reps\n        state.sensitivity = 16;\n\n        driver.on(\"data\", function(data) {\n          dataHandler(data.gyro);\n        });\n      }\n    },\n    toNormal: {\n      value: function(raw) {\n        return raw;\n      }\n    },\n    toDegreesPerSecond: {\n      // Page 33, Table 3-22\n      // Gyroscope unit settings 1dps = 16 LSB -> resolution 0,0625 dps with +=2000 dps range\n      value: function(raw) {\n        var state = priv.get(this);\n        return toFixed(raw / state.sensitivity, 4);\n      }\n    }\n  },\n};\n\nfunction Gyro(opts) {\n  if (!(this instanceof Gyro)) {\n    return new Gyro(opts);\n  }\n\n  var controller = null;\n  var isCalibrated = false;\n  var sampleSize = 100;\n\n  var state = {\n    x: {\n      angle: 0,\n      value: 0,\n      previous: 0,\n      calibration: [],\n      stash: [0, 0, 0, 0, 0],\n      center: 0,\n      hasValue: false\n    },\n    y: {\n      angle: 0,\n      value: 0,\n      previous: 0,\n      calibration: [],\n      stash: [0, 0, 0, 0, 0],\n      center: 0,\n      hasValue: false\n    },\n    z: {\n      angle: 0,\n      value: 0,\n      previous: 0,\n      calibration: [],\n      stash: [0, 0, 0, 0, 0],\n      center: 0,\n      hasValue: false\n    }\n  };\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    controller = Controllers.ANALOG;\n  }\n\n  Board.Controller.call(this, controller, opts);\n\n  if (!this.toNormal) {\n    this.toNormal = opts.toNormal || function(raw) {\n      return raw;\n    };\n  }\n\n  if (!this.toDegreesPerSecond) {\n    this.toDegreesPerSecond = opts.toDegreesPerSecond || function(raw) {\n      return raw;\n    };\n  }\n\n  priv.set(this, state);\n\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts, function(data) {\n      var isChange = false;\n\n      Object.keys(data).forEach(function(axis) {\n        var value = data[axis];\n        var sensor = state[axis];\n\n        sensor.previous = sensor.value;\n        sensor.stash.shift();\n        sensor.stash.push(value);\n        sensor.hasValue = true;\n        sensor.value = (sum(sensor.stash) / 5) | 0;\n\n        if (!isCalibrated &&\n          (state.x.calibration.length === sampleSize &&\n            state.y.calibration.length === sampleSize &&\n            (this.z === undefined || state.z.calibration.length === sampleSize))) {\n\n          isCalibrated = true;\n          state.x.center = (sum(state.x.calibration) / sampleSize) | 0;\n          state.y.center = (sum(state.y.calibration) / sampleSize) | 0;\n          state.z.center = (sum(state.z.calibration) / sampleSize) | 0;\n\n          state.x.calibration.length = 0;\n          state.y.calibration.length = 0;\n          state.z.calibration.length = 0;\n        } else {\n          if (sensor.calibration.length < sampleSize) {\n            sensor.calibration.push(value);\n          }\n        }\n\n        if (sensor.previous !== sensor.value) {\n          isChange = true;\n        }\n      }, this);\n\n      if (isCalibrated) {\n        state.x.angle += this.rate.x / 100;\n        state.y.angle += this.rate.y / 100;\n        state.z.angle += this.rate.z / 100;\n\n        this.emit(\"data\", {\n          x: this.x,\n          y: this.y,\n          z: this.z\n        });\n\n        if (isChange) {\n          this.emit(\"change\", {\n            x: this.x,\n            y: this.y,\n            z: this.z\n          });\n        }\n      }\n    }.bind(this));\n  }\n\n  Object.defineProperties(this, {\n    isCalibrated: {\n      get: function() {\n        return isCalibrated;\n      },\n      set: function(value) {\n        if (typeof value === \"boolean\") {\n          isCalibrated = value;\n        }\n      }\n    },\n    pitch: {\n      get: function() {\n        return {\n          rate: toFixed(this.rate.y, 2),\n          angle: toFixed(state.y.angle, 2)\n        };\n      }\n    },\n    roll: {\n      get: function() {\n        return {\n          rate: toFixed(this.rate.x, 2),\n          angle: toFixed(state.x.angle, 2)\n        };\n      }\n    },\n    yaw: {\n      get: function() {\n        return {\n          rate: this.z !== undefined ? toFixed(this.rate.z, 2) : 0,\n          angle: this.z !== undefined ? toFixed(state.z.angle, 2) : 0\n        };\n      }\n    },\n    x: {\n      get: function() {\n        return toFixed(this.toNormal(state.x.value), 4);\n      }\n    },\n    y: {\n      get: function() {\n        return toFixed(this.toNormal(state.y.value), 4);\n      }\n    },\n    z: {\n      get: function() {\n        return state.z.hasValue ? toFixed(this.toNormal(state.z.value), 4) : undefined;\n      }\n    },\n    rate: {\n      get: function() {\n        var x = this.toDegreesPerSecond(state.x.value, state.x.center);\n        var y = this.toDegreesPerSecond(state.y.value, state.y.center);\n        var z = state.z.hasValue ?\n          this.toDegreesPerSecond(state.z.value, state.z.center) : 0;\n\n        return {\n          x: x,\n          y: y,\n          z: z\n        };\n      }\n    }\n  });\n}\n\nObject.defineProperties(Gyro, {\n  TK_4X: {\n    value: 0.67\n  },\n  TK_1X: {\n    value: 0.167\n  }\n});\n\n\nutil.inherits(Gyro, events.EventEmitter);\n\nGyro.prototype.recalibrate = function() {\n  this.isCalibrated = false;\n};\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Gyro.Controllers = Controllers;\n  Gyro.purge = function() {\n    priv.clear();\n  };\n}\nmodule.exports = Gyro;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/gyro.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/hygrometer.js":
/*!****************************************************!*\
  !*** ./node_modules/johnny-five/lib/hygrometer.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\");\nvar Fn = __webpack_require__(/*! ./fn */ \"./node_modules/johnny-five/lib/fn.js\");\nvar Emitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\n\nvar toFixed = Fn.toFixed;\nvar priv = new Map();\n\nvar Controllers = {\n\n  SHT31D: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = Multi.Drivers.get(this.board, \"SHT31D\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.humidity);\n        });\n      }\n    },\n    toRelativeHumidity: {\n      value: function(raw) {\n        // Page 2, Table 1\n        // Based on the \"Relative Humidity Conversion\" formula\n        // 1.1 Humidity Sensor Performance\n        // Typical resoultion 0.01%RH\n        //\n        // Page 14\n        // 4.13 Conversion of Signal Output\n        // RH = 100 * (Srh / ((2 ** 26) - 1))\n        // Srh = Sensor raw humidity\n        return toFixed((100 * raw / 65535), 2);\n      }\n    }\n  },\n\n\n  HTU21D: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = Multi.Drivers.get(this.board, \"HTU21D\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.humidity);\n        });\n      }\n    },\n    toRelativeHumidity: {\n      value: function(raw) {\n        // Page 15\n        // CONVERSION OF SIGNAL OUTPUTS\n        // RH = -6 + 125 * (Srh / (2 ** 26))\n        // Srh = Sensor raw humidity\n        //\n        // Page 3, Table `SENSOR PERFORMANCE`\n        //\n        // Typical resolution 0.04 %RH\n        return toFixed((125 * raw / 65536) - 6, 2);\n      }\n    }\n  },\n\n  HIH6130: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = Multi.Drivers.get(this.board, \"HIH6130\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.humidity);\n        });\n      }\n    },\n    toRelativeHumidity: {\n      // Page 7, Table 2\n      // Typical resoultion 0.04%RH\n      value: function(raw) {\n        // Page 3\n        // Equation 1: Humidity Conversion Function\n        return toFixed(raw * 100 / (Fn.POW_2_14 - 1), 2);\n      }\n    }\n  },\n\n  DHT_I2C_NANO_BACKPACK: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = Multi.Drivers.get(this.board, \"DHT_I2C_NANO_BACKPACK\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.humidity);\n        });\n      }\n    },\n    toRelativeHumidity: {\n      // DHT11\n\n      // Page 4, Table\n      // Typical resolution 1%RH\n      //\n      // DHT21\n\n      // Page 2, Paragraph 5\n      // Resolution 0.1%RH\n      //\n      // DHT22\n\n      // Page 2, Paragraph 3\n      // Resolution 0.1%RH\n      value: function(raw) {\n        return toFixed(raw / 100, 1);\n      }\n    }\n  },\n\n  TH02: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = Multi.Drivers.get(this.board, \"TH02\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.humidity);\n        });\n      }\n    },\n    toRelativeHumidity: {\n      // Table 4\n      // Resolution 12bit (16 codes per %RH) -> ~ 2 fractional digits\n      value: function(raw) {\n        if (raw > 100) {\n          raw = 0;\n        }\n        return toFixed(raw || 0, 2);\n      }\n    }\n  },\n\n  SI7020: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = Multi.Drivers.get(this.board, \"SI7020\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.humidity);\n        });\n      }\n    },\n    toRelativeHumidity: {\n      value: function(raw) {\n        // Page 7, Table 4\n        // The device can have 12-bit resolution ~ 2 fractional digits (100 / 2^12)\n        //\n        // Humidity formula\n        // P. 22\n        return toFixed((125 * raw / 65536) - 6, 2);\n      }\n    }\n  },\n\n  BME280: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = Multi.Drivers.get(this.board, \"BME280\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.humidity);\n        });\n      }\n    },\n    toRelativeHumidity: {\n      value: function(raw) {\n        // Page 23\n        // 47445 / 1024 = 46.333 %RH\n        return toFixed(raw / 1024, 3);\n      }\n    }\n  }\n};\n\nControllers.DHT11_I2C_NANO_BACKPACK = Controllers.DHT_I2C_NANO_BACKPACK;\nControllers.DHT21_I2C_NANO_BACKPACK = Controllers.DHT_I2C_NANO_BACKPACK;\nControllers.DHT22_I2C_NANO_BACKPACK = Controllers.DHT_I2C_NANO_BACKPACK;\nControllers.SI7021 = Controllers.SI7020;\n\n\nfunction Hygrometer(opts) {\n  if (!(this instanceof Hygrometer)) {\n    return new Hygrometer(opts);\n  }\n\n  var controller = null;\n  var last = null;\n  var raw = null;\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  var freq = opts.freq || 25;\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    throw new Error(\"Missing Hygrometer controller\");\n  }\n\n  priv.set(this, {});\n\n  Board.Controller.call(this, controller, opts);\n\n  if (!this.toRelativeHumidity) {\n    this.toRelativeHumidity = opts.toRelativeHumidity || function(x) {\n      return x;\n    };\n  }\n\n  var propDescriptors = {\n    relativeHumidity: {\n      get: function() {\n        return this.toRelativeHumidity(raw);\n      }\n    }\n  };\n  // Convenience aliases\n  propDescriptors.RH = propDescriptors.relativeHumidity;\n\n  Object.defineProperties(this, propDescriptors);\n\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts, function(data) {\n      raw = data;\n    });\n  }\n\n  setInterval(function() {\n    if (raw == null) {\n      return;\n    }\n\n    if (Number.isNaN(this.relativeHumidity)) {\n      return;\n    }\n\n    var data = {};\n    data.RH = data.relativeHumidity = this.relativeHumidity;\n\n    this.emit(\"data\", data);\n\n    if (this.relativeHumidity !== last) {\n      last = this.relativeHumidity;\n      this.emit(\"change\", data);\n    }\n  }.bind(this), freq);\n}\n\nutil.inherits(Hygrometer, Emitter);\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Hygrometer.Controllers = Controllers;\n  Hygrometer.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = Hygrometer;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/hygrometer.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/imu.js":
/*!*********************************************!*\
  !*** ./node_modules/johnny-five/lib/imu.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\");\nvar Emitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\nvar Fn = __webpack_require__(/*! ./fn */ \"./node_modules/johnny-five/lib/fn.js\");\nvar int16 = Fn.int16;\nvar uint16 = Fn.uint16;\nvar uint24 = Fn.uint24;\nvar s32 = Fn.s32;\nvar u32 = Fn.u32;\n\nvar priv = new Map();\nvar activeDrivers = new Map();\n\n// TODO: make real const\nvar ACCELEROMETER = \"accelerometer\";\nvar ALTIMETER = \"altimeter\";\nvar BAROMETER = \"barometer\";\nvar GYRO = \"gyro\";\nvar HYGROMETER = \"hygrometer\";\nvar MAGNETOMETER = \"magnetometer\";\nvar ORIENTATION = \"orientation\";\nvar THERMOMETER = \"thermometer\";\n\n\nfunction Components(controller, options) {\n  var state = priv.get(this);\n  var descriptors = Object.create(null);\n\n  this.components.forEach(function(component) {\n\n    // TODO: Can this be put inside the get accessor?\n    // - Lazy init?\n    state[component] = new Components[component](\n      Object.assign({\n        controller: options.controller || controller,\n        freq: options.freq,\n        board: this.board,\n      }, options)\n    );\n\n    descriptors[component] = {\n      get: function() {\n        return state[component];\n      }\n    };\n\n    if (backwardCompatibilityGarbageHacks[component]) {\n      descriptors[backwardCompatibilityGarbageHacks[component]] = descriptors[component];\n    }\n  });\n\n  Object.defineProperties(this, descriptors);\n}\n\nComponents.accelerometer = __webpack_require__(/*! ./accelerometer */ \"./node_modules/johnny-five/lib/accelerometer.js\");\nComponents.altimeter = __webpack_require__(/*! ./altimeter */ \"./node_modules/johnny-five/lib/altimeter.js\");\nComponents.barometer = __webpack_require__(/*! ./barometer */ \"./node_modules/johnny-five/lib/barometer.js\");\nComponents.gyro = __webpack_require__(/*! ./gyro */ \"./node_modules/johnny-five/lib/gyro.js\");\nComponents.hygrometer = __webpack_require__(/*! ./hygrometer */ \"./node_modules/johnny-five/lib/hygrometer.js\");\nComponents.magnetometer = __webpack_require__(/*! ./compass */ \"./node_modules/johnny-five/lib/compass.js\");\nComponents.orientation = __webpack_require__(/*! ./orientation */ \"./node_modules/johnny-five/lib/orientation.js\");\nComponents.thermometer = __webpack_require__(/*! ./thermometer */ \"./node_modules/johnny-five/lib/thermometer.js\");\n\nvar backwardCompatibilityGarbageHacks = {\n  thermometer: \"temperature\",\n};\n\nvar Drivers = {\n  SHT31D: {\n    ADDRESSES: {\n      value: [0x44]\n    },\n    REGISTER: {\n      value: {\n        // Table 13\n        SOFT_RESET: 0x30A2,\n        // Table 8\n        MEASURE_HIGH_REPEATABILITY: 0x2400,\n      }\n    },\n    initialize: {\n      value: function(board, opts) {\n        var READLENGTH = 6;\n        var io = board.io;\n        var address = opts.address || this.ADDRESSES[0];\n\n        opts.address = address;\n\n        io.i2cConfig(opts);\n\n        io.i2cWrite(address, [\n          // Page 12, Table 13\n          this.REGISTER.SOFT_RESET >> 8,\n          this.REGISTER.SOFT_RESET & 0xFF,\n        ]);\n\n        var computed = {\n          temperature: null,\n          humidity: null,\n        };\n\n        // temp msb, temp lsb, temp CRC, humidity msb, humidity lsb, humidity CRC\n        var readCycle = function() {\n          // Page 10, Table 8\n          // Send high repeatability measurement command\n          io.i2cWrite(address, [\n            this.REGISTER.MEASURE_HIGH_REPEATABILITY >> 8,\n            this.REGISTER.MEASURE_HIGH_REPEATABILITY & 0xFF,\n          ]);\n\n          setTimeout(function() {\n            io.i2cReadOnce(address, READLENGTH, function(data) {\n              computed.temperature = uint16(data[0], data[1]);\n              computed.humidity = uint16(data[3], data[4]);\n              this.emit(\"data\", computed);\n              readCycle();\n            }.bind(this));\n          }.bind(this), 16);\n        }.bind(this);\n\n        readCycle();\n      }\n    },\n    identifier: {\n      value: function(opts) {\n        var address = opts.address || Drivers.SHT31D.ADDRESSES.value[0];\n        return \"sht-31d-\" + address;\n      }\n    }\n  },\n\n  HTU21D: {\n    ADDRESSES: {\n      value: [0x40]\n    },\n    REGISTER: {\n      value: {\n        HUMIDITY: 0xE5,\n        TEMPERATURE: 0xE3,\n        SOFT_RESET: 0xFE,\n      }\n    },\n    initialize: {\n      value: function(board, opts) {\n        var io = board.io;\n        var address = opts.address || this.ADDRESSES[0];\n\n        opts.address = address;\n\n        // The \"no hold\" measurement requires waiting\n        // _at least_ 22ms between register write and\n        // register read. Delay is measured in μs:\n        // 22ms = 22000μs; recommend 50ms = 50000μs\n        opts.delay = 50000;\n\n        io.i2cConfig(opts);\n        io.i2cWrite(address, this.REGISTER.SOFT_RESET);\n\n        var computed = {\n          temperature: null,\n          humidity: null,\n        };\n\n        var cycle = 0;\n        var readCycle = function() {\n          // Despite the registers being back to back, the HTU21D\n          // does not like when 5 bytes are requested, so we put\n          // the two data sources on their own read channels.\n          var isTemperatureCycle = cycle === 0;\n          var register = isTemperatureCycle ? this.REGISTER.TEMPERATURE : this.REGISTER.HUMIDITY;\n\n          io.i2cReadOnce(address, register, 2, function(data) {\n            if (isTemperatureCycle) {\n              computed.temperature = uint16(data[0], data[1]);\n            } else {\n              computed.humidity = uint16(data[0], data[1]);\n            }\n\n            if (++cycle === 2) {\n              cycle = 0;\n              this.emit(\"data\", computed);\n            }\n\n            readCycle();\n          }.bind(this));\n        }.bind(this);\n\n        readCycle();\n      }\n    },\n    identifier: {\n      value: function(opts) {\n        var address = opts.address || Drivers.HTU21D.ADDRESSES.value[0];\n        return \"htu-s1d-\" + address;\n      }\n    }\n  },\n  HIH6130: {\n    ADDRESSES: {\n      value: [0x27]\n    },\n    initialize: {\n      value: function(board, opts) {\n        var io = board.io;\n        var address = opts.address || this.ADDRESSES[0];\n\n        opts.address = address;\n\n        io.i2cConfig(opts);\n\n        var computed = {\n          humidity: null,\n          temperature: null,\n        };\n\n        var delay = 36.65;\n\n        var measureCycle = function() {\n          // The most common use cases involve continuous\n          // sampling of sensor data, so that's what this\n          // controller-driver will provide.\n          io.i2cWrite(address, 0xA0, [0x00, 0x00]);\n\n          setTimeout(function() {\n            io.i2cWrite(address, 0x80, [0x00, 0x00]);\n            io.i2cReadOnce(address, 4, function(data) {\n              // Page 2, Figure 4.\n              // Humidity and Temperature Data Fetch, Four Byte Data Read\n              // B7:6 Contain status bits\n              var status = data[0] >> 6;\n              // Mask out B7:6 status bits from H MSB\n              computed.humidity = int16(data[0] & 0x3F, data[1]);\n              // Shift off B1:0 (which are empty)\n              computed.temperature = int16(data[2], data[3] >> 2);\n\n              // Page 3, 2.6 Status Bits\n              //\n              // 0 0 Normal\n              // 0 1 Stale\n              // 1 0 Command Mode\n              // 1 1 Diagnostic Condition\n              //\n              // When the two status bits read \"01\", \"stale\" data is\n              // indicated. This means that the data that already\n              // exists in the sensor's output buffer has already\n              // been fetched by the Master, and has not yet been\n              // updated with the next data from the current measurement\n              // cycle. This can happen when the Master polls the\n              // data quicker than the sensor can update the output buffer.\n              if (status === 0) {\n                delay--;\n              }\n\n              if (status === 1) {\n                delay++;\n              }\n\n              this.emit(\"data\", computed);\n\n              measureCycle();\n            }.bind(this));\n          // Page 3\n          // 3.0 Measurement Cycle\n          // The measurement cycle duration is typically\n          // 36.65 ms for temperature and humidity readings.\n          }.bind(this), delay);\n        }.bind(this);\n\n        measureCycle();\n      }\n    },\n    identifier: {\n      value: function(opts) {\n        var address = opts.address || Drivers.HIH6130.ADDRESSES.value[0];\n        return \"hih6130-\" + address;\n      }\n    }\n  },\n  DHT_I2C_NANO_BACKPACK: {\n    ADDRESSES: {\n      value: [0x0A]\n    },\n    REGISTER: {\n      value: {\n        READ: 0x00,\n      }\n    },\n    initialize: {\n      value: function(board, opts) {\n        var io = board.io;\n        var address = opts.address || this.ADDRESSES[0];\n        // Correspond to firmware variables\n        var dhtPin = 2;\n        var dhtType = 11;\n\n        opts.address = address;\n\n        io.i2cConfig(opts);\n\n        var dhtVariantExec = /(\\d{2})/.exec(opts.controller);\n        var dhtVariant = dhtVariantExec && dhtVariantExec.length && dhtVariantExec[0];\n\n        if (dhtVariant) {\n          dhtType = +dhtVariant;\n\n          if (Number.isNaN(dhtType)) {\n            dhtType = 11;\n          }\n        }\n\n        var computed = {\n          temperature: null,\n          humidity: null,\n        };\n\n        io.i2cWrite(address, [dhtPin, dhtType]);\n        io.i2cRead(address, 4, function(data) {\n          computed.humidity = int16(data[0], data[1]);\n          computed.temperature = int16(data[2], data[3]);\n          this.emit(\"data\", computed);\n        }.bind(this));\n      }\n    },\n    identifier: {\n      value: function(opts) {\n        var address = opts.address || Drivers.DHT_I2C_NANO_BACKPACK.ADDRESSES.value[0];\n        return \"dht_i2c_nano_backpack-\" + address;\n      }\n    }\n  },\n  MPU6050: {\n    ADDRESSES: {\n      value: [0x68, 0x69]\n    },\n    REGISTER: {\n      value: {\n        SETUP: [0x6B, 0x00],\n        READ: 0x3B\n      }\n    },\n    initialize: {\n      value: function(board, opts) {\n        var READLENGTH = 14;\n        var io = board.io;\n        var address = opts.address || this.ADDRESSES[0];\n\n        opts.address = address;\n\n        var computed = {\n          accelerometer: {},\n          temperature: {},\n          gyro: {}\n        };\n\n        io.i2cConfig(opts);\n        io.i2cWrite(address, this.REGISTER.SETUP);\n\n        io.i2cRead(address, this.REGISTER.READ, READLENGTH, function(data) {\n          computed.accelerometer = {\n            x: int16(data[0], data[1]),\n            y: int16(data[2], data[3]),\n            z: int16(data[4], data[5])\n          };\n\n          computed.temperature = int16(data[6], data[7]);\n\n          computed.gyro = {\n            x: int16(data[8], data[9]),\n            y: int16(data[10], data[11]),\n            z: int16(data[12], data[13])\n          };\n\n          this.emit(\"data\", computed);\n        }.bind(this));\n      },\n    },\n    identifier: {\n      value: function(opts) {\n        var address = opts.address || Drivers.MPU6050.ADDRESSES.value[0];\n        return \"mpu-6050-\" + address;\n      }\n    }\n  },\n  BNO055: {\n    ADDRESSES: {\n      value: [0x28, 0x29]\n    },\n    REGISTER: {\n      value: {\n        //\n        // 4.2.1 Register map Page 0\n        //\n        READ: {\n          /*\n            All motion data is in the following order:\n            X LSB\n            X MSB\n            Y LSB\n            Y MSB\n            Z LSB\n            Z MSB\n\n            The quarternion data is WXYZ\n            W LSB\n            W MSB\n            X LSB\n            X MSB\n            Y LSB\n            Y MSB\n            Z LSB\n            Z MSB\n\n           */\n\n          // m/s^2 by default\n          ACCEL: 0x08, // X LSB\n\n          // ? by default\n          MAG: 0x0E, // X LSB\n\n          // dps by default\n          GYRO: 0x14, // X LSB\n\n          //euler angles - degrees\n          EULER: 0x1A, // heading LSB\n\n          //quarternion\n          QUARTERNION: 0x20, // W LSB\n\n          // °C by default\n          TEMP: 0x34,\n        },\n\n        LENGTH: {\n          ACCEL: 6,\n          MAG: 6,\n          GYRO: 6,\n          EULER: 6,\n          QUARTERNION: 8,\n          TEMP: 1,\n        },\n\n        OPR_MODE_ADDR: 0x3D,\n        OPR_MODES: {\n          CONFIG: 0x00,\n          ACCONLY: 0x01,\n          MAGONLY: 0x02,\n          GYRONLY: 0x03,\n          ACCMAG: 0x04,\n          ACCGYRO: 0x05,\n          MAGGYRO: 0x06,\n          AMG: 0x07,\n          IMUPLUS: 0x08,\n          COMPASS: 0x09,\n          M4G: 0x0A,\n          NDOF_FMC_OFF: 0x0B,\n          NDOF: 0x0C,\n        },\n\n        PWR_MODE_ADDR: 0x3E,\n        PWR_MODES: {\n          NORMAL: 0x00,\n          LOW: 0x01,\n          SUSPEND: 0x02,\n        },\n\n        PAGE_ID_ADDR: 0x07,\n        PAGE_STATES: {\n          ZERO: 0x00,\n        },\n\n        CALIBRATION: 0x35,\n        SYS_TRIGGER: 0x3F,\n\n        UNIT_SEL_ADDR: 0x3B,\n\n        AXIS_MAP_CONFIG_ADDR: 0x41,\n        AXIS_MAP_SIGN_ADDR: 0x42,\n      }\n    },\n    initialize: {\n      value: function(board, opts) {\n        var io = board.io;\n        var address = opts.address || this.ADDRESSES[0];\n\n        // Page 67 4.3.54\n        // a value for what we use to consider the system calibrated,\n        // 0xC0 represents the just fusion algorithm/system\n        var calibrationMask = opts.calibrationMask || 0xC0;\n\n        opts.address = address;\n\n        var computed = {\n          accelerometer: {\n            x: null,\n            y: null,\n            z: null,\n          },\n          gyro: {\n            x: null,\n            y: null,\n            z: null,\n          },\n          magnetometer: {\n            x: null,\n            y: null,\n            z: null,\n          },\n          orientation: {\n            euler: {\n              heading: null,\n              roll: null,\n              pitch: null,\n            },\n            quarternion: {\n              w: null,\n              x: null,\n              y: null,\n              z: null,\n            },\n          },\n          temperature: null,\n          calibration: null,\n        };\n\n        io.i2cConfig(opts);\n\n        // Put chip into CONFIG operation mode\n        io.i2cWriteReg(address, this.REGISTER.OPR_MODE_ADDR, this.REGISTER.OPR_MODES.CONFIG);\n\n        // Set register page to 0\n        io.i2cWriteReg(address, this.REGISTER.PAGE_ID_ADDR, this.REGISTER.PAGE_STATES.ZERO);\n\n        // Page 70, 4.3.63 SYS_TRIGGER\n        //\n        // RST_SYS (Set to reset system)\n        //\n        // B7 B6 B5 B4 B3 B2 B1 B0\n        //  0  0  1  0  0  0  0  0\n        //\n        io.i2cWriteReg(address, this.REGISTER.SYS_TRIGGER, 0x20);\n\n        var por = new Promise(function(resolve) {\n          setTimeout(function() {\n\n            // Normal power mode\n            io.i2cWriteReg(address, this.REGISTER.PWR_MODE_ADDR, this.REGISTER.PWR_MODES.NORMAL);\n\n            // Page 70, 4.3.63 SYS_TRIGGER\n            //\n            // CLK_SEL:\n            //\n            // B7 B6 B5 B4 B3 B2 B1 B0\n            //  0  0  0  0  0  0  0  0\n            //\n            //io.i2cWriteReg(address, this.REGISTER.SYS_TRIGGER, 0x00);\n            // do we want to enable an external crystal??\n            io.i2cWriteReg(address, this.REGISTER.SYS_TRIGGER, opts.enableExternalCrystal ? 0x80 : 0x00);\n\n            // AF Page 24 3.4, Axis remap\n            //\n            // AXIS_MAP_CONFIG:\n            //\n            // B7 B6 B5 B4 B3 B2 B1 B0\n            //  0  0  0  0  0  0  0  0\n            //  -  -  z  z  y  y  x  x\n            //\n            // x axis = 00, y axis = 01, z axis = 10\n            //\n            // see also the defaults starting on Page 50\n            //\n            var axisMap = opts.axisMap || 0x24;\n            io.i2cWriteReg(address, this.REGISTER.AXIS_MAP_CONFIG_ADDR, axisMap);\n\n            // AF Page 24 3.4, Axis remap\n            //\n            // AXIS_MAP_CONFIG:\n            //\n            // B7 B6 B5 B4 B3 B2 B1 B0\n            //  0  0  0  0  0  0  0  0\n            //  -  -  -  -  -  x  y  z\n            //\n            // 0 = positive, 1 = negative\n            //\n            var axisSign = opts.axisSign || 0x00;\n            io.i2cWriteReg(address, this.REGISTER.AXIS_MAP_SIGN_ADDR, axisSign);\n\n            // Set operational mode to \"nine degrees of freedom\"\n            setTimeout(function() {\n              io.i2cWriteReg(address, this.REGISTER.OPR_MODE_ADDR, this.REGISTER.OPR_MODES.NDOF);\n              resolve();\n            }.bind(this), 10);\n\n            // Page 13, 1.2, OPERATING CONDITIONS BNO055\n            // From reset to config mode\n          }.bind(this), 650);\n        }.bind(this));\n\n        por.then(function() {\n          return new Promise(function(resolve) {\n            var readCalibration = function() {\n              io.i2cReadOnce(address, this.REGISTER.CALIBRATION, 1, function(data) {\n\n                var calibration = data[0];\n                var didCalibrationChange = computed.calibration !== calibration;\n\n\n                computed.calibration = calibration;\n\n                // It is useful, possibly to know when the calibration state changes\n                // some of the calibrations are a little picky to get right, so emitting\n                // the calibration state as it changes is useful.\n                if (didCalibrationChange) {\n                  this.emit(\"calibration\", computed.calibration);\n                }\n\n                if ((calibration & calibrationMask) === calibrationMask) {\n\n                  // Emit the calibration state so we can work out in our userspace if\n                  // we are good to go, and for when we are performing the calibration steps\n                  // let everyone know we are calibrated.\n                  this.emit(\"calibrated\");\n\n                  resolve();\n                } else {\n                  readCalibration();\n                }\n\n              }.bind(this));\n            }.bind(this);\n\n            readCalibration();\n\n          }.bind(this));\n        }.bind(this)).then(function() {\n\n          // Temperature requires no calibration, begin reading immediately\n          // here we read out temp, and the calibration state since they are back to back\n          // and the device can, has been observed to go out of calibration and we may want to check\n          io.i2cRead(address, this.REGISTER.READ.TEMP, 2, function(data) {\n            computed.temperature = data[0];\n\n            var didCalibrationChange = computed.calibration !== data[1];\n            computed.calibration = data[1];\n\n            this.emit(\"data\", computed);\n            if (didCalibrationChange) {\n              this.emit(\"calibration\", computed.calibration);\n            }\n          }.bind(this));\n\n\n          // ACCEL, MAG and GYRO are 6 bytes each => 18 bytes total\n          io.i2cRead(address, this.REGISTER.READ.ACCEL, 18, function(data) {\n\n            computed.accelerometer = {\n              x: int16(data[1], data[0]),\n              y: int16(data[3], data[2]),\n              z: int16(data[5], data[4])\n            };\n\n            computed.magnetometer = {\n              x: int16(data[7], data[6]),\n              y: int16(data[9], data[8]),\n              z: int16(data[11], data[10])\n            };\n\n            computed.gyro = {\n              x: int16(data[13], data[12]),\n              y: int16(data[15], data[14]),\n              z: int16(data[17], data[16])\n            };\n\n            this.emit(\"data\", computed);\n          }.bind(this));\n\n          // Moved the ndof/quarternions to their own read.. bytes go missing, lots of 32 byte buffers everywhere\n          io.i2cRead(address, this.REGISTER.READ.EULER, 14, function(data) {\n\n            // raw euler\n            computed.orientation.euler = {\n              heading: int16(data[1], data[0]),\n              roll: int16(data[3], data[2]),\n              pitch: int16(data[5], data[4])\n            };\n\n            // scaled quarternion - unitless\n            computed.orientation.quarternion = {\n              w: int16(data[7], data[6]),\n              x: int16(data[9], data[8]),\n              y: int16(data[11], data[10]),\n              z: int16(data[13], data[12])\n            };\n\n            this.emit(\"data\", computed);\n          }.bind(this));\n\n        }.bind(this));\n      },\n    },\n    identifier: {\n      value: function(opts) {\n        var address = opts.address || Drivers.BNO055.ADDRESSES.value[0];\n        return \"bno055-\" + address;\n      }\n    }\n  },\n\n  MPL115A2: {\n    ADDRESSES: {\n      value: [0x60]\n    },\n    REGISTER: {\n      value: {\n        // Page 5\n        // Table 2. Device Memory Map\n        COEFFICIENTS: 0x04,\n        PADC_MSB: 0x00,\n        CONVERT: 0x12,\n      }\n    },\n    initialize: {\n      value: function(board, opts) {\n        var io = board.io;\n        var address = opts.address || this.ADDRESSES[0];\n\n        opts.address = address;\n\n        io.i2cConfig(opts);\n\n        var computed = {\n          pressure: null,\n          temperature: null,\n        };\n\n        var cof = {\n          a0: null,\n          b1: null,\n          b2: null,\n          c12: null\n        };\n\n        var handler = function(data) {\n\n          // Page 5\n          // 3.1 Pressure, Temperature and Coefficient Bit-Width Specifications\n          var Padc = uint16(data[0], data[1]) >> 6;\n          var Tadc = uint16(data[2], data[3]) >> 6;\n\n          // Page 6\n          // 3.2 Compensation\n          computed.pressure = cof.a0 + (cof.b1 + cof.c12 * Tadc) * Padc + cof.b2 * Tadc;\n          computed.temperature = Tadc;\n\n          this.emit(\"data\", computed);\n\n          readCycle();\n        }.bind(this);\n\n        var readCycle = function() {\n          io.i2cWriteReg(address, this.REGISTER.CONVERT, 0x00);\n          // Page 5\n          // Table 2. Device Memory Map\n          // Starting from PADC_MSB, read 4 bytes:\n          //\n          // Padc_MSB\n          // Padc_LSB\n          // Tadc_MSB\n          // Tadc_LSB\n          //\n          io.i2cReadOnce(address, this.REGISTER.PADC_MSB, 4, handler);\n\n          // TODO: User specified \"frequency\" needs to be applied here.\n        }.bind(this);\n\n        var pCoefficients = new Promise(function(resolve) {\n          io.i2cReadOnce(address, this.REGISTER.COEFFICIENTS, 8, function(data) {\n            var A0 = int16(data[0], data[1]);\n            var B1 = int16(data[2], data[3]);\n            var B2 = int16(data[4], data[5]);\n            var C12 = int16(data[6], data[7]) >> 2;\n\n            // Source:\n            // https://github.com/adafruit/Adafruit_MPL115A2\n            // a0 is the pressure offset coefficient\n            // b1 is the pressure sensitivity coefficient\n            // b2 is the temperature coefficient of offset (TCO)\n            // c12 is the temperature coefficient of sensitivity (TCS)\n            cof.a0 = A0 / 8;\n            cof.b1 = B1 / 8192;\n            cof.b2 = B2 / 16384;\n            cof.c12 = C12 / 4194304;\n\n            resolve();\n          }.bind(this));\n        }.bind(this));\n\n        pCoefficients.then(readCycle);\n      },\n    },\n    identifier: {\n      value: function(opts) {\n        var address = opts.address || Drivers.MPL115A2.ADDRESSES.value[0];\n        return \"mpl115a2-\" + address;\n      }\n    }\n  },\n  // Based off of the AdaFruit Arduino library for this chip\n  // https://github.com/adafruit/Adafruit_MPL3115A2_Library\n  MPL3115A2: {\n    ADDRESSES: {\n      value: [0x60]\n    },\n    REGISTER: {\n      // Page 18\n      // 13 Register descriptions\n      value: {\n        STATUS: 0x00,\n        PRESSURE: 0x01,\n        CONFIG: 0x13,\n        BAR_IN_MSB: 0x14,\n        BAR_IN_LSB: 0x15,\n        CONTROL: 0x26,\n      }\n    },\n    MASK: {\n      value: {\n        STATUS: {\n          PRESSURE_DATA_READ: 0x04\n        },\n        CONTROL: {\n          SBYB: 0x01,\n          OS128: 0x38,\n          ALTIMETER: 0x80,\n          PRESSURE: 0x00\n        },\n        CONFIG: {\n          TDEFE: 0x01,\n          PDEFE: 0x02,\n          DREM: 0x04\n        }\n      }\n    },\n    initialize: {\n      value: function(board, opts) {\n        var READLENGTH = 6;\n        var io = board.io;\n        var address = opts.address || this.ADDRESSES[0];\n        var isPressure = false;\n        var elevation = null;\n        var offset = 0;\n\n        opts.address = address;\n\n        // See http://www.henrylahr.com/?p=99 for implementation approach\n        //\n        var altNow = 0;\n        var computed = {\n          pressure: 0,\n          altitude: 0,\n          temperature: 0\n        };\n\n        if (typeof opts.elevation !== \"undefined\") {\n          elevation = opts.elevation;\n        }\n\n        if (elevation !== null && elevation <= 0) {\n          offset = Math.abs(elevation) + 1;\n          elevation = 1;\n        }\n\n        var waitForReady = function(next) {\n          io.i2cReadOnce(address, this.REGISTER.STATUS, 1, function(data) {\n            if (data[0] & this.MASK.STATUS.PRESSURE_DATA_READ) {\n              next();\n            } else {\n              setTimeout(function() {\n                waitForReady(next);\n              }, 100);\n            }\n          }.bind(this));\n        }.bind(this);\n\n        var readValues = function() {\n          var modeMask = isPressure ? this.MASK.CONTROL.PRESSURE : this.MASK.CONTROL.ALTIMETER;\n          var mode = this.MASK.CONTROL.SBYB | this.MASK.CONTROL.OS128 | modeMask;\n\n          io.i2cWrite(address, this.REGISTER.CONTROL, mode);\n\n          waitForReady(function() {\n            io.i2cReadOnce(address, this.REGISTER.PRESSURE, READLENGTH, function(data) {\n              var value = uint24(data[1], data[2], data[3]) >> 4;\n              var temperature = uint16(data[4], data[5]) >> 4;\n              var altVal;\n\n              computed.temperature = temperature;\n\n              if (isPressure) {\n                computed.pressure = value;\n                this.emit(\"data\", computed);\n              } else {\n                var m = data[1];\n                var c = data[2];\n                var l = data[3];\n                var fl = (l >> 4) / 16;\n\n                altVal = (m << 8 | c) + fl;\n                altNow = (altNow * 3 + altVal) / 4;\n\n                computed.altitude = altNow - offset;\n              }\n\n              isPressure = !isPressure;\n\n              readValues();\n            }.bind(this));\n          }.bind(this));\n        }.bind(this);\n\n        var reads = [];\n        var calibrate = function() {\n          // Clear Oversampling and OST\n          io.i2cWrite(address, this.REGISTER.CONTROL, 0x3B);\n          io.i2cWrite(address, this.REGISTER.CONTROL, 0x39);\n\n          setTimeout(function() {\n            io.i2cReadOnce(address, this.REGISTER.PRESSURE, READLENGTH, function(data) {\n              var m = data[1];\n              var c = data[2];\n              var l = data[3];\n              var fl = (l >> 4) / 4;\n\n              reads.push((m << 10 | c << 2) + fl);\n\n              if (reads.length === 4) {\n                var curpress = (reads[0] + reads[1] + reads[2] + reads[3]) / 4;\n                var seapress = curpress / Math.pow(1 - elevation * 0.0000225577, 5.255);\n\n                // Update Barometric input for Altitude\n                io.i2cWrite(address, this.REGISTER.BAR_IN_MSB, (seapress / 2) >> 8);\n                io.i2cWrite(address, this.REGISTER.BAR_IN_LSB, (seapress / 2) & 0xFF);\n\n                // Get into Altitude mode\n                // One shot & OST bit\n                io.i2cWrite(address, this.REGISTER.CONTROL, 0xBB);\n                io.i2cWrite(address, this.REGISTER.CONTROL, 0xB9);\n\n                setTimeout(function() {\n                  io.i2cReadOnce(address, this.REGISTER.PRESSURE, READLENGTH, function(data) {\n                    var m = data[1];\n                    var c = data[2];\n                    var l = data[3];\n                    var fl = (l >> 4) / 16;\n\n                    altNow = (m << 8 | c) + fl;\n\n                    readValues(false);\n                  });\n                }.bind(this), 550);\n\n              } else {\n                calibrate();\n              }\n            }.bind(this));\n          }.bind(this), 500);\n        }.bind(this);\n\n        io.i2cConfig(\n          Object.assign(opts, {\n            settings: {\n              stopTX: true\n            }\n          })\n        );\n\n        // configure the chip\n        // Set Altitude Offset.\n        io.i2cWriteReg(address, 0x2D, 0x00);\n\n        io.i2cWriteReg(address, this.REGISTER.BAR_IN_MSB, 0);\n        io.i2cWriteReg(address, this.REGISTER.BAR_IN_LSB, 0);\n\n        io.i2cWriteReg(address, this.REGISTER.CONFIG,\n          this.MASK.CONFIG.TDEFE |\n          this.MASK.CONFIG.PDEFE |\n          this.MASK.CONFIG.DREM);\n\n        if (elevation !== null) {\n          calibrate();\n        } else {\n          readValues();\n        }\n      }\n    },\n    identifier: {\n      value: function(opts) {\n        var address = opts.address || Drivers.MPL3115A2.ADDRESSES.value[0];\n        return \"mpl3115a2-\" + address;\n      }\n    }\n  },\n  BMP180: {\n    ADDRESSES: {\n      value: [0x77]\n    },\n    REGISTER: {\n      value: {\n        COEFFICIENTS: 0xAA,\n        READ: 0x00,\n        READ_START: 0xF4,\n        READ_RESULT: 0xF6,\n      }\n    },\n    initialize: {\n      value: function(board, opts) {\n        var io = board.io;\n        var address = opts.address || this.ADDRESSES[0];\n        var elevation = null;\n        var offset = 0;\n\n        if (typeof opts.elevation !== \"undefined\") {\n          elevation = opts.elevation;\n        }\n\n        if ((elevation != null && elevation <= 0) ||\n            elevation == null) {\n          offset = Math.abs(elevation) + 1;\n          elevation = 1;\n        }\n\n        opts.address = address;\n\n        /**\n         * Table 1: Operating conditions, output signal and mechanical characteristics\n         *\n         * Pressure Conversion Delay (ms)\n         *\n         * [\n         *   5,   LOW\n         *   8,   STANDARD\n         *   14,  HIGH\n         *   26,  ULTRA\n         *  ]\n         *\n         * These numbers are derived from rounding the Max column of\n         * Table 1, for the Conversion Time entries.\n         */\n\n        var mode = opts.mode || 3;\n        var kpDelay = [5, 8, 14, 26][mode];\n        var oss = Fn.constrain(mode, 0, 3);\n\n        var cof = {\n          a1: null,\n          a2: null,\n          a3: null,\n          a4: null,\n          a5: null,\n          a6: null,\n          b1: null,\n          b2: null,\n          b5: null,\n          mb: null,\n          mc: null,\n          md: null,\n        };\n\n        io.i2cConfig(opts);\n\n        var pCoefficients = new Promise(function(resolve) {\n          io.i2cReadOnce(address, this.REGISTER.COEFFICIENTS, 22, function(data) {\n            // BMP085\n            // Page 12\n            // 3.4 Calibration Coefficients\n            //\n            // BMP180\n            // Page 13\n            // 3.4 Calibration Coefficients\n            //\n            cof.a1 = int16(data[0], data[1]);\n            cof.a2 = int16(data[2], data[3]);\n            cof.a3 = int16(data[4], data[5]);\n            cof.a4 = uint16(data[6], data[7]);\n            cof.a5 = uint16(data[8], data[9]);\n            cof.a6 = uint16(data[10], data[11]);\n            cof.b1 = int16(data[12], data[13]);\n            cof.b2 = int16(data[14], data[15]);\n            cof.mb = int16(data[16], data[17]);\n            cof.mc = int16(data[18], data[19]);\n            cof.md = int16(data[20], data[21]);\n\n            resolve();\n          });\n        }.bind(this));\n\n        pCoefficients.then(function() {\n\n          // BMP085\n          // Pages 10, 11\n          // 3.3 Measurement of pressure and temperature\n          // Pages 12, 13, 14\n          // 3.5 Calculating pressure and temperature\n          //\n          // BMP180\n          // Pages 11, 12\n          // 3.3 Measurement of pressure and temperature\n          // Pages 13, 14, 15, 16\n          // 3.5 Calculating pressure and temperature\n          //\n          var computed = {\n            altitude: null,\n            pressure: null,\n            temperature: null,\n          };\n\n          var cycle = 0;\n\n          // BMP180\n          // Pages 11, 15\n          // 3.3 Measurement of pressure and temperature\n          // 3.5 Calculating pressure and temperature\n          var readCycle = function() {\n\n            // cycle 0: temperature\n            // cycle 1: pressure\n\n            var isTemperatureCycle = cycle === 0;\n            var component = isTemperatureCycle ? 0x2E : 0x34 + (oss << 6);\n            var numBytes = isTemperatureCycle ? 2 : 3;\n            var delay = isTemperatureCycle ? 5 : kpDelay;\n\n\n            io.i2cWriteReg(address, this.REGISTER.READ_START, component);\n\n            // Once the READ_START register is set,\n            // delay the READ_RESULT request based on the\n            // mode value provided by the user, or default.\n            setTimeout(function() {\n              io.i2cReadOnce(address, this.REGISTER.READ_RESULT, numBytes, function(data) {\n                var compensated, uncompensated;\n                var x1, x2, x3, b3, b4, b6, b7, b6s, bx;\n\n                if (isTemperatureCycle) {\n                  // TEMPERATURE\n                  uncompensated = int16(data[0], data[1]);\n\n                  // Compute the true temperature\n                  x1 = ((uncompensated - cof.a6) * cof.a5) >> 15;\n                  x2 = ((cof.mc << 11) / (x1 + cof.md)) >> 0;\n\n                  // Compute b5, which is used by the pressure cycle\n                  cof.b5 = (x1 + x2) | 0;\n\n                  // Steps of 0.1°C\n                  computed.temperature = ((cof.b5 + 8) >> 4) / 10;\n                } else {\n                  // PRESSURE\n                  uncompensated = uint24(data[0], data[1], data[2]) >> (8 - oss);\n\n                  b6 = cof.b5 - 4000;\n                  b6s = b6 * b6;\n                  bx = b6s >> 12;\n\n                  // Intermediary x1 & x2 to calculate x3 for b3\n                  x1 = (cof.b2 * bx) >> 11;\n                  x2 = (cof.a2 * b6) >> 11;\n                  x3 = x1 + x2;\n                  b3 = ((((cof.a1 * 4 + x3) << oss) + 2) / 4) >> 0;\n\n                  // Intermediary x1 & x2 to calculate x3 for b4\n                  x1 = (cof.a3 * b6) >> 13;\n                  x2 = (cof.b1 * bx) >> 16;\n                  x3 = ((x1 + x2) + 2) >> 2;\n                  b4 = (cof.a4 * (x3 + 32768)) >> 15;\n                  b7 = (uncompensated - b3) * (50000 >> oss);\n\n                  if (b7 < Fn.POW_2_31) {\n                    compensated = (b7 * 2) / b4;\n                  } else {\n                    compensated = (b7 / b4) * 2;\n                  }\n\n                  compensated >>= 0;\n\n                  x1 = (compensated >> 8) * (compensated >> 8);\n                  x1 = (x1 * 3038) >> 16;\n                  x2 = (-7357 * compensated) >> 16;\n\n                  compensated += (x1 + x2 + 3791) >> 4;\n\n                  // Steps of 1Pa (= 0.01hPa = 0.01mbar) (=> 0.001kPa)\n                  computed.pressure = compensated;\n\n                  // 3.7 Calculating pressure at sea level\n                  var seapress = compensated / Math.pow(1 - elevation * 0.0000225577, 5.255);\n                  var altitude = 44330 * (1 - Math.pow(compensated / seapress, 1 / 5.255));\n\n                  // Page 3 (of BMP280 Datasheet)\n                  // ...relative accuracy is ±0.12 hPa, which is equivalent to\n                  // ±1 m difference in altitude.\n                  computed.altitude = Math.round(altitude - offset);\n                }\n\n                if (++cycle === 2) {\n                  cycle = 0;\n                  this.emit(\"data\", computed);\n                }\n\n                readCycle();\n              }.bind(this));\n            }.bind(this), delay);\n          }.bind(this);\n\n          // Kick off \"read loop\"\n          //\n          readCycle();\n        }.bind(this));\n      }\n    },\n    identifier: {\n      value: function(opts) {\n        var address = opts.address || Drivers.BMP180.ADDRESSES.value[0];\n        return \"bmp180-\" + address;\n      }\n    }\n  },\n\n  BMP280: {\n    ADDRESSES: {\n      value: [0x77]\n    },\n    REGISTER: {\n      value: {\n        COEFFICIENTS: 0x88,\n        CONFIG: 0xF5,\n        MEASURE: 0xF4,\n        // 0xF7, 0xF8, 0xF9\n        // MSB, LSB, XLSB\n        PRESSURE: 0xF7,\n        // 0xFA, 0xFB, 0xFC\n        // MSB, LSB, XLSB\n        TEMPERATURE: 0xFA,\n        RESET: 0xE0,\n      }\n    },\n    initialize: {\n      value: function(board, opts) {\n        var io = board.io;\n        var address = opts.address || this.ADDRESSES[0];\n        var elevation = null;\n        var offset = 0;\n\n        if (typeof opts.elevation !== \"undefined\") {\n          elevation = opts.elevation;\n        }\n\n        if ((elevation != null && elevation <= 0) ||\n            elevation == null) {\n          offset = Math.abs(elevation) + 1;\n          elevation = 1;\n        }\n\n        opts.address = address;\n\n        var dig = {\n          T1: null,\n          T2: null,\n          T3: null,\n          P1: null,\n          P2: null,\n          P3: null,\n          P4: null,\n          P5: null,\n          P6: null,\n          P7: null,\n          P8: null,\n          P9: null,\n        };\n\n        io.i2cConfig(opts);\n\n        // Page. 24\n        // 4.3.2 Register 0xE0 \"reset\"\n        io.i2cWrite(address, this.REGISTER.RESET, 0xB6);\n\n        var pCoefficients = new Promise(function(resolve) {\n          io.i2cReadOnce(address, this.REGISTER.COEFFICIENTS, 24, function(data) {\n\n            // Page 21, Table 17\n            // Compensation parameter storage, naming and data type\n            // These are received LSB FIRST\n            //\n\n            dig.T1 = uint16(data[1], data[0]);\n            dig.T2 = int16(data[3], data[2]);\n            dig.T3 = int16(data[5], data[4]);\n\n            dig.P1 = uint16(data[7], data[6]);\n            dig.P2 = int16(data[9], data[8]);\n            dig.P3 = int16(data[11], data[10]);\n            dig.P4 = int16(data[13], data[12]);\n            dig.P5 = int16(data[15], data[14]);\n            dig.P6 = int16(data[17], data[16]);\n            dig.P7 = int16(data[19], data[18]);\n            dig.P8 = int16(data[21], data[20]);\n            dig.P9 = int16(data[23], data[22]);\n\n            resolve();\n          });\n        }.bind(this));\n\n        pCoefficients.then(function() {\n          /*\n          CTRL_MEAS bits\n\n          | DATA LSB                      |\n          | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |\n          | - | - | - | - | - | - | - | - |\n          | 0 | 0 | 1 | 1 | 1 | 1 | 1 | 1 |\n          */\n\n          io.i2cWrite(address, this.REGISTER.MEASURE, 0x3F);\n\n          var computed = {\n            altitude: null,\n            pressure: null,\n            temperature: null,\n          };\n\n          //\n          // Page 12\n          // 3.3.1 Pressure measurement\n          //\n          // Page 13\n          // 3.3.2 Temperature measurement\n          //\n\n          io.i2cRead(address, this.REGISTER.PRESSURE, 6, function(data) {\n            var compensated = 0;\n\n            // Page 45\n            // \"Returns temperature in DegC, double precision. Output value of\n            // '51.23' equals 51.23 DegC. t_fine carries fine temperature as global value\"\n            var fine;\n\n            // var1, var2\n            //\n            // Expect:\n            //\n            // int32\n            //\n            var v1, v2;\n\n            // Page 44\n            // \"Both pressure and temperature values are expected to be\n            // received in 20 bit format, positive, stored in a 32 bit signed integer. \"\n            //\n            //  V = int32(uint24(m, l, xl))\n            //  V >> 4;\n            //\n\n            // Page 45\n            var P = s32(uint24(data[0], data[1], data[2]));\n            var T = s32(uint24(data[3], data[4], data[5]));\n\n            P >>= 4;\n            T >>= 4;\n\n            // TEMPERATURE\n\n            // Page 45\n            // bmp280_compensate_T_int32\n            // var1 = ((((adc_T>>3) – ((BMP280_S32_t)dig_T1<<1))) *\n            //                        ((BMP280_S32_t)dig_T2)) >> 11;\n            // var2 = (((((adc_T>>4) – ((BMP280_S32_t)dig_T1)) *\n            //          ((adc_T>>4) – ((BMP280_S32_t)dig_T1))) >> 12) *\n            //          ((BMP280_S32_t)dig_T3)) >> 14;\n            //\n            //\n            var adc16 = T >> 4;\n            var adc16subT1 = adc16 - dig.T1;\n            v1  = (((T >> 3) - (dig.T1 << 1)) * dig.T2) >> 11;\n            v2  = (((adc16subT1 * adc16subT1) >> 12) * dig.T3) >> 14;\n\n            // t_fine = var1 + var2;\n            fine = v1 + v2;\n\n            // Page 7, 8\n            // Table 2: Parameter specification\n            //\n            //\n            // Temperature 0.01 °C\n            //\n            // As toFixed(2)\n            //\n            // C = +(((t_fine * 5 + 128) >> 8) / 100).toFixed(resolution)\n            //\n            computed.temperature = ((fine * 5 + 128) >> 8) / 100;\n\n            v1 = undefined;\n            v2 = undefined;\n\n\n            // PRESSURE\n            // Page 46\n            // bmp280_compensate_P_int32\n            //\n            // Every single seemingly arbitrary magic number comes from the datasheet.\n            // Datasheets are evidently written by people that don't care about\n            // anyone else actually understanding how a thing works.\n            //\n\n            // var1 = (((BMP280_S32_t)t_fine)>>1) – (BMP280_S32_t)64000;\n            v1 = s32(fine >> 1) - 64000;\n\n            // var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((BMP280_S32_t)dig_P6);\n            v2 = (((v1 >> 2) * (v1 >> 2)) >> 11) * s32(dig.P6);\n\n            // var2 = var2 + ((var1*((BMP280_S32_t)dig_P5))<<1);\n            v2 += (v1 * s32(dig.P5)) << 1;\n\n            // var2 = (var2>>2)+(((BMP280_S32_t)dig_P4)<<16);\n            v2 = (v2 >> 2) + (s32(dig.P4) << 16);\n\n\n            // var1 = (((dig_P3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) +\n            //          ((((BMP280_S32_t)dig_P2) * var1)>>1))>>18;\n            v1 = (((dig.P3 * (((v1 >> 2) * (v1 >> 2)) >> 13)) >> 3) + ((s32(dig.P2) * v1) >> 1)) >> 18;\n\n            // var1 =((((32768+var1))*((BMP280_S32_t)dig_P1))>>15);\n            v1 = (((Fn.POW_2_15 + v1) * s32(dig.P1)) >> 15);\n\n            if (v1 === 0) {\n              // Prevent division by zero\n              return 0;\n            }\n\n            // p = (((BMP280_U32_t)(((BMP280_S32_t)1048576)-adc_P)-(var2>>12)))*3125;\n            compensated = u32((s32(Fn.POW_2_20) - P) - (v2 >> 12)) * 3125;\n\n            if (compensated < Fn.POW_2_31) {\n              // p = (p << 1) / ((BMP280_U32_t)var1);\n              compensated = ((compensated << 1) >>> 0) / u32(v1);\n            } else {\n              // p = (p / (BMP280_U32_t)var1) * 2;\n              compensated = ((compensated / u32(v1)) >>> 0) * 2;\n            }\n\n            compensated = u32(compensated) >>> 0;\n\n            // var1 = (((BMP280_S32_t)dig_P9) * ((BMP280_S32_t)(((p>>3) * (p>>3))>>13)))>>12;\n            var compshift3r = compensated >> 3;\n            v1 = (s32(dig.P9) * s32(((compshift3r * compshift3r) >> 13))) >> 12;\n\n            // var2 = (((BMP280_S32_t)(p>>2)) * ((BMP280_S32_t)dig_P8))>>13;\n            v2 = (s32(compensated >> 2) * s32(dig.P8)) >> 13;\n\n            // p = (BMP280_U32_t)((BMP280_S32_t)p + ((var1 + var2 + dig_P7) >> 4));\n            compensated = u32(s32(compensated) + ((v1 + v2 + dig.P7) >> 4));\n\n            // Steps of 1Pa (= 0.01hPa = 0.01mbar) (=> 0.001kPa)\n            computed.pressure = compensated;\n\n            // Calculating pressure at sea level (copied from BMP180)\n            var seapress = compensated / Math.pow(1 - elevation * 0.0000225577, 5.255);\n            var altitude = 44330 * (1 - Math.pow(compensated / seapress, 1 / 5.255));\n\n            // Page 3\n            // ...relative accuracy is ±0.12 hPa, which is equivalent to\n            // ±1 m difference in altitude.\n            computed.altitude = Math.round(altitude - offset);\n\n            this.emit(\"data\", computed);\n          }.bind(this));\n        }.bind(this));\n      }\n    },\n    identifier: {\n      value: function(opts) {\n        var address = opts.address || Drivers.BMP280.ADDRESSES.value[0];\n        return \"bmp280-\" + address;\n      }\n    }\n  },\n\n  BME280: {\n    ADDRESSES: {\n      value: [0x77]\n    },\n    REGISTER: {\n      value: {\n        COEFFICIENTS_TP: 0x88,\n        COEFFICIENTS_H: 0xE1,\n        CONFIG: 0xF5,\n        MEASURE_H: 0xF2,\n        MEASURE_TP: 0xF4,\n        PRESSURE: 0xF7,\n        // 0xF7, 0xF8, 0xF9\n        //  MSB,  LSB, XLSB\n        TEMPERATURE: 0xFA,\n        // 0xFA, 0xFB, 0xFC\n        //  MSB,  LSB, XLSB\n        HUMIDITY: 0xFD,\n        // 0xFD, 0xFE\n        //  MSB,  LSB\n        RESET: 0xE0,\n      }\n    },\n    initialize: {\n      value: function(board, opts) {\n        var io = board.io;\n        var address = opts.address || this.ADDRESSES[0];\n        var elevation = null;\n        var offset = 0;\n\n        if (typeof opts.elevation !== \"undefined\") {\n          elevation = opts.elevation;\n        }\n\n        if ((elevation != null && elevation <= 0) ||\n            elevation == null) {\n          offset = Math.abs(elevation) + 1;\n          elevation = 1;\n        }\n\n        opts.address = address;\n\n        var dig = {\n          T1: null,\n          T2: null,\n          T3: null,\n          P1: null,\n          P2: null,\n          P3: null,\n          P4: null,\n          P5: null,\n          P6: null,\n          P7: null,\n          P8: null,\n          P9: null,\n          H1: null,\n          H2: null,\n          H3: null,\n          H4: null,\n          H5: null,\n          H6: null,\n        };\n\n        io.i2cConfig(opts);\n\n        // Page. 24\n        // 4.3.2 Register 0xE0 \"reset\"\n        io.i2cWrite(address, this.REGISTER.RESET, 0xB6);\n\n        var pCoefficients = new Promise(function(resolveCoeffs) {\n\n          // Page 22,\n          // Table 16: Compensation parameter storage, naming and data type\n          // These are received LSB FIRST\n          //\n          // The H register is not contiguous!\n\n\n          Promise.all([\n            new Promise(function(resolve) {\n              io.i2cReadOnce(address, 0x88, 24, function(data) {\n                dig.T1 = uint16(data[1], data[0]);\n                dig.T2 = int16(data[3], data[2]);\n                dig.T3 = int16(data[5], data[4]);\n\n                dig.P1 = uint16(data[7], data[6]);\n                dig.P2 = int16(data[9], data[8]);\n                dig.P3 = int16(data[11], data[10]);\n                dig.P4 = int16(data[13], data[12]);\n                dig.P5 = int16(data[15], data[14]);\n                dig.P6 = int16(data[17], data[16]);\n                dig.P7 = int16(data[19], data[18]);\n                dig.P8 = s32(int16(data[21], data[20]));\n                dig.P9 = s32(int16(data[23], data[22]));\n                resolve();\n              });\n            }),\n            new Promise(function(resolve) {\n              io.i2cReadOnce(address, 0xA1, 1, function(data) {\n                dig.H1 = Fn.u8(data[0]);\n                resolve();\n              });\n            }),\n            new Promise(function(resolve) {\n              io.i2cReadOnce(address, 0xE1, 8, function(data) {\n                /*\n                  0xE1 => data[0]\n                  0xE2 => data[1]\n                  0xE3 => data[2]\n                  0xE4 => data[3]\n                  0xE5 => data[4]\n                  0xE6 => data[5]\n                  0xE7 => data[6]\n                */\n\n                //        0xE2   0xE1\n                // H2   [15:8]  [7:0]\n                dig.H2 = s32(int16(data[1], data[0]));\n\n                //  0xE3\n                dig.H3 = s32(data[2]);\n\n                // Special Bit arrangements for H4 & H5\n                //\n                //      0xE5    0xE4\n                // H4  [3:0]  [11:4]     signed short\n                //      0xE6    0xE5\n                // H5 [11:4]   [3:0]    signed short\n\n                dig.H4 = s32((data[3] << 4) | (data[4] & 0xF));\n                dig.H5 = s32((data[5] << 4) | (data[4] >> 4));\n\n                // 0xE7\n                dig.H6 = Fn.s8(data[6]);\n\n                resolve();\n              });\n            })\n          ]).then(resolveCoeffs);\n        }.bind(this));\n\n        pCoefficients.then(function() {\n          /*\n            Table 19: Register 0xF2 \"ctrl_hum\"\n\n            Bit 2, 1, 0\n            Controls oversampling of humidity\n\n\n            osrs_h[2:0] Humidity oversampling\n            000 Skipped (output set to 0x8000)\n            001 oversampling ×1\n            010 oversampling ×2\n            011 oversampling ×4\n            100 oversampling ×8\n            101, others oversampling ×16\n\n            |           |       | HUM       |\n            | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |\n            | - | - | - | - | - | - | - | - |\n            | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 1 |\n          */\n          io.i2cWrite(address, this.REGISTER.MEASURE_H, 0x05);\n\n          /*\n            Table 22: Register 0xF4 \"ctrl_meas\"\n\n            Bit 7, 6, 5\n            Controls oversampling of temperature data\n\n            Bit 4, 3, 2\n            Controls oversampling of pressure data\n\n            Bit 1, 0\n            Controls the sensor mode of the device\n\n\n            osrs_h[2:0] Humidity oversampling\n            000 Skipped (output set to 0x8000)\n            001 oversampling ×1\n            010 oversampling ×2\n            011 oversampling ×4\n            100 oversampling ×8\n            101, others oversampling ×16\n\n\n            000 Skipped (output set to 0x80000)\n            001 oversampling ×1\n            010 oversampling ×2\n            011 oversampling ×4\n            100 oversampling ×8\n            101, others oversampling ×16\n\n            00 Sleep mode\n            01 and 10 Forced mode\n            11 Normal mode\n\n            | TEMP      | PRES      | Mode  |\n            | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |\n            | - | - | - | - | - | - | - | - |\n            | 1 | 0 | 1 | 1 | 0 | 1 | 1 | 1 |\n\n          */\n          io.i2cWrite(address, this.REGISTER.MEASURE_TP, 0xB7);\n\n\n          var computed = {\n            altitude: null,\n            pressure: null,\n            humidity: null,\n            temperature: null,\n          };\n\n          //\n          // Page 12\n          // 3.3.1 Pressure measurement\n          //\n          // Page 13\n          // 3.3.2 Temperature measurement\n          //\n\n          var standby = Date.now();\n\n          io.i2cRead(address, this.REGISTER.PRESSURE, 8, function(data) {\n            //\n            // Response time to complete 63% of a step is 1 second.\n            // Don't emit a reading until a complete step has occurred.\n            // This will be ~1587ms\n            // (1 / 63 * 100) * 1000 = 1587.3015873015872ms\n            // if ((standby + 1587) > Date.now()) {\n            if (!process.env.IS_TEST_MODE) {\n              if ((standby + 1000) > Date.now()) {\n                return;\n              }\n            }\n\n            var compensated = 0;\n\n            // Page 45\n            // \"Returns temperature in DegC, double precision. Output value of\n            // '51.23' equals 51.23 DegC. t_fine carries fine temperature as global value\"\n            var fine;\n\n            // var1, var2\n            //\n            // Expect:\n            //\n            // int32\n            //\n            var v1, v2, vx;\n\n            // Page 50\n            // \"Both pressure and temperature values are expected to be\n            // received in 20 bit format, positive, stored in a 32 bit signed integer. \"\n            //\n            //  V = int32(uint24(m, l, xl))\n            //  V >> 4;\n            //\n\n            // Page 50\n            var P = s32(uint24(data[0], data[1], data[2]));\n            var T = s32(uint24(data[3], data[4], data[5]));\n            var H = s32(uint16(data[6], data[7]));\n\n            P >>= 4;\n            T >>= 4;\n\n            // TEMPERATURE\n\n            // Page 23\n            // bmp280_compensate_T_int32\n            // var1 = ((((adc_T>>3) – ((BMP280_S32_t)dig_T1<<1))) *\n            //                        ((BMP280_S32_t)dig_T2)) >> 11;\n            // var2 = (((((adc_T>>4) – ((BMP280_S32_t)dig_T1)) *\n            //          ((adc_T>>4) – ((BMP280_S32_t)dig_T1))) >> 12) *\n            //          ((BMP280_S32_t)dig_T3)) >> 14;\n            //\n            //\n            var adc16 = T >> 4;\n            var adc16subT1 = adc16 - dig.T1;\n            v1  = (((T >> 3) - (dig.T1 << 1)) * dig.T2) >> 11;\n            v2  = (((adc16subT1 * adc16subT1) >> 12) * dig.T3) >> 14;\n\n            // t_fine = var1 + var2;\n            fine = v1 + v2;\n\n            // Page 7, 8\n            // Table 2: Parameter specification\n            //\n            //\n            // Temperature 0.01 °C\n            //\n            // As toFixed(2)\n            //\n            // C = +(((t_fine * 5 + 128) >> 8) / 100).toFixed(resolution)\n            //\n            computed.temperature = ((fine * 5 + 128) >> 8) / 100;\n\n            v1 = undefined;\n            v2 = undefined;\n\n\n            // PRESSURE\n            // Page 23\n            // bmp280_compensate_P_int32\n            //\n            // Every single seemingly arbitrary magic number comes from the datasheet.\n            // Datasheets are evidently written by people that don't care about\n            // anyone else actually understanding how a thing works.\n            //\n\n            // var1 = (((BMP280_S32_t)t_fine)>>1) – (BMP280_S32_t)64000;\n            v1 = s32(fine >> 1) - 64000;\n\n            // var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((BMP280_S32_t)dig_P6);\n            v2 = (((v1 >> 2) * (v1 >> 2)) >> 11) * s32(dig.P6);\n\n            // var2 = var2 + ((var1*((BMP280_S32_t)dig_P5))<<1);\n            v2 += (v1 * s32(dig.P5)) << 1;\n\n            // var2 = (var2>>2)+(((BMP280_S32_t)dig_P4)<<16);\n            v2 = (v2 >> 2) + (s32(dig.P4) << 16);\n\n\n            // var1 = (((dig_P3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) +\n            //          ((((BMP280_S32_t)dig_P2) * var1)>>1))>>18;\n            v1 = (((dig.P3 * (((v1 >> 2) * (v1 >> 2)) >> 13)) >> 3) + ((s32(dig.P2) * v1) >> 1)) >> 18;\n\n            // var1 =((((32768+var1))*((BMP280_S32_t)dig_P1))>>15);\n            v1 = (((Fn.POW_2_15 + v1) * s32(dig.P1)) >> 15);\n\n            if (v1 === 0) {\n              // Prevent division by zero\n              return 0;\n            }\n\n            // p = (((BMP280_U32_t)(((BMP280_S32_t)1048576)-adc_P)-(var2>>12)))*3125;\n            compensated = u32((s32(Fn.POW_2_20) - P) - (v2 >> 12)) * 3125;\n\n            if (compensated < Fn.POW_2_31) {\n              // p = (p << 1) / ((BMP280_U32_t)var1);\n              compensated = ((compensated << 1) >>> 0) / u32(v1);\n            } else {\n              // p = (p / (BMP280_U32_t)var1) * 2;\n              compensated = ((compensated / u32(v1)) >>> 0) * 2;\n            }\n\n            compensated = u32(compensated) >>> 0;\n\n            // var1 = (((BMP280_S32_t)dig_P9) * ((BMP280_S32_t)(((p>>3) * (p>>3))>>13)))>>12;\n            var compshift3r = compensated >> 3;\n            v1 = (s32(dig.P9) * s32(((compshift3r * compshift3r) >> 13))) >> 12;\n\n            // var2 = (((BMP280_S32_t)(p>>2)) * ((BMP280_S32_t)dig_P8))>>13;\n            v2 = (s32(compensated >> 2) * dig.P8) >> 13;\n\n            // p = (BMP280_U32_t)((BMP280_S32_t)p + ((var1 + var2 + dig_P7) >> 4));\n            compensated = u32(s32(compensated) + ((v1 + v2 + dig.P7) >> 4));\n\n            // Steps of 1Pa (= 0.01hPa = 0.01mbar) (=> 0.001kPa)\n            computed.pressure = compensated;\n\n            // Calculating pressure at sea level (copied from BMP180)\n            var seapress = compensated / Math.pow(1 - elevation * 0.0000225577, 5.255);\n            var altitude = 44330 * (1 - Math.pow(compensated / seapress, 1 / 5.255));\n\n            // Page 3\n            // ...relative accuracy is ±0.12 hPa, which is equivalent to\n            // ±1 m difference in altitude.\n            computed.altitude = Math.round(altitude - offset);\n\n\n            // Page 23, 24\n            // BME280_U32_t bme280_compensate_H_int32(BME280_S32_t adc_H)\n\n            // BME280_S32_t v_x1_u32r;\n            // v_x1_u32r = (t_fine – ((BME280_S32_t)76800));\n            vx = s32(fine - 76800);\n\n            // v_x1_u32r = (((((adc_H << 14) – (((BME280_S32_t)dig_H4) << 20) – (((BME280_S32_t)dig_H5) * v_x1_u32r)) +\n            // ((BME280_S32_t)16384)) >> 15) * (((((((v_x1_u32r * ((BME280_S32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((BME280_S32_t)dig_H3)) >> 11) + ((BME280_S32_t)32768))) >> 10) + ((BME280_S32_t)2097152)) *\n            // ((BME280_S32_t)dig_H2) + 8192) >> 14));\n\n            vx = (((((H << 14) - s32(dig.H4 << 20) - (dig.H5 * vx)) + Fn.POW_2_14) >> 15) *\n                  (((((((vx * dig.H6) >> 10) * (((vx * dig.H3) >> 11) + Fn.POW_2_15)) >> 10) + Fn.POW_2_21) * dig.H2 + Fn.POW_2_13) >> 14));\n\n            // v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) * ((int32_t)_bme280_calib.dig_H1)) >> 4));\n            vx -= (((((vx >> 15) * (vx >> 15)) >> 7) * s32(dig.H1) >> 4));\n\n            // v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);\n            // v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);\n            vx = Fn.constrain(vx, 0, 419430400);\n\n            computed.humidity = u32(vx >> 12);\n\n            this.emit(\"data\", computed);\n          }.bind(this));\n        }.bind(this));\n      }\n    },\n    identifier: {\n      value: function(opts) {\n        var address = opts.address || Drivers.BME280.ADDRESSES.value[0];\n        return \"bme280-\" + address;\n      }\n    }\n  },\n  SI7020: {\n    ADDRESSES: {\n      value: [0x40]\n    },\n    REGISTER: {\n      value: {\n        HUMIDITY: 0xE5,\n        TEMPERATURE: 0xE0,\n      }\n    },\n    initialize: {\n      value: function(board, opts) {\n        var io = board.io;\n        var address = opts.address || this.ADDRESSES[0];\n\n        opts.address = address;\n\n        // The \"no hold\" measurement requires waiting\n        // _at least_ 22ms between register write and\n        // register read. Delay is measured in μs:\n        // 22ms = 22000μs; recommend 50ms = 50000μs\n        opts.delay = 50000;\n\n        io.i2cConfig(opts);\n\n        // Reference\n        // P. 19\n        var computed = {\n          temperature: null,\n          humidity: null,\n        };\n\n        // Despite the registers being back to back, the SI7020\n        // does not like when 5 bytes are requested, so we put\n        // the two data sources on their own read channels.\n        io.i2cRead(address, this.REGISTER.TEMPERATURE, 2, function(data) {\n          computed.temperature = uint16(data[0], data[1]);\n          this.emit(\"data\", computed);\n        }.bind(this));\n\n        io.i2cRead(address, this.REGISTER.HUMIDITY, 2, function(data) {\n          computed.humidity = uint16(data[0], data[1]);\n          this.emit(\"data\", computed);\n        }.bind(this));\n      }\n    },\n    identifier: {\n      value: function(opts) {\n        var address = opts.address || Drivers.SI7020.ADDRESSES.value[0];\n        return \"si7020-\" + address;\n      }\n    },\n  },\n\n  MS5611: {\n    ADDRESSES: {\n      value: [0x77]\n    },\n    REGISTER: {\n      value: {\n        COEFFICIENTS: 0xA2,\n        READ: 0x00,\n        PRESSURE: 0x40,\n        TEMPERATURE: 0x50,\n        RESET: 0x1E,\n      }\n    },\n    initialize: {\n      value: function(board, opts) {\n        var io = board.io;\n        var address = opts.address || this.ADDRESSES[0];\n        var elevation = null;\n        var offset = 0;\n\n\n        if (typeof opts.elevation !== \"undefined\") {\n          elevation = opts.elevation;\n        }\n\n        if ((elevation != null && elevation <= 0) ||\n            elevation == null) {\n          offset = Math.abs(elevation) + 1;\n          elevation = 1;\n        }\n\n        opts.address = address;\n\n        var computed = {\n          altitude: null,\n          pressure: null,\n          temperature: null,\n        };\n\n        /**\n         * Page 6\n         *\n         * Startup in I2C Mode\n         *\n         * 1. Reset\n         * 2. Read PROM (128 bits of calibration data)\n         * 3. D1 Conversion\n         * 4. D2 Conversion\n         * 5. Read ADC (24 but pressure/temperature)\n         */\n        var mode = opts.mode || 5;\n        /*\n        [\n         ULTRA_LOW_POWER\n         LOW_POWER\n         STANDARD\n         HIGH_RES\n         ULTRA_HIGH_RES *\n         ]\n         */\n\n        var kpDelay = [1, 2, 3, 4, 5, 10][mode];\n\n        /**\n         * Page 7\n         */\n        var cof = {\n          C1: null,\n          C2: null,\n          C3: null,\n          C4: null,\n          C5: null,\n          C6: null,\n        };\n\n        var cKeys = Object.keys(cof);\n\n\n        // TODO: confirm this is actually necessary?\n        opts.delay = kpDelay * 1000;\n\n        io.i2cConfig(opts);\n        io.i2cWrite(address, this.REGISTER.RESET);\n\n        var pCoefficients = new Promise(function(resolve) {\n          // First, a small delay is required following the reset...\n          setTimeout(function() {\n            // Next, each coefficient must be read on it's own.\n            var cofs = cKeys.map(function(key, index) {\n              var register = this.REGISTER.COEFFICIENTS + (index * 2);\n              return new Promise(function(resolve) {\n                io.i2cReadOnce(address, register, 2, function(data) {\n                  cof[key] = uint16(data[0], data[1]);\n                  resolve();\n                });\n              });\n            }.bind(this));\n\n            Promise.all(cofs).then(resolve);\n          }.bind(this), 50);\n        }.bind(this));\n\n        pCoefficients.then(function() {\n          // Page 7, 8\n          //\n          var cycle = 0;\n          var D1, D2;\n          var dT, TEMP, OFF, SENS, P;\n          var TEMP2, OFF2, SENS2;\n\n          var readCycle = function() {\n\n            // cycle 0: temperature\n            // cycle 1: pressure\n\n            var isTemperatureCycle = cycle === 0;\n            var component = (isTemperatureCycle ? 0x50 : 0x40) + mode;\n\n            io.i2cWrite(address, component);\n\n            if (isTemperatureCycle) {\n              D2 = 0;\n              dT = 0;\n              TEMP = 0;\n              TEMP2 = 0;\n              OFF2 = 0;\n              SENS2 = 0;\n            } else {\n              D1 = 0;\n              OFF = 0;\n              SENS = 0;\n              P = 0;\n            }\n\n            // Once the READ_START register is set,\n            // delay the READ_RESULT request based on the\n            // mode value provided by the user, or default.\n            setTimeout(function() {\n              io.i2cReadOnce(address, this.REGISTER.READ, 3, function(data) {\n\n                if (isTemperatureCycle) {\n                  // TEMPERATURE\n                  D2 = uint24(data[0], data[1], data[2]);\n\n                  // Calculate temperature\n                  // Page 7\n                  // Difference between actual and reference temperature [2]\n                  // dT\n                  //  = D2 - TREF\n                  //  = D2 - C5 * (2 ** 8)\n                  dT = D2 - (cof.C5 * Fn.POW_2_8);\n\n                  // Actual temperature (-40…85°C with 0.01°C resolution)\n                  // TEMP\n                  //  = 20°C + dT * TEMP * SENS\n                  //  = 2000 + dT * C6 / (2 ** 23)\n                  TEMP = 2000 + dT * cof.C6 / Fn.POW_2_23;\n\n                  // SECOND ORDER TEMPERATURE COMPENSATION\n                  // Page 8\n                  // These ridiculous magic numbers come from\n                  // the datasheet. No explanation is given.\n                  //\n                  if (TEMP < 2000) {\n                    TEMP2 = Math.pow(dT, 2) / Fn.POW_2_31;\n                    OFF2 = 5 * Math.pow(TEMP - 2000, 2) / 2;\n                    SENS2 = 5 * Math.pow(TEMP - 2000, 2) / Fn.POW_2_2;\n\n                    if (TEMP < -1500) {\n                      OFF2 = OFF2 + 7 * Math.pow(TEMP + 1500, 2);\n                      SENS2 = SENS2 + 11 * Math.pow(TEMP + 1500, 2) / 2;\n                    }\n                  }\n\n\n                  TEMP -= TEMP2;\n\n                  computed.temperature = TEMP / 100;\n                } else {\n                  // PRESSURE\n                  D1 = uint24(data[0], data[1], data[2]);\n\n                  // Offset at actual temperature [3]\n                  // OFF\n                  //  = OFFT1 +TCO* dT = C2 * (2 ** 16) + (C4 * dT )/ (2 ** 7)\n                  OFF = cof.C2 * Fn.POW_2_16 + (cof.C4 * dT) / Fn.POW_2_7;\n\n                  // Sensitivity at actual temperature [4]\n                  // SENS =SENST1 +TCS* dT= C1 * (2 ** 15) + (C3 * dT )/ (2 ** 8)\n                  SENS = cof.C1 * Fn.POW_2_15 + (cof.C3 * dT) / Fn.POW_2_8;\n\n                  // SECOND ORDER TEMPERATURE COMPENSATION\n                  // Page 8\n                  OFF -= OFF2;\n                  SENS -= SENS2;\n\n                  // Temperature compensated pressure (10…1200mbar with 0.01mbar resolution)\n                  // P = D1 * SENS - OFF = (D1 * SENS / 2 21 - OFF) / 2 15\n                  P = (D1 * SENS / Fn.POW_2_21 - OFF) / Fn.POW_2_15;\n\n                  // Steps of 1Pa (= 0.01hPa = 0.01mbar) (=> 0.001kPa)\n                  computed.pressure = P;\n\n                  // Sea level pressure...\n                  var seapress = P / Math.pow(1 - elevation * 0.0000225577, 5.255);\n                  var altitude = 44330 * (1 - Math.pow(P / seapress, 1 / 5.255));\n\n                  computed.altitude = altitude - offset;\n                }\n\n                if (++cycle === 2) {\n                  cycle = 0;\n                  this.emit(\"data\", computed);\n                }\n\n                readCycle();\n              }.bind(this));\n            }.bind(this), kpDelay);\n          }.bind(this);\n\n          // Kick off \"read loop\"\n          //\n          readCycle();\n        }.bind(this));\n      }\n    },\n    identifier: {\n      value: function(opts) {\n        var address = opts.address || Drivers.MS5611.ADDRESSES.value[0];\n        return \"ms5611-\" + address;\n      }\n    },\n  },\n\n  TH02: {\n    ADDRESSES: {\n      value: [0x40]\n    },\n    COMMAND: {\n      value: {\n        MEASURE_HUMIDITY: 0x01,\n        MEASURE_TEMPERATURE: 0x11,\n      }\n    },\n    REGISTER: {\n      value: {\n        STATUS: 0x00,\n        READ: 0x01,\n        CONFIG: 0x03,\n      }\n    },\n    initialize: {\n      value: function(board, opts) {\n        var io = board.io;\n        var address = opts.address || this.ADDRESSES[0];\n\n        opts.address = address;\n\n        var computed = {\n          temperature: null,\n          humidity: null,\n        };\n\n        var cycle = 0;\n\n        io.i2cConfig(\n          Object.assign(opts, {\n            settings: {\n              stopTX: true\n            }\n          })\n        );\n\n        var readCycle = function() {\n          // 1. Determine which data we want to request\n          var isTemperatureCycle = cycle === 0;\n          var command = isTemperatureCycle ?\n            this.COMMAND.MEASURE_TEMPERATURE :\n            this.COMMAND.MEASURE_HUMIDITY;\n\n\n          var conversion = new Promise(function(resolve) {\n            // 2. Send the appropriate measurement/conversion\n            //    command for this read cycle.\n            io.i2cWrite(address, this.REGISTER.CONFIG, command);\n\n            // 3. Await an affirmative status result. This signifies that\n            //    measurement and conversion are complete and values may\n            //    be read from the peripheral register.get\n            //\n            //    Register design like this is really painful to work\n            //    with. These peripherals have ample space to store data\n            //    in different registers, but do not.\n            var requestStatus = function() {\n              io.i2cReadOnce(address, this.REGISTER.STATUS, 1, function(data) {\n                var status = data[0];\n\n                if (!(status & 0x01)) {\n                  resolve();\n                } else {\n                  requestStatus();\n                }\n              });\n            }.bind(this);\n\n            requestStatus();\n          }.bind(this));\n\n          // Page. 16, 18\n          //\n          conversion.then(function() {\n            // Both values will be placed in the 0x01 after\n            // the command is received and the measurement taken.\n\n            // The datasheet _SAYS_ read the MSB and LSB from 0x01 and 0x02,\n            // but in reality, reading from 0x01 produces nothing. Trial and\n            // error testing resulted in discovering the correct data located\n            // in 0x02 & 0x03.\n            //\n            // One might assume that we could then read 2 bytes from 0x02,\n            // but that also produces garbage, so in the end we need to read\n            // 3 bytes from 0x01.\n            Promise.all([\n              new Promise(function(resolve) {\n                io.i2cReadOnce(address, 0x01, 1, function(data) {\n                  resolve(data[0]);\n                });\n              }),\n              new Promise(function(resolve) {\n                io.i2cReadOnce(address, 0x02, 1, function(data) {\n                  resolve(data[0]);\n                });\n              })\n            ]).then(function(data) {\n\n              if (isTemperatureCycle) {\n                computed.temperature = ((uint16(data[0], data[1]) >> 2) / 32) - 50;\n              } else {\n                computed.humidity = ((uint16(data[0], data[1]) >> 4) / 16) - 24;\n              }\n\n              if (++cycle === 2) {\n                cycle = 0;\n                this.emit(\"data\", computed);\n              }\n\n              readCycle();\n            }.bind(this));\n          }.bind(this));\n        }.bind(this);\n\n        readCycle();\n      },\n    },\n    identifier: {\n      value: function(opts) {\n        var address = opts.address || Drivers.TH02.ADDRESSES.value[0];\n        return \"th02-\" + address;\n      }\n    }\n  },\n\n  /**\n   * LSM303C: 6Dof 3-Axis Magnetometer & Accelerometer\n   *\n   * https://learn.sparkfun.com/tutorials/lsm303c-6dof-hookup-guide\n   * https://github.com/sparkfun/LSM303C_6_DOF_IMU_Breakout\n   */\n  LSM303C: {\n    ADDRESSES: {\n      value: {\n        ACC: 0x1D,\n        MAG: 0x1E\n      }\n    },\n    COMMAND: {\n      value: {\n        ACC_SETUP: [0x4, 0x3F, 0x3F, 0x3F],\n        MAG_SETUP: [0xD8, 0x60, 0x40, 0xD8, 0x8, 0x00]\n      }\n    },\n    REGISTER: {\n      value: {\n        ACC_CTRL_SEQ: [0x23, 0x20, 0x20, 0x20],\n        ACC_STATUS: 0x27,\n        ACC_OUTX_L: 0x28,\n        ACC_OUTX_H: 0x29,\n        ACC_OUTY_L: 0x2A,\n        ACC_OUTY_H: 0x2B,\n        ACC_OUTZ_L: 0x2C,\n        ACC_OUTZ_H: 0x2D,\n        MAG_CTRL_SEQ: [0x20, 0x21, 0x24, 0x20, 0x23, 0x22],\n        MAG_STATUS: 0x27,\n        MAG_OUTX_L: 0x28,\n        MAG_OUTX_H: 0x29,\n        MAG_OUTY_L: 0x2A,\n        MAG_OUTY_H: 0x2B,\n        MAG_OUTZ_L: 0x2C,\n        MAG_OUTZ_H: 0x2D,\n        MAG_TEMP_OUT_L: 0x2E,\n        MAG_TEMP_OUT_H: 0x2F,\n      }\n    },\n    initialize: {\n      value: function(board, opts) {\n\n        var ACC_SENSITIVITY = 0.06103515625; // LSB/mg\n        var MAG_SENSITIVITY = 0.00048828125; // LSB/Ga\n\n        var io = board.io;\n        var frequency = this.freq || 40;\n        var addresses = this.ADDRESSES;\n\n        var accelerometer = {};\n        var magnetometer = {};\n        var computed = {\n          temperature: 0,\n          magnetometer,\n          accelerometer\n        };\n\n        // ACC Initialization sequence (4 bytes)\n        var initializeAccelerometer = function() {\n          io.i2cConfig(Object.assign({}, opts, { address: addresses.ACC }));\n          this.REGISTER.ACC_CTRL_SEQ\n            .forEach(function(ctrlReg, i) {\n              io.i2cWrite(addresses.ACC, ctrlReg, this.COMMAND.ACC_SETUP[i]);\n            }.bind(this));\n        }.bind(this);\n\n        // MAG Initialization sequence (6 bytes)\n        var initializeMagnetometer = function() {\n          io.i2cConfig(Object.assign({}, opts, { address: addresses.MAG }));\n          this.REGISTER.MAG_CTRL_SEQ\n            .forEach(function (ctrlReg, i) {\n              io.i2cWrite(addresses.MAG, ctrlReg, this.COMMAND.MAG_SETUP[i]);\n            }.bind(this));\n        }.bind(this);\n\n        var readAccelerometer = function(done) {\n          io.i2cReadOnce(addresses.ACC, this.REGISTER.ACC_OUTX_L, 6, function(data) {\n            accelerometer.x = int16(data[1], data[0]) * ACC_SENSITIVITY;\n            accelerometer.y = int16(data[3], data[2]) * ACC_SENSITIVITY;\n            accelerometer.z = int16(data[5], data[4]) * ACC_SENSITIVITY;\n            done();\n          });\n        }.bind(this);\n\n        var readMagnetometer = function(done) {\n          io.i2cReadOnce(addresses.MAG, this.REGISTER.MAG_OUTX_L, 6, function(data) {\n            magnetometer.x = int16(data[1], data[0]) * MAG_SENSITIVITY;\n            magnetometer.y = int16(data[3], data[2]) * MAG_SENSITIVITY;\n            magnetometer.z = int16(data[5], data[4]) * MAG_SENSITIVITY;\n            done();\n          });\n        }.bind(this);\n\n        var readTemperature = function(done) {\n          io.i2cReadOnce(addresses.MAG, this.REGISTER.MAG_TEMP_OUT_L, 2, function(data) {\n            computed.temperature = int16(data[1], data[0]);\n            done();\n          });\n        }.bind(this);\n\n        // Rinse and repeat\n        var readCycle = function() {\n          Promise.all([\n            new Promise(readAccelerometer),\n            new Promise(readMagnetometer),\n            new Promise(readTemperature)\n          ])\n          .then(function() {\n            this.emit(\"data\", computed);\n            setTimeout(readCycle, frequency);\n          }.bind(this));\n        }.bind(this);\n\n        // Kick off\n        initializeAccelerometer();\n        initializeMagnetometer();\n        readCycle();\n      },\n    },\n    identifier: {\n      value: function(opts) {\n        var address = opts.address || Drivers.LSM303C.ADDRESSES.value[0];\n        return \"lsm303c-\" + address;\n      }\n    }\n  },\n};\n\n// Otherwise known as...\nDrivers.BMP085 = Drivers.BMP180;\nDrivers.GY521 = Drivers.MPU6050;\nDrivers.SI7021 = Drivers.SI7020;\nDrivers.DHT11_I2C_NANO_BACKPACK = Drivers.DHT_I2C_NANO_BACKPACK;\nDrivers.DHT21_I2C_NANO_BACKPACK = Drivers.DHT_I2C_NANO_BACKPACK;\nDrivers.DHT22_I2C_NANO_BACKPACK = Drivers.DHT_I2C_NANO_BACKPACK;\n\n\nDrivers.get = function(board, driverName, opts) {\n  var drivers, driverKey, driver;\n\n  if (!activeDrivers.has(board)) {\n    activeDrivers.set(board, {});\n  }\n\n  opts = opts || {};\n\n  drivers = activeDrivers.get(board);\n  driverKey = Drivers[driverName].identifier.value(opts);\n\n  if (!drivers[driverKey]) {\n    driver = new Emitter();\n    Object.defineProperties(driver, Drivers[driverName]);\n    driver.initialize(board, opts);\n    drivers[driverKey] = driver;\n  }\n\n  return drivers[driverKey];\n};\n\nDrivers.clear = function() {\n  activeDrivers.clear();\n};\n\nvar Controllers = {\n  /**\n   * MPU6050 3-axis Gyro/Accelerometer and Thermometer\n   *\n   * http://playground.arduino.cc/Main/MPU6050\n   */\n\n  MPU6050: {\n    initialize: {\n      value: function(opts) {\n        Components.call(this, \"MPU6050\", opts);\n      }\n    },\n    components: {\n      value: [ACCELEROMETER, GYRO, THERMOMETER]\n    },\n  },\n\n  BNO055: {\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n        var CONTROLLER = \"BNO055\";\n\n        state.calibrationMask = opts.calibrationMask || 0xC0;\n\n        // here we want to catch the events coming out of the driver and re-emit them\n        // not sure what is cleaner here, picking these up from a data event\n        // in the sub controllers, or this\n        var driver = Drivers.get(this.board, CONTROLLER, opts);\n        driver.on(\"calibrated\", function() {\n          this.emit(\"calibrated\");\n        }.bind(this));\n\n        driver.on(\"calibration\", function(state) {\n          this.emit(\"calibration\", state);\n        }.bind(this));\n\n        Components.call(this, CONTROLLER, opts);\n      }\n    },\n    components: {\n      value: [ACCELEROMETER, GYRO, MAGNETOMETER, ORIENTATION, THERMOMETER]\n    },\n    calibration: {\n      get: function() {\n        return this.orientation.calibration;\n      }\n    },\n    isCalibrated: {\n      get: function() {\n        //returns if the system and all sensors are fully calibrated\n        var calibrationMask = priv.get(this).calibrationMask;\n        return (this.orientation.calibration & calibrationMask) === calibrationMask;\n      }\n    }\n  },\n  MPL115A2: {\n    initialize: {\n      value: function(opts) {\n        Components.call(this, \"MPL115A2\", opts);\n      }\n    },\n    components: {\n      value: [BAROMETER, THERMOMETER]\n    },\n  },\n  SHT31D: {\n    initialize: {\n      value: function(opts) {\n        Components.call(this, \"SHT31D\", opts);\n      }\n    },\n    components: {\n      value: [HYGROMETER, THERMOMETER]\n    },\n  },\n  HTU21D: {\n    initialize: {\n      value: function(opts) {\n        Components.call(this, \"HTU21D\", opts);\n      }\n    },\n    components: {\n      value: [HYGROMETER, THERMOMETER]\n    },\n  },\n  HIH6130: {\n    initialize: {\n      value: function(opts) {\n        Components.call(this, \"HIH6130\", opts);\n      }\n    },\n    components: {\n      value: [HYGROMETER, THERMOMETER]\n    },\n  },\n  DHT_I2C_NANO_BACKPACK: {\n    initialize: {\n      value: function(opts) {\n        Components.call(this, \"DHT_I2C_NANO_BACKPACK\", opts);\n      }\n    },\n    components: {\n      value: [HYGROMETER, THERMOMETER]\n    },\n  },\n  MPL3115A2: {\n    initialize: {\n      value: function(opts) {\n        Components.call(this, \"MPL3115A2\", opts);\n      }\n    },\n    components: {\n      value: [ALTIMETER, BAROMETER, THERMOMETER]\n    },\n  },\n  // This controller and driver pair are used for both\n  // BMP180 and BMP085\n  BMP180: {\n    initialize: {\n      value: function(opts) {\n        Components.call(this, \"BMP180\", opts);\n      }\n    },\n    components: {\n      value: [ALTIMETER, BAROMETER, THERMOMETER]\n    },\n  },\n  BMP280: {\n    initialize: {\n      value: function(opts) {\n        Components.call(this, \"BMP280\", opts);\n      }\n    },\n    components: {\n      value: [ALTIMETER, BAROMETER, THERMOMETER]\n    },\n  },\n  BME280: {\n    initialize: {\n      value: function(opts) {\n        Components.call(this, \"BME280\", opts);\n      }\n    },\n    components: {\n      value: [ALTIMETER, BAROMETER, HYGROMETER, THERMOMETER]\n    },\n  },\n  SI7020: {\n    initialize: {\n      value: function(opts) {\n        Components.call(this, \"SI7020\", opts);\n      }\n    },\n    components: {\n      value: [HYGROMETER, THERMOMETER]\n    },\n  },\n  MS5611: {\n    initialize: {\n      value: function(opts) {\n        Components.call(this, \"MS5611\", opts);\n      }\n    },\n    components: {\n      value: [ALTIMETER, BAROMETER, THERMOMETER]\n    },\n  },\n\n  TH02: {\n    initialize: {\n      value: function(opts) {\n        Components.call(this, \"TH02\", opts);\n      }\n    },\n    components: {\n      value: [HYGROMETER, THERMOMETER]\n    },\n  },\n\n  LSM303C: {\n    initialize: {\n      value: function(opts) {\n        Components.call(this, \"LSM303C\", opts);\n      }\n    },\n    components: {\n      value: [MAGNETOMETER, THERMOMETER, ACCELEROMETER]\n    },\n  },\n};\n\n// Otherwise known as...\nControllers.BMP085 = Controllers.BMP180;\nControllers.GY521 = Controllers.MPU6050;\nControllers.SI7021 = Controllers.SI7020;\nControllers.DHT11_I2C_NANO_BACKPACK = Controllers.DHT_I2C_NANO_BACKPACK;\nControllers.DHT21_I2C_NANO_BACKPACK = Controllers.DHT_I2C_NANO_BACKPACK;\nControllers.DHT22_I2C_NANO_BACKPACK = Controllers.DHT_I2C_NANO_BACKPACK;\n\n\nfunction IMU(opts) {\n\n  if (!(this instanceof IMU)) {\n    return new IMU(opts);\n  }\n\n  var controller, state;\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    throw new Error(\"Missing IMU/Multi controller\");\n  }\n\n  this.freq = opts.freq || 20;\n\n  state = {};\n  priv.set(this, state);\n\n  Board.Controller.call(this, controller, opts);\n\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts);\n  }\n\n  // The IMU/Multi isn't considered \"ready\"\n  // until one of the components has notified via\n  // a change event.\n  this.isReady = false;\n\n  setInterval(function() {\n    if (this.isReady) {\n      this.emit(\"data\", this);\n    }\n  }.bind(this), this.freq);\n\n  var awaiting = this.components.slice();\n\n  if (this.components && this.components.length > 0) {\n    this.components.forEach(function(component) {\n      if (!(this[component] instanceof Emitter)) {\n        return;\n      }\n\n      this[component].on(\"change\", function() {\n        if (awaiting.length) {\n          var index = awaiting.indexOf(component);\n\n          if (index !== -1) {\n            awaiting.splice(index, 1);\n          }\n        }\n\n        if (!awaiting.length && !this.isReady) {\n          this.isReady = true;\n        }\n\n        if (this.isReady) {\n          this.emit(\"change\", this, component);\n        }\n      }.bind(this));\n    }, this);\n  }\n}\n\nutil.inherits(IMU, Emitter);\n\nIMU.Drivers = Drivers;\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  IMU.Controllers = Controllers;\n  IMU.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = IMU;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/imu.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/johnny-five.js":
/*!*****************************************************!*\
  !*** ./node_modules/johnny-five/lib/johnny-five.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* istanbul ignore if */\nif (!Array.prototype.includes) {\n  __webpack_require__(/*! ./array-includes-shim */ \"./node_modules/johnny-five/lib/array-includes-shim.js\");\n}\n\nmodule.exports = {\n  // extract-start:apinames\n  Accelerometer: __webpack_require__(/*! ./accelerometer */ \"./node_modules/johnny-five/lib/accelerometer.js\"),\n  Animation: __webpack_require__(/*! ./animation */ \"./node_modules/johnny-five/lib/animation.js\"),\n  Altimeter: __webpack_require__(/*! ./altimeter */ \"./node_modules/johnny-five/lib/altimeter.js\"),\n  Barometer: __webpack_require__(/*! ./barometer */ \"./node_modules/johnny-five/lib/barometer.js\"),\n  Board: __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\"),\n  Button: __webpack_require__(/*! ./button */ \"./node_modules/johnny-five/lib/button.js\"),\n  Color: __webpack_require__(/*! ./color */ \"./node_modules/johnny-five/lib/color.js\"),\n  Collection: __webpack_require__(/*! ./mixins/collection */ \"./node_modules/johnny-five/lib/mixins/collection.js\"),\n  Compass: __webpack_require__(/*! ./compass */ \"./node_modules/johnny-five/lib/compass.js\"),\n  ESC: __webpack_require__(/*! ./esc */ \"./node_modules/johnny-five/lib/esc.js\"),\n  Expander: __webpack_require__(/*! ./expander */ \"./node_modules/johnny-five/lib/expander.js\"),\n  Fn: __webpack_require__(/*! ./fn */ \"./node_modules/johnny-five/lib/fn.js\"),\n  GPS: __webpack_require__(/*! ./gps */ \"./node_modules/johnny-five/lib/gps.js\"),\n  Gripper: __webpack_require__(/*! ./gripper */ \"./node_modules/johnny-five/lib/gripper.js\"),\n  Gyro: __webpack_require__(/*! ./gyro */ \"./node_modules/johnny-five/lib/gyro.js\"),\n  Hygrometer: __webpack_require__(/*! ./hygrometer */ \"./node_modules/johnny-five/lib/hygrometer.js\"),\n  IMU: __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\"),\n  Keypad: __webpack_require__(/*! ./keypad */ \"./node_modules/johnny-five/lib/keypad.js\"),\n  LCD: __webpack_require__(/*! ./lcd */ \"./node_modules/johnny-five/lib/lcd.js\"),\n  Led: __webpack_require__(/*! ./led */ \"./node_modules/johnny-five/lib/led/index.js\"),\n  LedControl: __webpack_require__(/*! ./led/ledcontrol */ \"./node_modules/johnny-five/lib/led/ledcontrol.js\"),\n  Light: __webpack_require__(/*! ./light */ \"./node_modules/johnny-five/lib/light.js\"),\n  Joystick: __webpack_require__(/*! ./joystick */ \"./node_modules/johnny-five/lib/joystick.js\"),\n  Motion: __webpack_require__(/*! ./motion */ \"./node_modules/johnny-five/lib/motion.js\"),\n  Motor: __webpack_require__(/*! ./motor */ \"./node_modules/johnny-five/lib/motor.js\"),\n  Orientation: __webpack_require__(/*! ./orientation */ \"./node_modules/johnny-five/lib/orientation.js\"),\n  Piezo: __webpack_require__(/*! ./piezo */ \"./node_modules/johnny-five/lib/piezo.js\"),\n  Ping: __webpack_require__(/*! ./ping */ \"./node_modules/johnny-five/lib/ping.js\"),\n  Pin: __webpack_require__(/*! ./pin */ \"./node_modules/johnny-five/lib/pin.js\"),\n  Proximity: __webpack_require__(/*! ./proximity */ \"./node_modules/johnny-five/lib/proximity.js\"),\n  Relay: __webpack_require__(/*! ./relay */ \"./node_modules/johnny-five/lib/relay.js\"),\n  Repl: __webpack_require__(/*! ./repl */ \"./node_modules/johnny-five/lib/repl.js\"),\n  Sensor: __webpack_require__(/*! ./sensor */ \"./node_modules/johnny-five/lib/sensor.js\"),\n  Servo: __webpack_require__(/*! ./servo */ \"./node_modules/johnny-five/lib/servo.js\"),\n  ShiftRegister: __webpack_require__(/*! ./shiftregister */ \"./node_modules/johnny-five/lib/shiftregister.js\"),\n  Sonar: __webpack_require__(/*! ./sonar */ \"./node_modules/johnny-five/lib/sonar.js\"),\n  Stepper: __webpack_require__(/*! ./stepper */ \"./node_modules/johnny-five/lib/stepper.js\"),\n  Switch: __webpack_require__(/*! ./switch */ \"./node_modules/johnny-five/lib/switch.js\"),\n  Thermometer: __webpack_require__(/*! ./thermometer */ \"./node_modules/johnny-five/lib/thermometer.js\"),\n  Wii: __webpack_require__(/*! ./wii */ \"./node_modules/johnny-five/lib/wii.js\")\n  // extract-end:apinames\n};\n\n// Customized constructors\n//\n//\nmodule.exports.Board.Virtual = function(opts) {\n  var temp;\n\n  if (opts instanceof module.exports.Expander) {\n    temp = {\n      io: opts\n    };\n  } else {\n    temp = opts;\n  }\n\n  return new module.exports.Board(\n    Object.assign({}, {\n      repl: false,\n      debug: false,\n      sigint: false\n    }, temp)\n  );\n};\n\nmodule.exports.Multi = module.exports.IMU;\n\nmodule.exports.Analog = function(opts) {\n  return new module.exports.Sensor(opts);\n};\n\nmodule.exports.Digital = function(opts) {\n  var pin;\n\n  if (typeof opts === \"number\" || typeof opts === \"string\") {\n    pin = opts;\n    opts = {\n      type: \"digital\",\n      pin: pin\n    };\n  } else {\n    opts.type = opts.type || \"digital\";\n  }\n\n  return new module.exports.Sensor(opts);\n};\n\nmodule.exports.Sensor.Analog = module.exports.Analog;\nmodule.exports.Sensor.Digital = module.exports.Digital;\n\n/**\n * @deprecated Will be deleted in version 1.0.0. Use Thermometer instead.\n */\nmodule.exports.Temperature = module.exports.Thermometer;\n\n\n/**\n * @deprecated Will be deleted in version 1.0.0. Use Motion or Proximity instead.\n */\nmodule.exports.IR = function() {\n  throw new Error(\"IR has been removed. Use Motion or Proximity instead.\");\n};\n\n/**\n * @deprecated Will be deleted in version 1.0.0. Use Proximity instead.\n */\nmodule.exports.IR.Distance = function() {\n  throw new Error(\"IR.Distance has been removed. Use Proximity instead.\");\n};\n\n/**\n * @deprecated Will be deleted in version 1.0.0. Use Proximity instead.\n */\nmodule.exports.IR.Proximity = function() {\n  throw new Error(\"IR.Proximity has been removed. Use Proximity instead.\");\n};\n\n/**\n * @deprecated Will be deleted in version 1.0.0. Use Motion instead.\n */\nmodule.exports.IR.Motion = function() {\n  throw new Error(\"IR.Motion has been removed. Use Motion instead.\");\n};\n\n// TODO: Eliminate .Array for 1.0.0\nmodule.exports.IR.Reflect = {};\nmodule.exports.IR.Reflect.Array = __webpack_require__(/*! ./reflectancearray */ \"./node_modules/johnny-five/lib/reflectancearray.js\");\nmodule.exports.IR.Reflect.Collection = module.exports.IR.Reflect.Array;\n\nmodule.exports.Luxmeter = function(options) {\n  return new module.exports.Light(options);\n};\n\nmodule.exports.Magnetometer = function(options) {\n  return new module.exports.Compass(options);\n};\n\n// Short-handing, Aliases\nmodule.exports.Boards = module.exports.Board.Collection;\nmodule.exports.Buttons = module.exports.Button.Collection;\nmodule.exports.ESCs = module.exports.ESC.Collection;\nmodule.exports.Leds = module.exports.Led.Collection;\nmodule.exports.Led.RGBs = module.exports.Led.RGB.Collection;\nmodule.exports.Motors = module.exports.Motor.Collection;\nmodule.exports.Pins = module.exports.Pin.Collection;\nmodule.exports.Relays = module.exports.Relay.Collection;\nmodule.exports.Sensors = module.exports.Sensor.Collection;\nmodule.exports.Servos = module.exports.Servo.Collection;\nmodule.exports.Switches = module.exports.Switch.Collection;\n\n// Direct Alias\nmodule.exports.Touchpad = module.exports.Keypad;\n\n// Back Compat\nmodule.exports.Nunchuk = module.exports.Wii.Nunchuk;\n\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/johnny-five.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/joystick.js":
/*!**************************************************!*\
  !*** ./node_modules/johnny-five/lib/joystick.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\");\nvar Emitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\nvar Fn = __webpack_require__(/*! ./fn */ \"./node_modules/johnny-five/lib/fn.js\");\nvar priv = new Map();\nvar axes = [\"x\", \"y\"];\n\nfunction Multiplexer(options) {\n  this.pins = options.pins;\n  this.io = options.io;\n\n  // Setup these \"analog\" pins as digital output.\n  this.io.pinMode(this.pins[0], this.io.MODES.OUTPUT);\n  this.io.pinMode(this.pins[1], this.io.MODES.OUTPUT);\n  this.io.pinMode(this.pins[2], this.io.MODES.OUTPUT);\n  this.io.pinMode(this.pins[3], this.io.MODES.OUTPUT);\n}\n\nMultiplexer.prototype.select = function(channel) {\n  this.io.digitalWrite(this.pins[0], channel & 1 ? this.io.HIGH : this.io.LOW);\n  this.io.digitalWrite(this.pins[1], channel & 2 ? this.io.HIGH : this.io.LOW);\n  this.io.digitalWrite(this.pins[2], channel & 4 ? this.io.HIGH : this.io.LOW);\n  this.io.digitalWrite(this.pins[3], channel & 8 ? this.io.HIGH : this.io.LOW);\n};\n\nvar Controllers = {\n  ANALOG: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var axisValues = {\n          x: null,\n          y: null\n        };\n\n        opts.pins.forEach(function(pin, index) {\n          this.io.pinMode(pin, this.io.MODES.ANALOG);\n          this.io.analogRead(pin, function(value) {\n            axisValues[axes[index]] = value;\n\n            if (axisValues.x !== null && axisValues.y !== null) {\n              dataHandler({\n                x: axisValues.x,\n                y: axisValues.y\n              });\n\n              axisValues.x = null;\n              axisValues.y = null;\n            }\n          }.bind(this));\n        }, this);\n      }\n    },\n    toAxis: {\n      value: function(raw, axis) {\n        var state = priv.get(this);\n        return Fn.constrain(Fn.fscale(raw - state[axis].zeroV, -511, 511, -1, 1), -1, 1);\n      }\n    }\n  },\n  ESPLORA: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        // References:\n        //\n        // https://github.com/arduino/Arduino/blob/master/libraries/Esplora/src/Esplora.h\n        // https://github.com/arduino/Arduino/blob/master/libraries/Esplora/src/Esplora.cpp\n        //\n        var multiplexer = new Multiplexer({\n          // Since Multiplexer uses digitalWrite,\n          // we have to send the analog pin numbers\n          // in their \"digital\" pin order form.\n          pins: [18, 19, 20, 21],\n          io: this.io\n        });\n        var channels = [11, 12];\n        var index = 1;\n        var axisValues = {\n          x: null,\n          y: null\n        };\n\n        this.io.pinMode(4, this.io.MODES.ANALOG);\n\n        var handler = function(value) {\n          axisValues[axes[index]] = value;\n\n          if (axisValues.x !== null && axisValues.y !== null) {\n            dataHandler({\n              x: axisValues.x,\n              y: axisValues.y\n            });\n\n            axisValues.x = null;\n            axisValues.y = null;\n          }\n\n          // Remove this handler to all the multiplexer\n          // to setup the next pin for the next read.\n          this.io.removeListener(\"analog-read-4\", handler);\n\n          setTimeout(read, 10);\n        }.bind(this);\n\n        var read = function() {\n          multiplexer.select(channels[index ^= 1]);\n          this.io.analogRead(4, handler);\n        }.bind(this);\n\n        read();\n      }\n    },\n    toAxis: {\n      value: function(raw, axis) {\n        var state = priv.get(this);\n        return Fn.constrain(Fn.fscale(raw - state[axis].zeroV, -511, 511, -1, 1), -1, 1);\n      }\n    }\n  }\n};\n\n\n/**\n * Joystick\n * @constructor\n *\n * five.Joystick([ x, y[, z] ]);\n *\n * five.Joystick({\n *   pins: [ x, y[, z] ]\n *   freq: ms\n * });\n *\n *\n * @param {Object} opts [description]\n *\n */\nfunction Joystick(opts) {\n  if (!(this instanceof Joystick)) {\n    return new Joystick(opts);\n  }\n\n  var controller = null;\n\n  var state = {\n    x: {\n      invert: false,\n      value: 0,\n      previous: 0,\n      zeroV: 0,\n      calibrated: false\n    },\n    y: {\n      invert: false,\n      value: 0,\n      previous: 0,\n      zeroV: 0,\n      calibrated: false\n    }\n  };\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    controller = Controllers.ANALOG;\n  }\n\n  Board.Controller.call(this, controller, opts);\n\n  if (!this.toAxis) {\n    this.toAxis = opts.toAxis || function(raw) {\n      return raw;\n    };\n  }\n\n  state.x.zeroV = opts.zeroV === undefined ? 0 : (opts.zeroV.x || 0);\n  state.y.zeroV = opts.zeroV === undefined ? 0 : (opts.zeroV.y || 0);\n\n  state.x.invert = opts.invertX || opts.invert || false;\n  state.y.invert = opts.invertY || opts.invert || false;\n\n  priv.set(this, state);\n\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts, function(data) {\n      var isChange = false;\n      var computed = {\n        x: null,\n        y: null\n      };\n\n      Object.keys(data).forEach(function(axis) {\n        var value = data[axis];\n        var sensor = state[axis];\n\n        // Set the internal ADC reading value...\n        sensor.value = value;\n\n        if (!state[axis].calibrated) {\n          state[axis].calibrated = true;\n          state[axis].zeroV = value;\n          isChange = true;\n        }\n\n        // ... Get the computed axis value.\n        computed[axis] = this[axis];\n\n        var absAxis = Math.abs(computed[axis]);\n        var absPAxis = Math.abs(sensor.previous);\n\n        if ((absAxis < absPAxis) ||\n          (absAxis > absPAxis)) {\n          isChange = true;\n        }\n\n        sensor.previous = computed[axis];\n      }, this);\n\n      this.emit(\"data\", {\n        x: computed.x,\n        y: computed.y\n      });\n\n      if (isChange) {\n        this.emit(\"change\", {\n          x: computed.x,\n          y: computed.y\n        });\n      }\n    }.bind(this));\n  }\n\n  Object.defineProperties(this, {\n    x: {\n      get: function() {\n        return this.toAxis(state.x.value, \"x\") * (state.x.invert ? -1 : 1);\n      }\n    },\n    y: {\n      get: function() {\n        return this.toAxis(state.y.value, \"y\") * (state.y.invert ? -1 : 1);\n      }\n    }\n  });\n}\n\nutil.inherits(Joystick, Emitter);\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Joystick.Controllers = Controllers;\n  Joystick.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = Joystick;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/joystick.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/keypad.js":
/*!************************************************!*\
  !*** ./node_modules/johnny-five/lib/keypad.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var Emitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\nvar Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\");\nvar Fn = __webpack_require__(/*! ./fn */ \"./node_modules/johnny-five/lib/fn.js\");\n\nvar scale = Fn.scale;\nvar toFixed = Fn.toFixed;\nvar uint16 = Fn.uint16;\n\nvar priv = new Map();\n\nvar aliases = {\n  down: [\"down\", \"press\", \"tap\", \"impact\", \"hit\", \"touch\"],\n  up: [\"up\", \"release\"],\n  hold: [\"hold\"]\n};\n\nfunction flatKeys(opts) {\n  var keys = [];\n\n  if (opts.keys && Array.isArray(opts.keys)) {\n    keys = opts.keys.slice();\n\n    if (keys.every(Array.isArray)) {\n      keys = keys.reduce(function(accum, row) {\n        return accum.concat(row);\n      }, []);\n    }\n  }\n\n  return keys;\n}\n\n// TODO:\n//\n// Provide a mechanism for explicitly naming aliases for buttons\n//\n//\nvar Controllers = {\n  MPR121: {\n    ADDRESSES: {\n      value: [0x5A, 0x5B, 0x5C, 0x5D]\n    },\n    REGISTER: {\n      value: __webpack_require__(/*! ./definitions/mpr121.js */ \"./node_modules/johnny-five/lib/definitions/mpr121.js\")\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n\n        var state = priv.get(this);\n        var address = opts.address || this.ADDRESSES[0];\n        var keys = flatKeys(opts);\n        var keyMap = this.REGISTER.MAPS[opts.controller].KEYS;\n        var targets = this.REGISTER.MAPS[opts.controller].TARGETS;\n        var mapping = Object.keys(keyMap).reduce(function(accum, index) {\n          accum[index] = keyMap[index];\n          return accum;\n        }, []);\n\n        var length = mapping.length;\n        opts.address = address;\n\n        this.io.i2cConfig(opts);\n\n        this.io.i2cWrite(address, this.REGISTER.MPR121_SOFTRESET, 0x63);\n\n        this.io.i2cWrite(address, this.REGISTER.MHD_RISING, 0x01);\n        this.io.i2cWrite(address, this.REGISTER.NHD_AMOUNT_RISING, 0x01);\n        this.io.i2cWrite(address, this.REGISTER.NCL_RISING, 0x00);\n        this.io.i2cWrite(address, this.REGISTER.FDL_RISING, 0x00);\n\n        this.io.i2cWrite(address, this.REGISTER.MHD_FALLING, 0x01);\n        this.io.i2cWrite(address, this.REGISTER.NHD_AMOUNT_FALLING, 0x01);\n        this.io.i2cWrite(address, this.REGISTER.NCL_FALLING, 0xFF);\n        this.io.i2cWrite(address, this.REGISTER.FDL_FALLING, 0x02);\n\n        // Page 12\n        // 6. Touch and Release Threshold (0x41~0x5A)\n        // The threshold is defined as a deviation value from the baseline value,\n        // so it remains constant even baseline value changes. Typically the touch\n        // threshold is a little bigger than the release threshold to touch debounce\n        // and hysteresis. The range of the value is 0~255. For typical touch\n        // application, the value can be in range 0x05~0x30 for example. The setting\n        // of the threshold is depended on the actual application. For the operation\n        // details and how to set the threshold refer to application note AN3892 and\n        // MPR121 design guidelines.\n\n        this.sensitivity = {\n          // Inverted map approximately to 8 bit values:\n          //\n          // press: 12\n          // release: 6\n          //\n          press: Array(12).fill(0.95),\n          release: Array(12).fill(0.975),\n          // These defaults as based on the defaults shown\n          // in examples published by Adafruit\n          // https://github.com/adafruit/Adafruit_MPR121/blob/master/Adafruit_MPR121.cpp#L43\n        };\n\n        // If keys were specified for a MPR121_SHIELD (adafruit shield),\n        // then reverse the keys to align with the output of the.\n        if (opts.keys && opts.controller === \"MPR121_SHIELD\") {\n          keys = keys.reverse();\n        }\n\n        if (opts.sensitivity) {\n          if (Array.isArray(opts.sensitivity)) {\n            // Initialized as:\n            //\n            // new five.Keypad({\n            //   controller: \"MPR121\",\n            //   sensitivity: [\n            //     { press: 0-1, release: 0-1, },\n            //     { press: 0-1, release: 0-1, },\n            //     { press: 0-1, release: 0-1, },\n            //     ...\n            //   ],\n            // });\n            //\n            opts.sensitivity.forEach(function(sensitivity, index) {\n              if (typeof sensitivity.press !== \"undefined\") {\n                this.sensitivity.press[index] = sensitivity.press;\n              }\n\n              if (typeof sensitivity.release !== \"undefined\") {\n                this.sensitivity.release[index] = sensitivity.release;\n              }\n            }, this);\n          } else {\n            // Initialized as:\n            //\n            // new five.Keypad({\n            //   controller: \"MPR121\",\n            //   sensitivity: {\n            //     press: 0-1,\n            //     release: 0-1,\n            //   },\n            // });\n            //\n            if (typeof opts.sensitivity.press !== \"undefined\") {\n              this.sensitivity.press.fill(opts.sensitivity.press);\n            }\n\n            if (typeof opts.sensitivity.release !== \"undefined\") {\n              this.sensitivity.release.fill(opts.sensitivity.release);\n            }\n          }\n        }\n\n        // The chip expects a LOWER value for a HIGHER sensitivity.\n        // Most people don't think this way, so Johnny-Five aligns with\n        // user/developer intuition, which we assume for this case is:\n        //\n        //  \"Higher sensitivity value means greater touch sensitivity\"\n        //\n        // This means that the value we received needs to be inverted\n        // before it's written to the chip threshold configuration.\n        //\n        for (var i = 0; i < 12; i++) {\n          this.io.i2cWrite(\n            address,\n            this.REGISTER.ELE0_TOUCH_THRESHOLD + (i << 1),\n            scale(toFixed(1 - this.sensitivity.press[i], 3), 0, 1, 0, 255)\n          );\n          this.io.i2cWrite(\n            address,\n            this.REGISTER.ELE0_RELEASE_THRESHOLD + (i << 1),\n            scale(toFixed(1 - this.sensitivity.release[i], 3), 0, 1, 0, 255)\n          );\n        }\n\n        this.io.i2cWrite(address, this.REGISTER.FILTER_CONFIG, 0x13);\n        this.io.i2cWrite(address, this.REGISTER.AFE_CONFIGURATION, 0x80);\n\n        this.io.i2cWrite(address, this.REGISTER.AUTO_CONFIG_CONTROL_0, 0x8F);\n        this.io.i2cWrite(address, this.REGISTER.AUTO_CONFIG_USL, 0xE4);\n        this.io.i2cWrite(address, this.REGISTER.AUTO_CONFIG_LSL, 0x94);\n        this.io.i2cWrite(address, this.REGISTER.AUTO_CONFIG_TARGET_LEVEL, 0xCD);\n\n        this.io.i2cWrite(address, this.REGISTER.ELECTRODE_CONFIG, 0xCC);\n\n        if (!keys.length) {\n          keys = Array.from(Object.assign({}, keyMap, {\n            length: length\n          }));\n        }\n\n        state.length = length;\n        state.touches = touches(length);\n        state.keys = keys;\n        state.mapping = mapping;\n        state.targets = targets;\n        state.isMultitouch = true;\n\n        this.io.i2cRead(address, 0x00, 2, function(bytes) {\n          dataHandler(uint16(bytes[1], bytes[0]));\n        });\n      }\n    },\n    toAlias: {\n      value: function(index) {\n        var state = priv.get(this);\n        return state.keys[index];\n      }\n    },\n    toIndices: {\n      value: function(raw) {\n        var state = priv.get(this);\n        var indices = [];\n        for (var i = 0; i < 12; i++) {\n          if (raw & (1 << i)) {\n            indices.push(state.targets[raw & (1 << i)]);\n          }\n        }\n        return indices;\n      }\n    },\n  },\n\n  // https://learn.sparkfun.com/tutorials/vkey-voltage-keypad-hookup-guide\n  VKEY: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n        var aref = opts.aref || this.io.aref || 5;\n        var use5V = Fn.inRange(aref, 4.5, 5.5);\n        var keys = flatKeys(opts);\n        var mapping = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n        var length = 0;\n\n        if (!keys.length) {\n          keys = mapping;\n        }\n\n        state.scale = [\n          use5V ? 17 : 26,\n          use5V ? 40 : 58,\n          use5V ? 496 : 721,\n        ];\n\n        length = mapping.length;\n        state.length = length;\n        state.touches = touches(length);\n        state.mapping = mapping;\n        state.keys = keys;\n        state.isMultitouch = false;\n\n        this.io.pinMode(this.pin, this.io.MODES.ANALOG);\n        this.io.analogRead(this.pin, function(adc) {\n          dataHandler(adc);\n        }.bind(this));\n      },\n    },\n    toAlias: {\n      value: function(index) {\n        var state = priv.get(this);\n        return state.keys[index];\n      }\n    },\n    toIndices: {\n      value: function(raw) {\n        var state = priv.get(this);\n        var length = state.length;\n        var low = state.scale[0];\n        var step = state.scale[1];\n        var high = state.scale[2];\n\n        if (raw < low || raw > high) {\n          return [];\n        }\n\n        return [(length - ((raw - low) / step)) | 0];\n      }\n    }\n  },\n\n  // WaveShare AD\n  //  - http://www.amazon.com/WaveShare-Accessory-buttons-controlled-keyboard/dp/B00KM6UXVS\n  //  - http://www.wvshare.com/product/A_D-Keypad.htm\n  //\n  //  TODO: Create docs to show how to create a DIY keypad\n  //        that works with this class.\n  //\n  ANALOG: {\n    initialize: {\n      value: function(opts, dataHandler) {\n\n        var keys = flatKeys(opts);\n        var mapping = [];\n        var length = 0;\n\n        if (opts.length && !keys.length) {\n          keys = Array.from({\n            length: opts.length\n          }, function(_, key) {\n            return key;\n          });\n        }\n\n        if (!keys.length) {\n          throw new Error(\n            \"Missing `keys`. Analog Keypad requires either a numeric `length` or a `keys` array.\"\n          );\n        }\n\n        mapping = keys;\n        length = mapping.length;\n\n        var state = priv.get(this);\n        // keys + Idle state == length + 1\n        var total = length + 1;\n        var vrange = Math.round(1023 / total);\n        var ranges = Array.from({\n          length: total\n        }, function(_, index) {\n          var start = vrange * index;\n          return Array.from({\n            length: vrange - 1\n          }, function(_, index) {\n            return start + index;\n          });\n        });\n\n        state.length = length;\n        state.ranges = ranges;\n        state.touches = touches(length);\n        state.mapping = mapping;\n        state.keys = keys;\n        state.isMultitouch = true;\n\n        this.io.pinMode(this.pin, this.io.MODES.ANALOG);\n        this.io.analogRead(this.pin, function(adc) {\n          dataHandler(adc);\n        });\n      }\n    },\n    toAlias: {\n      value: function(index) {\n        var state = priv.get(this);\n        return state.keys[index];\n      }\n    },\n    toIndices: {\n      value: function(raw) {\n        var state = priv.get(this);\n        var ranges = state.ranges;\n        var index = ranges.findIndex(function(range) {\n          return range.includes(raw);\n        });\n\n        if (index === state.length) {\n          index--;\n        }\n\n        if (index < 0) {\n          return [];\n        }\n\n        return [index];\n      }\n    }\n  },\n  AT42QT1070: {\n    ADDRESSES: {\n      value: [0x1B]\n    },\n    REGISTER: {\n      value: {\n        READ: 0x03\n      }\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n        var address = opts.address || this.ADDRESSES[0];\n        var keys = flatKeys(opts);\n        var mapping = [0, 1, 2, 3, 4, 5, 6];\n        var length = 0;\n\n        if (!keys.length) {\n          keys = mapping;\n        }\n\n        length = mapping.length;\n\n        state.length = length;\n        state.touches = touches(length);\n        state.mapping = mapping;\n        state.keys = keys;\n        state.isMultitouch = true;\n\n        this.io.i2cConfig(opts);\n        this.io.i2cRead(address, this.REGISTER.READ, 1, function(data) {\n          dataHandler(data[0]);\n        });\n      }\n    },\n    toAlias: {\n      value: function(index) {\n        var state = priv.get(this);\n        return state.keys[index];\n      }\n    },\n    toIndices: {\n      value: function(raw) {\n        var indices = [];\n        for (var i = 0; i < 7; i++) {\n          if (raw & (1 << i)) {\n            indices.push(i);\n          }\n        }\n        return indices;\n      }\n    }\n  },\n\n  \"3X4_I2C_NANO_BACKPACK\": {\n    ADDRESSES: {\n      value: [0x0A, 0x0B, 0x0C, 0x0D]\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n        var address = opts.address || this.ADDRESSES[0];\n        var keys = flatKeys(opts);\n        var mapping = [1, 2, 3, 4, 5, 6, 7, 8, 9, \"*\", 0, \"#\"];\n        var length = 0;\n\n        if (!keys.length) {\n          keys = mapping;\n        }\n\n        length = mapping.length;\n\n        state.length = length;\n        state.touches = touches(length);\n        state.mapping = mapping;\n        state.keys = keys;\n        state.isMultitouch = true;\n\n        opts.address = address;\n\n        this.io.i2cConfig(opts);\n        this.io.i2cRead(address, 2, function(bytes) {\n          dataHandler(uint16(bytes[0], bytes[1]));\n        });\n      }\n    },\n    toAlias: {\n      value: function(index) {\n        var state = priv.get(this);\n        return state.keys[index];\n      }\n    },\n    toIndices: {\n      value: function(raw) {\n        var state = priv.get(this);\n        var indices = [];\n        for (var i = 0; i < state.length; i++) {\n          if (raw & (1 << i)) {\n            indices.push(i);\n          }\n        }\n        return indices;\n      }\n    }\n  },\n  \"4X4_I2C_NANO_BACKPACK\": {\n    ADDRESSES: {\n      value: [0x0A, 0x0B, 0x0C, 0x0D]\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n        var address = opts.address || this.ADDRESSES[0];\n        var keys = flatKeys(opts);\n        var mapping = [1, 2, 3, \"A\", 4, 5, 6, \"B\", 7, 8, 9, \"C\", \"*\", 0, \"#\", \"D\"];\n        var length = 0;\n\n        if (!keys.length) {\n          keys = mapping;\n        }\n\n        length = mapping.length;\n\n        state.length = length;\n        state.touches = touches(length);\n        state.mapping = mapping;\n        state.keys = keys;\n        state.isMultitouch = true;\n\n        opts.address = address;\n\n        this.io.i2cConfig(opts);\n        this.io.i2cRead(address, 2, function(bytes) {\n          dataHandler(uint16(bytes[0], bytes[1]));\n        });\n      }\n    },\n    toAlias: {\n      value: function(index) {\n        var state = priv.get(this);\n        return state.keys[index];\n      }\n    },\n    toIndices: {\n      value: function(raw) {\n        var state = priv.get(this);\n        var indices = [];\n        for (var i = 0; i < state.length; i++) {\n          if (raw & (1 << i)) {\n            indices.push(i);\n          }\n        }\n        return indices;\n      }\n    }\n  },\n  SX1509: {\n    ADDRESSES: {\n      value: [0x0A, 0x0B, 0x0C, 0x0D]\n    },\n    REGISTER: {\n      value: {\n        PULLUP: 0x03,\n        OPEN_DRAIN: 0x05,\n        DIR: 0x07,\n        DIR_B: 0x0E,\n        DIR_A: 0x0F,\n        // OPEN_DRAIN_B: 0x0E,\n        // OPEN_DRAIN_A: 0x0F,\n      },\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n        var address = opts.address || this.ADDRESSES[0];\n        var keys = flatKeys(opts);\n        var mapping = [1, 2, 3, 4, 5, 6, 7, 8, 9, \"*\", 0, \"#\"];\n        var length = 0;\n\n        if (!keys.length) {\n          keys = mapping;\n        }\n\n        length = mapping.length;\n\n        state.length = length;\n        state.touches = touches(length);\n        state.mapping = mapping;\n        state.keys = keys;\n        state.isMultitouch = true;\n\n        opts.address = address;\n\n        this.io.i2cConfig(opts);\n\n        this.io.i2cWriteReg(address, this.REGISTER.DIR, 0xF0);\n        this.io.i2cWriteReg(address, this.REGISTER.OPEN_DRAIN, 0x0F);\n        this.io.i2cWriteReg(address, this.REGISTER.PULLUP, 0xF0);\n\n        this.io.i2cRead(address, 2, function(bytes) {\n          dataHandler(uint16(bytes[0], bytes[1]));\n        });\n      }\n    },\n    toAlias: {\n      value: function(index) {\n        var state = priv.get(this);\n        return state.keys[index];\n      }\n    },\n    toIndices: {\n      value: function(raw) {\n        var state = priv.get(this);\n        var indices = [];\n        for (var i = 0; i < state.length; i++) {\n          if (raw & (1 << i)) {\n            indices.push(i);\n          }\n        }\n        return indices;\n      }\n    }\n  },\n};\n\n\n// Otherwise known as...\nControllers.MPR121QR2 = Controllers.MPR121;\nControllers.MPR121QR2_SHIELD = Controllers.MPR121;\nControllers.MPR121_KEYPAD = Controllers.MPR121;\nControllers.MPR121_SHIELD = Controllers.MPR121;\nControllers.QTOUCH = Controllers.AT42QT1070;\n\nfunction touches(length) {\n  return Array.from({\n    length: length\n  }, function() {\n    return {\n      timeout: null,\n      value: 0,\n    };\n  });\n}\n\nfunction Keypad(opts) {\n\n  if (!(this instanceof Keypad)) {\n    return new Keypad(opts);\n  }\n\n  // Initialize a Device instance on a Board\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  var raw = null;\n  var controller = null;\n  var state = {\n    touches: null,\n    timeout: null,\n    length: null,\n    keys: null,\n    mapping: null,\n    holdtime: null,\n  };\n\n  var trigger = Fn.debounce(function(type, value) {\n    var event = {\n      type: type,\n      which: value,\n      timestamp: Date.now()\n    };\n    aliases[type].forEach(function(type) {\n      this.emit(type, event);\n    }, this);\n\n    this.emit(\"change\", Object.assign({}, event));\n  }, 5);\n\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    controller = Controllers.ANALOG;\n  }\n\n  Board.Controller.call(this, controller, opts);\n\n  state.holdtime = opts.holdtime ? opts.holdtime : 500;\n\n  priv.set(this, state);\n\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts, function(data) {\n\n      raw = data;\n\n      var now = Date.now();\n      var indices = this.toIndices(data);\n      var kLength = state.length;\n\n      var lists = {\n        down: [],\n        hold: [],\n        up: [],\n      };\n\n      var target = null;\n      var alias = null;\n\n      for (var k = 0; k < kLength; k++) {\n        alias = this.toAlias(k);\n\n        if (indices.includes(k)) {\n          if (state.touches[k].value === 0) {\n\n            state.touches[k].timeout = now + state.holdtime;\n            lists.down.push(alias);\n\n          } else if (state.touches[k].value === 1) {\n            if (state.touches[k].timeout !== null && now > state.touches[k].timeout) {\n              state.touches[k].timeout = now + state.holdtime;\n              lists.hold.push(alias);\n            }\n          }\n\n          state.touches[k].value = 1;\n        } else {\n          if (state.touches[k].value === 1) {\n            state.touches[k].timeout = null;\n            lists.up.push(alias);\n          }\n          state.touches[k].value = 0;\n        }\n        target = null;\n        alias = null;\n      }\n\n      Object.keys(lists).forEach(function(key) {\n        var list = lists[key];\n\n        if (list.length) {\n          trigger.call(this, key, list);\n        }\n      }, this);\n    }.bind(this));\n  }\n\n  Object.defineProperties(this, {\n    isMultitouch: {\n      get: function() {\n        return state.isMultitouch;\n      }\n    },\n    value: {\n      get: function() {\n        return raw;\n      }\n    },\n  });\n}\n\nutil.inherits(Keypad, Emitter);\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Keypad.Controllers = Controllers;\n  Keypad.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = Keypad;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/keypad.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/lcd-chars.js":
/*!***************************************************!*\
  !*** ./node_modules/johnny-five/lib/lcd-chars.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// http://www.quinapalus.com/hd44780udg.html\n// http://www.darreltaylor.com/files/CustChar.htm\n\nmodule.exports = {\n  DEFAULT: {\n    \"0\": [0xe, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0xe],\n    \"1\": [0x2, 0x6, 0xe, 0x6, 0x6, 0x6, 0x6],\n    \"2\": [0xe, 0x1b, 0x3, 0x6, 0xc, 0x18, 0x1f],\n    \"3\": [0xe, 0x1b, 0x3, 0xe, 0x3, 0x1b, 0xe],\n    \"4\": [0x3, 0x7, 0xf, 0x1b, 0x1f, 0x3, 0x3],\n    \"5\": [0x1f, 0x18, 0x1e, 0x3, 0x3, 0x1b, 0xe],\n    \"6\": [0xe, 0x1b, 0x18, 0x1e, 0x1b, 0x1b, 0xe],\n    \"7\": [0x1f, 0x3, 0x6, 0xc, 0xc, 0xc, 0xc],\n    \"8\": [0xe, 0x1b, 0x1b, 0xe, 0x1b, 0x1b, 0xe],\n    \"9\": [0xe, 0x1b, 0x1b, 0xf, 0x3, 0x1b, 0xe],\n    \"10\": [0x17, 0x15, 0x15, 0x15, 0x17, 0x0, 0x1f],\n    \"11\": [0xa, 0xa, 0xa, 0xa, 0xa, 0x0, 0x1f],\n    \"12\": [0x17, 0x11, 0x17, 0x14, 0x17, 0x0, 0x1f],\n    \"13\": [0x17, 0x11, 0x13, 0x11, 0x17, 0x0, 0x1f],\n    \"14\": [0x15, 0x15, 0x17, 0x11, 0x11, 0x0, 0x1f],\n    \"15\": [0x17, 0x14, 0x17, 0x11, 0x17, 0x0, 0x1f],\n    \"16\": [0x17, 0x14, 0x17, 0x15, 0x17, 0x0, 0x1f],\n    \"17\": [0x17, 0x11, 0x12, 0x12, 0x12, 0x0, 0x1f],\n    \"18\": [0x17, 0x15, 0x17, 0x15, 0x17, 0x0, 0x1f],\n    \"19\": [0x17, 0x15, 0x17, 0x11, 0x17, 0x0, 0x1f],\n    circle: [0x0, 0xe, 0x11, 0x11, 0x11, 0xe, 0x0],\n    cdot: [0x0, 0xe, 0x11, 0x15, 0x11, 0xe, 0x0],\n    donut: [0x0, 0xe, 0x1f, 0x1b, 0x1f, 0xe, 0x0],\n    ball: [0x0, 0xe, 0x1f, 0x1f, 0x1f, 0xe, 0x0],\n\n    square: [0x0, 0x1f, 0x11, 0x11, 0x11, 0x1f, 0x0],\n    sdot: [0x0, 0x1f, 0x11, 0x15, 0x11, 0x1f, 0x0],\n    fbox: [0x0, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0],\n    sbox: [0x0, 0x0, 0xe, 0xa, 0xe, 0x0, 0x0],\n    sfbox: [0x0, 0x0, 0xe, 0xe, 0xe, 0x0, 0x0],\n    bigpointerright: [0x8, 0xc, 0xa, 0x9, 0xa, 0xc, 0x8],\n    bigpointerleft: [0x2, 0x6, 0xa, 0x12, 0xa, 0x6, 0x2],\n    arrowright: [0x8, 0xc, 0xa, 0x9, 0xa, 0xc, 0x8],\n    arrowleft: [0x2, 0x6, 0xa, 0x12, 0xa, 0x6, 0x2],\n    ascprogress1: [0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10],\n    ascprogress2: [0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18],\n    ascprogress3: [0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c],\n    ascprogress4: [0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e],\n    fullprogress: [0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f],\n    descprogress1: [1, 1, 1, 1, 1, 1, 1, 1],\n    descprogress2: [3, 3, 3, 3, 3, 3, 3, 3],\n    descprogress3: [7, 7, 7, 7, 7, 7, 7, 7],\n    descprogress4: [15, 15, 15, 15, 15, 15, 15, 15],\n    ascchart1: [31, 0, 0, 0, 0, 0, 0, 0],\n    ascchart2: [31, 31, 0, 0, 0, 0, 0, 0],\n    ascchart3: [31, 31, 31, 0, 0, 0, 0, 0],\n    ascchart4: [31, 31, 31, 31, 0, 0, 0, 0],\n    ascchart5: [31, 31, 31, 31, 31, 0, 0, 0],\n    ascchart6: [31, 31, 31, 31, 31, 31, 0, 0],\n    ascchart7: [31, 31, 31, 31, 31, 31, 31, 0],\n    descchart1: [0, 0, 0, 0, 0, 0, 0, 31],\n    descchart2: [0, 0, 0, 0, 0, 0, 31, 31],\n    descchart3: [0, 0, 0, 0, 0, 31, 31, 31],\n    descchart4: [0, 0, 0, 0, 31, 31, 31, 31],\n    descchart5: [0, 0, 0, 31, 31, 31, 31, 31],\n    descchart6: [0, 0, 31, 31, 31, 31, 31, 31],\n    descchart7: [0, 31, 31, 31, 31, 31, 31, 31],\n    borderleft1: [1, 1, 1, 1, 1, 1, 1, 1],\n    borderleft2: [3, 2, 2, 2, 2, 2, 2, 3],\n    borderleft3: [7, 4, 4, 4, 4, 4, 4, 7],\n    borderleft4: [15, 8, 8, 8, 8, 8, 8, 15],\n    borderleft5: [31, 16, 16, 16, 16, 16, 16, 31],\n    bordertopbottom5: [31, 0, 0, 0, 0, 0, 0, 31],\n    borderright1: [16, 16, 16, 16, 16, 16, 16, 16],\n    borderright2: [24, 8, 8, 8, 8, 8, 8, 24],\n    borderright3: [28, 4, 4, 4, 4, 4, 4, 28],\n    borderright4: [30, 2, 2, 2, 2, 2, 2, 30],\n    borderright5: [31, 1, 1, 1, 1, 1, 1, 31],\n    box1: [3, 3, 3, 0, 0, 0, 0],\n    box2: [24, 24, 24, 0, 0, 0, 0],\n    box3: [27, 27, 27, 0, 0, 0, 0],\n    box4: [0, 0, 0, 0, 3, 3, 3],\n    box5: [3, 3, 3, 0, 3, 3, 3],\n    box6: [24, 24, 24, 0, 3, 3, 3],\n    box7: [27, 27, 27, 0, 3, 3, 3],\n    box8: [0, 0, 0, 0, 24, 24, 24],\n    box9: [3, 3, 3, 0, 24, 24, 24],\n    box10: [24, 24, 24, 0, 24, 24, 24],\n    box11: [27, 27, 27, 0, 24, 24, 24],\n    box12: [0, 0, 0, 0, 27, 27, 27],\n    box13: [3, 3, 3, 0, 27, 27, 27],\n    box14: [24, 24, 24, 0, 27, 27, 27],\n    box15: [27, 27, 27, 0, 27, 27, 27],\n    euro: [3, 4, 30, 8, 30, 8, 7],\n    cent: [0, 0, 14, 17, 16, 21, 14, 8],\n    speaker: [1, 3, 15, 15, 15, 3, 1],\n    sound: [8, 16, 0, 24, 0, 16, 8],\n    x: [0, 27, 14, 4, 14, 27, 0],\n    target: [0, 10, 17, 21, 17, 10, 0],\n    pointerright: [0, 8, 12, 14, 12, 8, 0],\n    pointerup: [0, 0, 4, 14, 31, 0, 0],\n    pointerleft: [0, 2, 6, 14, 6, 2, 0],\n    pointerdown: [0, 0, 31, 14, 4, 0, 0],\n    arrowne: [0, 15, 3, 5, 9, 16, 0],\n    arrownw: [0, 30, 24, 20, 18, 1, 0],\n    arrowsw: [0, 1, 18, 20, 24, 30, 0],\n    arrowse: [0, 16, 9, 5, 3, 15, 0],\n    dice1: [0, 0, 0, 4, 0, 0, 0],\n    dice2: [0, 16, 0, 0, 0, 1, 0],\n    dice3: [0, 16, 0, 4, 0, 1, 0],\n    dice4: [0, 17, 0, 0, 0, 17, 0],\n    dice5: [0, 17, 0, 4, 0, 17, 0],\n    dice6: [0, 17, 0, 17, 0, 17, 0],\n    bell: [4, 14, 14, 14, 31, 0, 4],\n    smile: [0, 10, 0, 17, 14, 0, 0],\n    note: [2, 3, 2, 14, 30, 12, 0],\n    clock: [0, 14, 21, 23, 17, 14, 0],\n    heart: [0, 10, 31, 31, 31, 14, 4, 0],\n    duck: [0, 12, 29, 15, 15, 6, 0],\n    check: [0, 1, 3, 22, 28, 8, 0],\n    retarrow: [1, 1, 5, 9, 31, 8, 4],\n    runninga: [6, 6, 5, 14, 20, 4, 10, 17],\n    runningb: [6, 6, 4, 14, 14, 4, 10, 10]\n  }\n};\n\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/lcd-chars.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/lcd.js":
/*!*********************************************!*\
  !*** ./node_modules/johnny-five/lib/lcd.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\");\nvar Pin = __webpack_require__(/*! ./pin */ \"./node_modules/johnny-five/lib/pin.js\");\nvar lcdCharacters = __webpack_require__(/*! ./lcd-chars */ \"./node_modules/johnny-five/lib/lcd-chars.js\");\nvar RGB = __webpack_require__(/*! ./led/rgb */ \"./node_modules/johnny-five/lib/led/rgb.js\");\n\nvar priv = new Map();\n\n/**\n * This atrocity is unfortunately necessary.\n * If any other approach can be found, patches\n * will gratefully be accepted.\n */\nfunction sleepus(usDelay) {\n  var startTime = process.hrtime();\n  var deltaTime;\n  var usWaited = 0;\n\n  while (usDelay > usWaited) {\n    deltaTime = process.hrtime(startTime);\n    usWaited = (deltaTime[0] * 1E9 + deltaTime[1]) / 1000;\n  }\n}\n\n/**\n * This atrocity is unfortunately necessary.\n * If any other approach can be found, patches\n * will gratefully be accepted.\n */\nfunction sleep(ms) {\n  sleepus(ms * 1000);\n}\n\n\n// TODO:  Migrate this to the new codified Expander class.\n//\n// - add portMode to PCF8574 controller\n// - add portWrite to PCF8574 controller\n//\n//\n// TODO:  Investigate adding the above methods to\n//        all expander controllers.\n//\nfunction Expander(address, io) {\n  this.address = address;\n  this.mask = 0xFF;\n  this.memory = 0x00;\n  this.io = io;\n}\n\nExpander.prototype.pinMode = function(pin, dir) {\n  if (dir === 0x01) {\n    this.mask &= ~(1 << pin);\n  } else {\n    this.mask |= 1 << pin;\n  }\n};\n\nExpander.prototype.portMode = function(dir) {\n  this.mask = dir === 0x00 ? 0xFF : 0x00;\n};\n\nExpander.prototype.portWrite = function(value) {\n  this.memory = value & ~(this.mask);\n  this.io.i2cWrite(this.address, this.memory);\n};\n\n\n\n\n// const-caps throughout serve to indicate the\n// \"const-ness\" of the binding to the reader\n// and nothing more.\n\nvar REGISTER = {\n  DEFAULT: {\n    SHIFT_LEFT: 0x04,\n\n    CLEAR: 0x01,\n    HOME: 0x02,\n    ENTRY: 0x04,\n    DISPLAY: 0x08,\n    DIMENSIONS: 0x20,\n    CURSORSHIFT: 0x10,\n\n    SETCGRAMADDR: 0x40,\n    SETDDRAMADDR: 0x80,\n\n    // Command And Control\n\n    DATA: 0x40,\n    COMMAND: 0x80,\n\n    // flags for display entry mode\n    ENTRYRIGHT: 0x00,\n    ENTRYLEFT: 0x02,\n    ENTRYSHIFTINCREMENT: 0x01,\n    ENTRYSHIFTDECREMENT: 0x00,\n\n    // flags for display on/off control\n    DISPLAYON: 0x04,\n    DISPLAYOFF: 0x00,\n    CURSORON: 0x02,\n    CURSOROFF: 0x00,\n    BLINKON: 0x01,\n    BLINKOFF: 0x00,\n\n    // flags for display/cursor shift\n    DISPLAYMOVE: 0x08,\n    CURSORMOVE: 0x00,\n    MOVERIGHT: 0x04,\n    MOVELEFT: 0x00,\n\n    // flags for function set\n    BITMODE: {\n      4: 0x00,\n      8: 0x10,\n    },\n\n    LINE: {\n      1: 0x00,\n      2: 0x08\n    },\n\n    DOTS: {\n      \"5x10\": 0x04,\n      \"5x8\": 0x00\n    },\n\n    // flags for backlight control\n    BACKLIGHT_ON: 0x08,\n    BACKLIGHT_OFF: 0x00,\n\n    MEMORYLIMIT: 0x08,\n\n    // Control\n    // Enable\n    EN: 0x04,\n    // Read/Write\n    RW: 0x02,\n    // Register Select\n    RS: 0x01,\n\n    // DATA\n    D4: 0x04,\n    D5: 0x05,\n    D6: 0x06,\n    D7: 0x07,\n  }\n};\n\nvar Controllers = {\n  JHD1313M1: {\n    REGISTER: {\n      value: REGISTER.DEFAULT,\n    },\n    CHARS: {\n      value: lcdCharacters.DEFAULT,\n    },\n    initialize: {\n      value: function(opts) {\n\n        // LCD: 0x3E\n        // RGB: 0x62\n        this.address = {\n          lcd: opts.address || 0x3E,\n          rgb: 0x62\n        };\n\n        opts.address = this.address;\n\n        this.io.i2cConfig(opts);\n\n        this.lines = opts.lines || 2;\n        this.rows = opts.rows || 2;\n        this.cols = opts.cols || 16;\n        this.dots = opts.dots || \"5x8\";\n\n\n        var display = this.REGISTER.DISPLAY | this.REGISTER.DISPLAYON | this.REGISTER.CURSOROFF | this.REGISTER.BLINKOFF;\n\n        var state = {\n          display: display,\n          characters: {},\n          index: this.REGISTER.MEMORYLIMIT - 1,\n          backlight: {\n            polarity: 1,\n            pin: null,\n            value: null\n          }\n        };\n\n        priv.set(this, state);\n\n        // Operations within the following labelled block are init-only,\n        // but _do_ block the process negligible number of milliseconds.\n        blocking: {\n          var lines = this.REGISTER.DIMENSIONS | this.REGISTER.LINE[2];\n          // Copied from Grove Studio lib.\n          // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!\n          // according to datasheet, we need at least 40ms after\n          // power rises above 2.7V before sending commands.\n          // Arduino can turn on way before 4.5V so we'll wait 50\n\n\n\n          sleep(50);\n          this.command(lines);\n          sleep(5);\n          this.command(lines);\n          this.command(lines);\n          this.command(lines);\n          sleep(5);\n\n          this.command(\n            this.REGISTER.ENTRY |\n            this.REGISTER.ENTRYLEFT |\n            this.REGISTER.ENTRYSHIFTDECREMENT\n          );\n\n          this.on();\n          this.clear();\n          this.home();\n        }\n\n        // Backlight initialization\n\n\n\n        this.bgOn();\n\n        if (opts.color) {\n          this.bgColor(opts.color);\n        } else {\n          this.bgColor(\"black\");\n        }\n      },\n    },\n    clear: {\n      value: function() {\n        return this.command(this.REGISTER.CLEAR);\n      }\n    },\n    setCursor: {\n      value: function(col, row) {\n        return this.command(row === 0 ? col | 0x80 : col | 0xc0);\n      }\n    },\n    autoscroll: {\n      value: function() {\n        var state = priv.get(this);\n\n        state.display = this.REGISTER.ENTRYLEFT | this.REGISTER.ENTRYSHIFTINCREMENT;\n        this.command(this.REGISTER.ENTRY | state.display);\n\n        return this;\n      }\n    },\n    bgColor: {\n      value: function(red, green, blue) {\n        var rgb = RGB.ToRGB(red, green, blue);\n        var address = this.address.rgb;\n\n        this.io.i2cWrite(address, [0x00, 0]);\n        this.io.i2cWrite(address, [0x01, 0]);\n\n        // TRY THIS IN ONE CALL!\n        this.io.i2cWrite(address, [0x04, rgb.red]);\n        this.io.i2cWrite(address, [0x03, rgb.green]);\n        this.io.i2cWrite(address, [0x02, rgb.blue]);\n\n        return this;\n      }\n    },\n    bgOn: {\n      value: function() {\n        this.io.i2cWrite(this.address.rgb, [this.REGISTER.BACKLIGHT_ON, 0xAA]);\n        return this;\n      }\n    },\n    bgOff: {\n      value: function() {\n        this.io.i2cWrite(this.address.rgb, [this.REGISTER.BACKLIGHT_ON, 0x00]);\n        return this;\n      }\n    },\n    command: {\n      value: function(mode, value) {\n        if (arguments.length === 1) {\n          value = mode;\n          mode = this.REGISTER.COMMAND;\n        }\n\n        if (mode === this.REGISTER.DATA) {\n          return this.send(value);\n        }\n\n        return this.writeBits(this.REGISTER.COMMAND, value);\n      }\n    },\n    send: {\n      value: function(value) {\n        return this.writeBits(this.REGISTER.DATA, value);\n      }\n    },\n    writeBits: {\n      value: function(mode, value) {\n        this.io.i2cWrite(this.address.lcd, [mode, value]);\n        return this;\n      }\n    },\n    hilo: {\n      value: function(callback) {\n        callback.call(this);\n      }\n    },\n  },\n\n\n  PCF8574: {\n\n    REGISTER: {\n      value: Object.assign({}, REGISTER.DEFAULT, {\n        COMMAND: 0x00,\n        DATA: 0x01,\n        BACKLIGHT_ON: 0xFF,\n        BACKLIGHT_OFF: 0X00\n      }),\n    },\n    CHARS: {\n      value: lcdCharacters.DEFAULT,\n    },\n    initialize: {\n      value: function(opts) {\n\n        this.bitMode = opts.bitMode || 4;\n        this.lines = opts.lines || 2;\n        this.rows = opts.rows || 2;\n        this.cols = opts.cols || 16;\n        this.dots = opts.dots || \"5x8\";\n\n        if (!opts.address) {\n          opts.address = [\"PCF8574A\", \"PCF8574AT\"].includes(opts.controller) ?\n            0x3F : 0x27;\n\n          /*\n            | A2 | A1 | A0 | PCF8574(T) | PCF8574A(T) |\n            |----|----|----|---------|----------|\n            | L  | L  | L  | 0x20    | 0x38     |\n            | L  | L  | H  | 0x21    | 0x39     |\n            | L  | H  | L  | 0x22    | 0x3A     |\n            | L  | H  | H  | 0x23    | 0x3B     |\n            | H  | L  | L  | 0x24    | 0x3C     |\n            | H  | L  | H  | 0x25    | 0x3D     |\n            | H  | H  | L  | 0x26    | 0x3E     |\n            | H  | H  | H  | 0x27    | 0x3F     |\n\n            TODO: move to API docs\n           */\n        }\n\n        this.io.i2cConfig(opts);\n\n        this.address = {\n          lcd: opts.address\n        };\n\n        // Ported from https://bitbucket.org/fmalpartida/new-liquidcrystal\n        this.expander = new Expander(this.address.lcd, this.io);\n        this.expander.portMode(this.io.MODES.OUTPUT);\n        this.expander.portWrite(0);\n\n        var backlight = opts.backlight || {\n          polarity: 0,\n          pin: 3\n        };\n\n        backlight.pin = typeof backlight.pin === \"undefined\" ? 3 : backlight.pin;\n        backlight.polarity = typeof backlight.polarity === \"undefined\" ? 0 : backlight.polarity;\n\n        var dimensions = this.REGISTER.BITMODE[this.bitMode] |\n          this.REGISTER.LINE[this.lines] |\n          this.REGISTER.DOTS[this.dots];\n\n        var display = this.REGISTER.DISPLAY |\n          this.REGISTER.DISPLAYON |\n          this.REGISTER.CURSOROFF |\n          this.REGISTER.BLINKOFF;\n\n        var entry = this.REGISTER.ENTRYLEFT |\n          this.REGISTER.ENTRYSHIFTDECREMENT;\n\n\n        var state = {\n          display: display,\n          characters: {},\n          index: this.REGISTER.MEMORYLIMIT - 1,\n          backlight: {\n            polarity: backlight.polarity,\n            pinMask: 1 << backlight.pin,\n            statusMask: 0x00\n          },\n          data: [\n            1 << this.REGISTER.D4,\n            1 << this.REGISTER.D5,\n            1 << this.REGISTER.D6,\n            1 << this.REGISTER.D7\n          ]\n        };\n\n        priv.set(this, state);\n\n        var toggle = 0x03 << this.REGISTER.SHIFT_LEFT;\n\n        // Operations within the following labelled block are init-only,\n        // but _do_ block the process for negligible number of milliseconds.\n        blocking: {\n          //\n          // Toggle write/pulse to reset the LCD component.\n          //\n          this.expander.portWrite(toggle);\n          this.pulse(toggle);\n          sleep(4);\n\n          this.expander.portWrite(toggle);\n          this.pulse(toggle);\n          sleep(4);\n\n          this.expander.portWrite(toggle);\n          this.pulse(toggle);\n\n          toggle = 0x02 << this.REGISTER.SHIFT_LEFT;\n\n          this.expander.portWrite(toggle);\n          this.pulse(toggle);\n\n          // Initialize the reset component\n          this.command(this.REGISTER.DIMENSIONS | dimensions);\n\n          // Set display details\n          this.command(state.display);\n\n          // Now that the initial display is set,\n          // overwrite with the \"entry\" bits\n          state.display = entry;\n\n          this.command(this.REGISTER.ENTRY | state.display);\n\n          this.on();\n          this.clear();\n          this.backlight();\n        }\n      },\n    },\n    clear: {\n      value: function() {\n        this.command(this.REGISTER.CLEAR);\n        sleep(2);\n        return this;\n\n      }\n    },\n    backlight: {\n      value: function(value) {\n        var state = priv.get(this);\n        var mask;\n\n        value = typeof value === \"undefined\" ? 255 : value;\n\n        if (state.backlight.pinMask !== 0x00) {\n          if ((state.backlight.polarity === 0 && value > 0) ||\n            (state.backlight.polarity === 1 && value === 0)) {\n\n            mask = 0xFF;\n          } else {\n            mask = 0x00;\n          }\n\n          state.backlight.statusMask = state.backlight.pinMask & mask;\n\n          this.expander.portWrite(state.backlight.statusMask);\n        }\n\n        return this;\n      }\n    },\n\n    createChar: {\n      value: function(name, charMap) {\n        var state = priv.get(this);\n        var address;\n\n        if (typeof name === \"number\") {\n          address = name & 0x07;\n        } else {\n          address = state.index;\n          state.index--;\n          if (state.index === -1) {\n            state.index = this.REGISTER.MEMORYLIMIT - 1;\n          }\n        }\n\n        this.command(this.REGISTER.SETCGRAMADDR | (address << 3));\n\n        blocking: {\n          sleep(1);\n\n          for (var i = 0; i < 8; i++) {\n            this.command(this.REGISTER.DATA, charMap[i]);\n            sleep(1);\n          }\n        }\n\n        state.characters[name] = address;\n\n        return address;\n      }\n    },\n    noBacklight: {\n      value: function() {\n        this.backlight(0);\n      }\n    },\n    on: {\n      value: function() {\n        var state = priv.get(this);\n\n        state.display |= this.REGISTER.DISPLAYON;\n        this.command(this.REGISTER.DISPLAY | state.display);\n\n        return this;\n      }\n    },\n    off: {\n      value: function() {\n        var state = priv.get(this);\n\n        state.display &= ~this.REGISTER.DISPLAYON;\n        this.command(this.REGISTER.DISPLAY | state.display);\n\n        return this;\n      }\n    },\n    hilo: {\n      value: function(callback) {\n        callback.call(this);\n      }\n    },\n    command: {\n      value: function(mode, value) {\n\n        if (arguments.length === 1) {\n          value = mode;\n          mode = this.REGISTER.COMMAND;\n        }\n\n        this.send(mode, value);\n\n        return this;\n      }\n    },\n    send: {\n      writable: true,\n      value: function(mode, value) {\n\n        this.writeBits(mode, value >> 4);\n        this.writeBits(mode, value & 0x0F);\n\n        return this;\n      }\n    },\n    writeBits: {\n      writable: true,\n      value: function(mode, value) {\n        var state = priv.get(this);\n        var pinMapValue = 0;\n\n        for (var i = 0; i < 4; i++) {\n          if ((value & 0x01) === 1) {\n            pinMapValue |= state.data[i];\n          }\n          value = (value >> 1);\n        }\n\n        if (mode === this.REGISTER.DATA) {\n          mode = this.REGISTER.RS;\n        }\n\n        pinMapValue |= mode | state.backlight.statusMask;\n\n        this.pulse(pinMapValue);\n        return this;\n      }\n    },\n    pulse: {\n      writable: true,\n      value: function(data) {\n        this.expander.portWrite(data | this.REGISTER.EN); // En HIGH\n        this.expander.portWrite(data & ~this.REGISTER.EN); // En LOW\n      }\n    }\n  },\n\n\n  PARALLEL: {\n    REGISTER: {\n      value: REGISTER.DEFAULT,\n    },\n    CHARS: {\n      value: lcdCharacters.DEFAULT,\n    },\n    initialize: {\n      value: function(opts) {\n\n        this.bitMode = opts.bitMode || 4;\n        this.lines = opts.lines || 2;\n        this.rows = opts.rows || 2;\n        this.cols = opts.cols || 16;\n        this.dots = opts.dots || \"5x8\";\n\n        if (Array.isArray(opts.pins)) {\n          this.pins = {\n            rs: opts.pins[0],\n            en: opts.pins[1],\n            // TODO: Move to device map profile\n            data: [\n              opts.pins[5],\n              opts.pins[4],\n              opts.pins[3],\n              opts.pins[2]\n            ]\n          };\n        } else {\n          this.pins = opts.pins;\n        }\n\n        var display = this.REGISTER.DISPLAY | this.REGISTER.DISPLAYON;\n        var state = {\n          display: display,\n          characters: {},\n          index: this.REGISTER.MEMORYLIMIT - 1,\n          backlight: {\n            polarity: 1,\n            pin: null,\n            value: null\n          }\n        };\n\n        priv.set(this, state);\n\n        opts.pins.forEach(function(pin) {\n          this.io.pinMode(pin, 1);\n        }, this);\n\n        this.io.digitalWrite(this.pins.rs, this.io.LOW);\n        this.io.digitalWrite(this.pins.en, this.io.LOW);\n\n        if (opts.backlight) {\n          if (typeof opts.backlight === \"number\") {\n            var temp = opts.backlight;\n            opts.backlight = {\n              pin: temp\n            };\n          }\n\n          if (opts.backlight.pin) {\n            state.backlight.pin = new Pin({\n              pin: opts.backlight.pin,\n              board: this.board\n            });\n\n            state.backlight.pin.high();\n          }\n        }\n\n        // Operations within the following labelled block are init-only,\n        // but _do_ block the process negligible number of milliseconds.\n        blocking: {\n          // Send 0b00000011 thrice to make sure LCD\n          // is initialized properly\n          this.command(0x03);\n          sleep(4);\n          this.command(0x03);\n          sleep(4);\n          this.command(0x03);\n\n          // Switch to 4-bit mode\n          if (this.bitMode === 4) {\n            // this.REGISTER.DIMENSIONS |\n            this.command(0x02);\n          }\n\n          // Set number of lines and dots\n          // TODO: Move to device map profile\n          this.command(\n            this.REGISTER.LINE[this.lines] |\n            this.REGISTER.DOTS[this.dots]\n          );\n\n          // Clear display and turn it on\n          this.command(display);\n          this.clear();\n          this.home();\n        }\n      }\n    }\n  }\n};\n\n// Alias controllers\nControllers.LCM1602 = Controllers.LCD1602 = Controllers.LCM1602IIC = Controllers.LCD2004 = Controllers.PCF8574A = Controllers.PCF8574AT = Controllers.PCF8574T = Controllers.PCF8574;\n\nControllers.MJKDZ = Object.assign({}, Controllers.PCF8574, {\n  REGISTER: {\n    value: Object.assign({}, REGISTER.DEFAULT, {\n      SHIFT_LEFT: 0x00,\n\n      COMMAND: 0x00,\n      DATA: 0x06,\n\n      // Control\n      // Enable\n      EN: 0x10,\n      // Read/Write\n      RW: 0x05,\n      // Register Select\n      RS: 0x06,\n\n      D4: 0x00,\n      D5: 0x01,\n      D6: 0x02,\n      D7: 0x03\n    })\n  },\n  writeBits: {\n    writable: true,\n    value: function(mode, value) {\n      var state = priv.get(this);\n      var pinMapValue = 0;\n\n      for (var i = 0; i < 4; i++) {\n        if ((value & 0x01) === 1) {\n          pinMapValue |= state.data[i];\n        }\n        value = (value >> 1);\n      }\n\n      if (mode === this.REGISTER.DATA) {\n        mode = (1 << this.REGISTER.RS);\n      }\n\n      pinMapValue |= mode | state.backlight.statusMask;\n\n      this.pulse(pinMapValue);\n      return this;\n    }\n  },\n});\n\n/**\n * LCD\n * @param {[type]} opts [description]\n */\n\nfunction LCD(opts) {\n\n  if (!(this instanceof LCD)) {\n    return new LCD(opts);\n  }\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  var controller = null;\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    controller = Controllers.PARALLEL;\n  }\n\n  Board.Controller.call(this, controller, opts);\n\n  this.ctype = opts.controller;\n\n  if (this.initialize) {\n    this.initialize(opts);\n  }\n\n  Object.defineProperties(this, {\n    characters: {\n      get: function() {\n        return Object.assign({}, priv.get(this).characters);\n      },\n    },\n  });\n}\n\nLCD.prototype.command = function(mode, value) {\n  if (typeof value === \"undefined\") {\n    value = mode;\n    mode = 0x80;\n  }\n\n  if (this.bitMode === 4) {\n    this.send(value >> 4);\n  }\n\n  this.send(value);\n\n  return this;\n};\n\nLCD.prototype.send = function(value) {\n  var pin = 0;\n  var mask = {\n    4: 8,\n    8: 128\n  }[this.bitMode];\n\n  for (; mask > 0; mask = mask >> 1) {\n    this.io.digitalWrite(\n      this.pins.data[pin],\n      this.io[value & mask ? \"HIGH\" : \"LOW\"]\n    );\n    pin++;\n  }\n\n  // At VCC = 3.3V, the minimum enable pulse width is specified as 450\n  // nanoseconds on page 49 of the HD44780 datasheet.\n  // We therefore wait for 1 microsecond here to ensure that fast IO plugins\n  // like Pi-IO generate an enable pulse that's wide enough.\n  this.io.digitalWrite(this.pins.en, this.io.LOW);\n  this.io.digitalWrite(this.pins.en, this.io.HIGH);\n  sleepus(1);\n  this.io.digitalWrite(this.pins.en, this.io.LOW);\n\n  // The execution time for the vast majority of instructions is at least\n  // 37 microseconds. See datasheet pages 24 and 25.\n  // It's important to wait 37 microseconds here to prevent fast IO plugins\n  // like Pi-IO from executing the next instruction before the current\n  // instruction has completed.\n  sleepus(37);\n\n  return this;\n};\n\nLCD.prototype.hilo = function(callback) {\n  // RS High for write mode\n  this.io.digitalWrite(this.pins.rs, this.io.HIGH);\n\n  callback.call(this);\n\n  // RS Low for command mode\n  this.io.digitalWrite(this.pins.rs, this.io.LOW);\n};\n\n\n\nvar RE_SPECIALS = /:(\\w+):/g;\n\nLCD.prototype.print = function(message, opts) {\n  var state, dontProcessSpecials, hasCharacters, processed;\n\n  message = message + \"\";\n  opts = opts || {};\n\n  state = priv.get(this);\n  dontProcessSpecials = opts.dontProcessSpecials || false;\n  hasCharacters = !dontProcessSpecials && RE_SPECIALS.test(message);\n\n  if (message.length === 1) {\n    this.hilo(function() {\n      this.command(this.REGISTER.DATA, message.charCodeAt(0));\n    });\n  } else {\n\n    if (hasCharacters) {\n      processed = message.replace(RE_SPECIALS, function(match, name) {\n        var address = state.characters[name];\n\n        return typeof address === \"number\" ? String.fromCharCode(address) : match;\n      });\n\n      this.print(processed, {\n        dontProcessSpecials: true\n      });\n    } else {\n      this.hilo(function() {\n        Array.from(message).forEach(function(character) {\n          this.command(this.REGISTER.DATA, character.charCodeAt(0));\n        }, this);\n      });\n    }\n  }\n\n  return this;\n};\n\nLCD.prototype.write = function(charCode) {\n  this.hilo.call(this, function() {\n    this.command(this.REGISTER.DATA, charCode);\n  });\n\n  return this;\n};\n\nLCD.prototype.clear = function() {\n  this.command(this.REGISTER.CLEAR);\n  sleep(2);\n  return this;\n};\n\nLCD.prototype.home = function() {\n  this.command(this.REGISTER.HOME);\n  sleep(2);\n  return this;\n};\n\nLCD.prototype.setCursor = function(col, row) {\n  var rowOffsets = [0x00, 0x40, 0x14, 0x54];\n  this.command(this.REGISTER.SETDDRAMADDR | (col + rowOffsets[row]));\n  return this;\n};\n\nLCD.prototype.backlight = function(highOrLow) {\n  var state = priv.get(this);\n\n  highOrLow = typeof highOrLow === \"undefined\" ? true : false;\n\n  if (state.backlight.pin instanceof Pin) {\n    if (highOrLow) {\n      state.backlight.pin.high();\n    } else {\n      state.backlight.pin.low();\n    }\n  }\n\n  if (highOrLow) {\n    state.display |= this.REGISTER.DISPLAYON;\n  } else {\n    state.display &= ~this.REGISTER.DISPLAYON;\n  }\n\n  this.command(state.display);\n\n  return this;\n};\n\nLCD.prototype.noBacklight = function() {\n  var state = priv.get(this);\n\n  if (state.backlight.pin instanceof Pin) {\n    state.backlight.pin.high();\n  }\n\n  // if (highOrLow) {\n  //   state.display |= this.REGISTER.DISPLAYON;\n  // } else {\n  //   state.display &= ~this.REGISTER.DISPLAYON;\n  // }\n\n  // this.command(state.display);\n\n  return this.backlight(false);\n};\n\nLCD.prototype.on = function() {\n  var state = priv.get(this);\n\n  state.display |= this.REGISTER.DISPLAYON;\n  this.command(state.display);\n\n  return this;\n};\n\nLCD.prototype.off = function() {\n  var state = priv.get(this);\n\n  state.display &= ~this.REGISTER.DISPLAYON;\n  this.command(state.display);\n\n  return this;\n};\n\nLCD.prototype.cursor = function(row, col) {\n  // When provided with col & row, cursor will behave like setCursor,\n  // except that it has row and col in the order that most people\n  // intuitively expect it to be in.\n  if (typeof col !== \"undefined\" && typeof row !== \"undefined\") {\n    return this.setCursor(col, row);\n  }\n  var state = priv.get(this);\n\n  state.display |= this.REGISTER.CURSORON;\n  this.command(state.display);\n\n  return this;\n};\n\nLCD.prototype.noCursor = function() {\n  var state = priv.get(this);\n\n  state.display &= ~this.REGISTER.CURSORON;\n  this.command(state.display);\n\n  return this;\n};\n\nLCD.prototype.blink = function() {\n  var state = priv.get(this);\n\n  state.display |= this.REGISTER.BLINKON;\n  this.command(state.display);\n\n  return this;\n};\n\nLCD.prototype.noBlink = function() {\n  var state = priv.get(this);\n\n  state.display &= ~this.REGISTER.BLINKON;\n  this.command(state.display);\n\n  return this;\n};\n\nLCD.prototype.autoscroll = function() {\n  var state = priv.get(this);\n\n  state.display |= this.REGISTER.ENTRYSHIFTINCREMENT;\n  this.command(this.REGISTER.ENTRY | state.display);\n\n  return this;\n};\n\nLCD.prototype.noAutoscroll = function() {\n  var state = priv.get(this);\n\n  state.display &= ~this.REGISTER.ENTRYSHIFTINCREMENT;\n  this.command(this.REGISTER.ENTRY | state.display);\n\n  return this;\n};\n\nLCD.prototype.createChar = function(name, charMap) {\n  // Ensure location is never above 7\n  var state = priv.get(this);\n  var address;\n\n  if (typeof name === \"number\") {\n    address = name & 0x07;\n  } else {\n    address = state.index;\n    state.index--;\n    if (state.index === -1) {\n      state.index = this.REGISTER.MEMORYLIMIT - 1;\n    }\n  }\n\n  this.command(this.REGISTER.SETCGRAMADDR | (address << 3));\n\n  this.hilo(function() {\n    for (var i = 0; i < 8; i++) {\n      this.command(this.REGISTER.DATA, charMap[i]);\n    }\n  });\n\n  // Fill in address\n  state.characters[name] = address;\n\n  return address;\n};\n\n\nLCD.prototype.useChar = function(name) {\n  var state = priv.get(this);\n\n  if (typeof state.characters[name] === \"undefined\") {\n    // Create the character in LCD memory and\n    var newCharIndex = this.createChar(name, this.CHARS[name]);\n\n    // If character's index already used, remove this character in current LCD character map\n    // because it's not in LCD memory anymore.\n    for (var oldName in state.characters) {\n      if (name !== oldName && state.characters[oldName] === newCharIndex) {\n        delete state.characters[oldName];\n        break;\n      }\n    }\n\n    // Add character to current LCD character map\n    state.characters[name] = newCharIndex;\n  }\n\n  return this;\n};\n\n\n/**\n *\n\nTODO:\n\n\nburst()\n\nscrollDisplayLeft()\nscrollDisplayRight()\n\nleftToRight()\nrightToLeft()\n\n\n*/\n\nLCD.POSITIVE = 0;\nLCD.NEGATIVE = 1;\n\nLCD.Characters = lcdCharacters;\n\nmodule.exports = LCD;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/lcd.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/led/callbacks.js":
/*!*******************************************************!*\
  !*** ./node_modules/johnny-five/lib/led/callbacks.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var noop = function() {};\n\nmodule.exports = function(klass, methods) {\n  // Methods with callbacks need to have the callback called\n  // as a result of all entries reaching completion, not\n  // calling the callback once for each entry completion.\n  // Uses an array to match pattern in Led, and may be more\n  // in future.\n  methods.forEach(function(method) {\n    klass.prototype[method] = function(duration, callback) {\n      var length = this.length;\n      var signals = [];\n      var led;\n\n      if (typeof duration === \"function\") {\n        callback = duration;\n        duration = 1000;\n      }\n\n      if (typeof callback !== \"function\") {\n        callback = noop;\n      }\n\n      for (var i = 0; i < length; i++) {\n        led = this[i];\n        signals.push(\n          /* jshint ignore:start */\n          new Promise(function(resolve) {\n            led[method](duration, function() {\n              resolve();\n            });\n          })\n          /* jshint ignore:end */\n        );\n      }\n\n      Promise.all(signals).then(callback);\n\n      return this;\n    };\n  });\n};\n\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/led/callbacks.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/led/digits.js":
/*!****************************************************!*\
  !*** ./node_modules/johnny-five/lib/led/digits.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var LedControl = __webpack_require__(/*! ./ledcontrol */ \"./node_modules/johnny-five/lib/led/ledcontrol.js\");\n\n// stub implementation; extract functionality from ledcontrol.js\nfunction Digits(opts) {\n  opts.isMatrix = false;\n  return new LedControl(opts);\n}\n\nObject.assign(Digits, LedControl, {\n  CHARS: LedControl.DIGIT_CHARS\n});\n\nmodule.exports = Digits;\n\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/led/digits.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/led/index.js":
/*!***************************************************!*\
  !*** ./node_modules/johnny-five/lib/led/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Led = __webpack_require__(/*! ./led */ \"./node_modules/johnny-five/lib/led/led.js\");\nLed.Collection = __webpack_require__(/*! ./leds */ \"./node_modules/johnny-five/lib/led/leds.js\");\nLed.RGB = __webpack_require__(/*! ./rgb */ \"./node_modules/johnny-five/lib/led/rgb.js\");\nLed.RGB.Collection = __webpack_require__(/*! ./rgbs */ \"./node_modules/johnny-five/lib/led/rgbs.js\");\nLed.Matrix = __webpack_require__(/*! ./matrix */ \"./node_modules/johnny-five/lib/led/matrix.js\");\nLed.Digits = __webpack_require__(/*! ./digits */ \"./node_modules/johnny-five/lib/led/digits.js\");\n\n// TODO: Eliminate .Array for 1.0.0\nLed.Array = Led.Collection;\n\nmodule.exports = Led;\n\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/led/index.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/led/led-chars.js":
/*!*******************************************************!*\
  !*** ./node_modules/johnny-five/lib/led/led-chars.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// https://dl.dropboxusercontent.com/u/3531958/digits.html\n\nmodule.exports = {\n  MATRIX_CHARS: {\n    //symbols & punctuation\n    \" \": [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n    \"!\": [0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00],\n    \"\\\"\": [0x0A, 0x0A, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00],\n    \"#\": [0x0A, 0x0A, 0x1F, 0x0A, 0x1F, 0x0A, 0x0A, 0x00],\n    \"$\": [0x04, 0x0F, 0x14, 0x0E, 0x05, 0x1E, 0x04, 0x00],\n    \"%\": [0x18, 0x19, 0x02, 0x04, 0x08, 0x13, 0x03, 0x00],\n    \"&\": [0x0C, 0x12, 0x14, 0x08, 0x15, 0x12, 0x0D, 0x00],\n    \"'\": [0x0C, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00],\n    \"(\": [0x02, 0x04, 0x08, 0x08, 0x08, 0x04, 0x02, 0x00],\n    \")\": [0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08, 0x00],\n    \"*\": [0x00, 0x04, 0x15, 0x0E, 0x15, 0x04, 0x00, 0x00],\n    \"+\": [0x00, 0x04, 0x04, 0x1F, 0x04, 0x04, 0x00, 0x00],\n    \",\": [0x00, 0x00, 0x00, 0x00, 0x0C, 0x04, 0x08, 0x00],\n    \"-\": [0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00],\n    \".\": [0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00],\n    \"/\": [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x00, 0x00],\n    \"[\": [0x0E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0E, 0x00],\n    \"\\\\\": [0x00, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00, 0x00],\n    \"]\": [0x0E, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0E, 0x00],\n    \"^\": [0x04, 0x0A, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00],\n    \"_\": [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00],\n    \"`\": [0x10, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00],\n    \":\": [0x00, 0x0C, 0x0C, 0x00, 0x0C, 0x0C, 0x00, 0x00],\n    \";\": [0x00, 0x0C, 0x0C, 0x00, 0x0C, 0x04, 0x08, 0x00],\n    \"<\": [0x02, 0x04, 0x08, 0x10, 0x08, 0x04, 0x02, 0x00],\n    \"=\": [0x00, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x00, 0x00],\n    \">\": [0x08, 0x04, 0x02, 0x01, 0x02, 0x04, 0x08, 0x00],\n    \"?\": [0x0E, 0x11, 0x01, 0x02, 0x04, 0x00, 0x04, 0x00],\n    \"@\": [0x0E, 0x11, 0x01, 0x0D, 0x15, 0x15, 0x0E, 0x00],\n    \"{\": [0x02, 0x04, 0x04, 0x08, 0x04, 0x04, 0x02, 0x00],\n    \"|\": [0x04, 0x04, 0x04, 0x00, 0x04, 0x04, 0x04, 0x00],\n    \"}\": [0x08, 0x04, 0x04, 0x02, 0x04, 0x04, 0x08, 0x00],\n    \"~\": [0x08, 0x15, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00],\n\n    //standard numbers\n    \"0\": [0x0E, 0x11, 0x13, 0x15, 0x19, 0x11, 0x0E, 0x00],\n    \"1\": [0x04, 0x0C, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00],\n    \"2\": [0x0E, 0x11, 0x01, 0x02, 0x04, 0x08, 0x1F, 0x00],\n    \"3\": [0x1F, 0x02, 0x04, 0x02, 0x01, 0x11, 0x0E, 0x00],\n    \"4\": [0x02, 0x06, 0x0A, 0x12, 0x1F, 0x02, 0x02, 0x00],\n    \"5\": [0x1F, 0x10, 0x1E, 0x01, 0x01, 0x11, 0x0E, 0x00],\n    \"6\": [0x06, 0x08, 0x10, 0x1E, 0x11, 0x11, 0x0E, 0x00],\n    \"7\": [0x1F, 0x01, 0x02, 0x04, 0x04, 0x04, 0x04, 0x00],\n    \"8\": [0x1E, 0x11, 0x11, 0x0E, 0x11, 0x11, 0x0E, 0x00],\n    \"9\": [0x0E, 0x11, 0x11, 0x0F, 0x01, 0x02, 0x0C, 0x00],\n\n    //capital letters\n    \"A\": [0x08, 0x14, 0x22, 0x3E, 0x22, 0x22, 0x22, 0x22],\n    \"B\": [0x3C, 0x22, 0x22, 0x3E, 0x22, 0x22, 0x3C, 0x00],\n    \"C\": [0x3C, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3C, 0x00],\n    \"D\": [0x7C, 0x42, 0x42, 0x42, 0x42, 0x42, 0x7C, 0x00],\n    \"E\": [0x7C, 0x40, 0x40, 0x7C, 0x40, 0x40, 0x40, 0x7C],\n    \"F\": [0x7C, 0x40, 0x40, 0x7C, 0x40, 0x40, 0x40, 0x40],\n    \"G\": [0x3C, 0x40, 0x40, 0x40, 0x40, 0x44, 0x44, 0x3C],\n    \"H\": [0x44, 0x44, 0x44, 0x7C, 0x44, 0x44, 0x44, 0x44],\n    \"I\": [0x7C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7C],\n    \"J\": [0x3C, 0x08, 0x08, 0x08, 0x08, 0x08, 0x48, 0x30],\n    \"K\": [0x00, 0x24, 0x28, 0x30, 0x20, 0x30, 0x28, 0x24],\n    \"L\": [0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x7C],\n    \"M\": [0x81, 0xC3, 0xA5, 0x99, 0x81, 0x81, 0x81, 0x81],\n    \"N\": [0x00, 0x42, 0x62, 0x52, 0x4A, 0x46, 0x42, 0x00],\n    \"O\": [0x3C, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C],\n    \"P\": [0x3C, 0x22, 0x22, 0x22, 0x3C, 0x20, 0x20, 0x20],\n    \"Q\": [0x1C, 0x22, 0x22, 0x22, 0x22, 0x26, 0x22, 0x1D],\n    \"R\": [0x3C, 0x22, 0x22, 0x22, 0x3C, 0x24, 0x22, 0x21],\n    \"S\": [0x00, 0x1E, 0x20, 0x20, 0x3E, 0x02, 0x02, 0x3C],\n    \"T\": [0x00, 0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08],\n    \"U\": [0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x22, 0x1C],\n    \"V\": [0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x24, 0x18],\n    \"W\": [0x00, 0x49, 0x49, 0x49, 0x49, 0x2A, 0x1C, 0x00],\n    \"X\": [0x00, 0x41, 0x22, 0x14, 0x08, 0x14, 0x22, 0x41],\n    \"Y\": [0x41, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x08],\n    \"Z\": [0x00, 0x7F, 0x02, 0x04, 0x08, 0x10, 0x20, 0x7F],\n\n    //question: do these need to stay or what?\n    // \"A\": [0x0E, 0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x00],\n    // \"B\": [0x1E, 0x09, 0x09, 0x0E, 0x09, 0x09, 0x1E, 0x00],\n    // \"C\": [0x0E, 0x11, 0x10, 0x10, 0x10, 0x11, 0x0E, 0x00],\n    // \"D\": [0x1E, 0x09, 0x09, 0x09, 0x09, 0x09, 0x1E, 0x00],\n    // \"E\": [0x1F, 0x10, 0x10, 0x1F, 0x10, 0x10, 0x1F, 0x00],\n    // \"F\": [0x1F, 0x10, 0x10, 0x1E, 0x10, 0x10, 0x10, 0x00],\n    // \"G\": [0x0E, 0x11, 0x10, 0x13, 0x11, 0x11, 0x0F, 0x00],\n    // \"H\": [0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11, 0x00],\n    // \"I\": [0x0E, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00],\n    // \"J\": [0x07, 0x02, 0x02, 0x02, 0x02, 0x12, 0x0C, 0x00],\n    // \"K\": [0x11, 0x12, 0x14, 0x18, 0x14, 0x12, 0x11, 0x00],\n    // \"L\": [0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1F, 0x00],\n    // \"M\": [0x11, 0x1B, 0x15, 0x15, 0x11, 0x11, 0x11, 0x00],\n    // \"N\": [0x11, 0x19, 0x19, 0x15, 0x13, 0x13, 0x11, 0x00],\n    // \"O\": [0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00],\n    // \"P\": [0x1E, 0x11, 0x11, 0x1E, 0x10, 0x10, 0x10, 0x00],\n    // \"Q\": [0x0E, 0x11, 0x11, 0x11, 0x15, 0x12, 0x1D, 0x00],\n    // \"R\": [0x1E, 0x11, 0x11, 0x1E, 0x14, 0x12, 0x11, 0x00],\n    // \"S\": [0x0E, 0x11, 0x10, 0x0E, 0x01, 0x11, 0x0E, 0x00],\n    // \"T\": [0x1F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00],\n    // \"U\": [0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00],\n    // \"V\": [0x11, 0x11, 0x11, 0x11, 0x11, 0x0A, 0x04, 0x00],\n    // \"W\": [0x11, 0x11, 0x11, 0x15, 0x15, 0x1B, 0x11, 0x00],\n    // \"X\": [0x11, 0x11, 0x0A, 0x04, 0x0A, 0x11, 0x11, 0x00],\n    // \"Y\": [0x11, 0x11, 0x11, 0x0A, 0x04, 0x04, 0x04, 0x00],\n    // \"Z\": [0x1F, 0x01, 0x02, 0x04, 0x08, 0x10, 0x1F, 0x00],\n\n    //lowercase letters\n    \"a\": [0x00, 0x00, 0x0E, 0x01, 0x0F, 0x11, 0x0F, 0x00],\n    \"b\": [0x10, 0x10, 0x16, 0x19, 0x11, 0x11, 0x1E, 0x00],\n    \"c\": [0x00, 0x00, 0x0E, 0x11, 0x10, 0x11, 0x0E, 0x00],\n    \"d\": [0x01, 0x01, 0x0D, 0x13, 0x11, 0x11, 0x0F, 0x00],\n    \"e\": [0x00, 0x00, 0x0E, 0x11, 0x1F, 0x10, 0x0E, 0x00],\n    \"f\": [0x02, 0x05, 0x04, 0x0E, 0x04, 0x04, 0x04, 0x00],\n    \"g\": [0x00, 0x0D, 0x13, 0x13, 0x0D, 0x01, 0x0E, 0x00],\n    \"h\": [0x10, 0x10, 0x16, 0x19, 0x11, 0x11, 0x11, 0x00],\n    \"i\": [0x04, 0x00, 0x0C, 0x04, 0x04, 0x04, 0x0E, 0x00],\n    \"j\": [0x02, 0x00, 0x06, 0x02, 0x02, 0x12, 0x0C, 0x00],\n    \"k\": [0x08, 0x08, 0x09, 0x0A, 0x0C, 0x0A, 0x09, 0x00],\n    \"l\": [0x0C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00],\n    \"m\": [0x00, 0x00, 0x1A, 0x15, 0x15, 0x15, 0x15, 0x00],\n    \"n\": [0x00, 0x00, 0x16, 0x19, 0x11, 0x11, 0x11, 0x00],\n    \"o\": [0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x0E, 0x00],\n    \"p\": [0x00, 0x16, 0x19, 0x19, 0x16, 0x10, 0x10, 0x00],\n    \"q\": [0x00, 0x0D, 0x13, 0x13, 0x0D, 0x01, 0x01, 0x00],\n    \"r\": [0x00, 0x00, 0x16, 0x19, 0x10, 0x10, 0x10, 0x00],\n    \"s\": [0x00, 0x00, 0x0F, 0x10, 0x1E, 0x01, 0x1F, 0x00],\n    \"t\": [0x08, 0x08, 0x1C, 0x08, 0x08, 0x09, 0x06, 0x00],\n    \"u\": [0x00, 0x00, 0x12, 0x12, 0x12, 0x12, 0x0D, 0x00],\n    \"v\": [0x00, 0x00, 0x11, 0x11, 0x11, 0x0A, 0x04, 0x00],\n    \"w\": [0x00, 0x00, 0x11, 0x11, 0x15, 0x15, 0x0A, 0x00],\n    \"x\": [0x00, 0x00, 0x11, 0x0A, 0x04, 0x0A, 0x11, 0x00],\n    \"y\": [0x00, 0x00, 0x11, 0x11, 0x13, 0x0D, 0x01, 0x0E],\n    \"z\": [0x00, 0x00, 0x1F, 0x02, 0x04, 0x08, 0x1F, 0x00],\n\n    //misc.\n    euro: [0x0e, 0x10, 0x7c, 0x20, 0x7c, 0x20, 0x10, 0x0e],\n    cent: [0x00, 0x3c, 0x42, 0x40, 0x40, 0x52, 0x3c, 0x20],\n\n    //emojis + objects\n    angryface: [0x00, 0x66, 0x66, 0x00, 0x18, 0x24, 0x42, 0x81],\n    circle: [0x3c, 0x42, 0x81, 0x81, 0x81, 0x81, 0x42, 0x3c],\n    cdot: [0x3c, 0x42, 0x81, 0x99, 0x99, 0x81, 0x42, 0x3c],\n    donut: [0x3c, 0x7e, 0xff, 0xe7, 0xe7, 0xff, 0x7e, 0x3c],\n    equality: [0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00],\n    ball: [0x3c, 0x7e, 0xff, 0xff, 0xff, 0xff, 0x7e, 0x3c],\n    thinsquare: [0xff, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0xff],\n    thicksquare: [0xff, 0xff, 0xc3, 0xc3, 0xc3, 0xc3, 0xff, 0xff],\n    centeredsquare1: [0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00],\n    centeredsquare2: [0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00],\n    arrowright: [0x00, 0x04, 0x06, 0xff, 0xff, 0x06, 0x04, 0x00],\n    arrowleft: [0x00, 0x20, 0x60, 0xff, 0xff, 0x60, 0x20, 0x00],\n    note: [0x04, 0x06, 0x07, 0x04, 0x3c, 0x7c, 0x7c, 0x38],\n    clock: [0x3c, 0x52, 0x91, 0x91, 0x8f, 0x81, 0x42, 0x3c],\n    heartoutline: [0x66, 0x99, 0x81, 0x81, 0x42, 0x24, 0x18, 0x00],\n    heartfull: [0x66, 0xff, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00],\n    thincheck: [0x00, 0x00, 0x01, 0x02, 0x04, 0x88, 0x50, 0x20],\n    thickcheck: [0x00, 0x01, 0x03, 0x06, 0x8c, 0xd8, 0x70, 0x20],\n    speaker: [0x03, 0x07, 0x3f, 0x3f, 0x3f, 0x3f, 0x07, 0x03],\n    sound: [0x00, 0x40, 0x80, 0x00, 0xc0, 0x00, 0x80, 0x40],\n    xbig: [0xc3, 0xe7, 0x7e, 0x3c, 0x3c, 0x7e, 0xe7, 0xc3],\n    target: [0x3c, 0x7e, 0xc3, 0xdb, 0xdb, 0xc3, 0x7e, 0x3c],\n    bell: [0x18, 0x3c, 0x3c, 0x3c, 0x3c, 0x7e, 0x00, 0x18],\n    smile: [0x00, 0x66, 0x66, 0x00, 0x00, 0x81, 0x42, 0x3c],\n    frown: [0x00, 0x66, 0x66, 0x00, 0x00, 0x3c, 0x42, 0x81],\n    winkright: [0x00, 0x60, 0x66, 0x00, 0x00, 0x81, 0x42, 0x3c],\n    winkleft: [0x00, 0x06, 0x66, 0x00, 0x00, 0x81, 0x42, 0x3c],\n    blink: [0x00, 0x00, 0x66, 0x00, 0x00, 0x81, 0x42, 0x3c],\n    laughing: [0x00, 0x66, 0x66, 0x00, 0xff, 0x81, 0x42, 0x3c],\n    tongueout: [0x00, 0x66, 0x66, 0x00, 0x00, 0x7e, 0x0a, 0x04],\n    expressionless: [0x00, 0x66, 0x66, 0x00, 0x00, 0xff, 0x00, 0x00],\n\n    //patterns\n    ascprogress1: [0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80],\n    ascprogress2: [0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0],\n    ascprogress3: [0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0],\n    ascprogress4: [0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0],\n    ascprogress5: [0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8],\n    ascprogress6: [0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc],\n    ascprogress7: [0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe],\n    fullprogress: [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],\n    descprogress1: [0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f],\n    descprogress2: [0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f],\n    descprogress3: [0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f],\n    descprogress4: [0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f],\n    descprogress5: [0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07],\n    descprogress6: [0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03],\n    descprogress7: [0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01],\n    ascchart1: [0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n    ascchart2: [0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n    ascchart3: [0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00],\n    ascchart4: [0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00],\n    ascchart5: [0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00],\n    ascchart6: [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00],\n    ascchart7: [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00],\n    ascchart8: [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],\n    descchart1: [0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],\n    descchart2: [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],\n    descchart3: [0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff],\n    descchart4: [0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff],\n    descchart5: [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff],\n    descchart6: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff],\n    descchart7: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff],\n    descchart8: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n    borderleft1: [0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01],\n    borderleft2: [0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03],\n    borderleft3: [0x07, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x07],\n    borderleft4: [0x0f, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0f],\n    borderleft5: [0x1f, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1f],\n    borderleft6: [0x3f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3f],\n    borderleft7: [0x7f, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x7f],\n    borderleft8: [0xff, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xff],\n    bordertopbottom5: [0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff],\n    borderright1: [0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80],\n    borderright2: [0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xc0],\n    borderright3: [0xe0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xe0],\n    borderright4: [0xf0, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xf0],\n    borderright5: [0xf8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xf8],\n    borderright6: [0xfc, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0xfc],\n    borderright7: [0xfe, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xfe],\n    borderright8: [0xff, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xff],\n    box1: [0xe0, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00],\n    box2: [0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00],\n    box3: [0xe7, 0xe7, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x00],\n    box4: [0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07],\n    box5: [0x07, 0x07, 0x07, 0x00, 0x00, 0x07, 0x07, 0x07],\n    box6: [0xe0, 0xe0, 0xe0, 0x00, 0x00, 0x07, 0x07, 0x07],\n    box7: [0xe7, 0xe7, 0xe7, 0x00, 0x00, 0x07, 0x07, 0x07],\n    box8: [0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xe0, 0xe0],\n    box9: [0x07, 0x07, 0x07, 0x00, 0x00, 0xe0, 0xe0, 0xe0],\n    box10: [0xe0, 0xe0, 0xe0, 0x00, 0x00, 0xe0, 0xe0, 0xe0],\n    box11: [0xe7, 0xe7, 0xe7, 0x00, 0x00, 0xe0, 0xe0, 0xe0],\n    box12: [0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0xe7, 0xe7],\n    box13: [0x07, 0x07, 0x07, 0x00, 0x00, 0xe7, 0xe7, 0xe7],\n    box14: [0xe0, 0xe0, 0xe0, 0x00, 0x00, 0xe7, 0xe7, 0xe7],\n    box15: [0xe7, 0xe7, 0xe7, 0x00, 0x00, 0xe7, 0xe7, 0xe7],\n    checkerboard1: [0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55],\n    checkerboard2: [0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa],\n    checkerboard3: [0x5d, 0xea, 0x57, 0xba, 0x55, 0xee, 0x55, 0xbb],\n    checkerboard4: [0xcc, 0x33, 0x33, 0xcc, 0xcc, 0x33, 0x33, 0xcc],\n    checkerboard5: [0xcc, 0xcc, 0x33, 0x33, 0xcc, 0xcc, 0x33, 0x33],\n    checkerboard6: [0x33, 0xcc, 0xcc, 0x33, 0x33, 0xcc, 0xcc, 0x33],\n    checkerboard7: [0x33, 0x33, 0xcc, 0xcc, 0x33, 0x33, 0xcc, 0xcc],\n    pointerright: [0x20, 0x30, 0x38, 0x3c, 0x3c, 0x38, 0x30, 0x20],\n    pointerup: [0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0x00, 0x00],\n    pointerleft: [0x04, 0x0c, 0x1c, 0x3c, 0x3c, 0x1c, 0x0c, 0x04],\n    pointerdown: [0x00, 0x00, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00],\n    arrowne: [0x00, 0x3e, 0x06, 0x0a, 0x12, 0x22, 0x40, 0x80],\n    arrownw: [0x00, 0x7c, 0x60, 0x50, 0x48, 0x44, 0x02, 0x01],\n    arrowsw: [0x01, 0x02, 0x44, 0x48, 0x50, 0x60, 0x7c, 0x00],\n    arrowse: [0x80, 0x40, 0x22, 0x12, 0x0a, 0x06, 0x3e, 0x00],\n    dice1: [0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00],\n    dice2: [0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03],\n    dice3: [0xc0, 0xc0, 0x00, 0x18, 0x18, 0x00, 0x03, 0x03],\n    dice4: [0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3],\n    dice5: [0xc3, 0xc3, 0x00, 0x18, 0x18, 0x00, 0xc3, 0xc3],\n    dice6: [0xc3, 0xc3, 0x00, 0xc3, 0xc3, 0x00, 0xc3, 0xc3],\n    outlinedplus1: [0x3c, 0x24, 0xe7, 0x81, 0x81, 0xe7, 0x24, 0x3c],\n    outlinedplus2: [0xff, 0xe7, 0xe7, 0x81, 0x81, 0xe7, 0xe7, 0xff],\n    twoboxes1: [0xf0, 0x90, 0x90, 0xf0, 0x0f, 0x09, 0x09, 0x0f],\n    twoboxes2: [0xf0, 0x90, 0x90, 0xfe, 0x12, 0x12, 0x1e, 0x00],\n    twoboxes3: [0xf0, 0x90, 0xbc, 0xf4, 0x24, 0x3c, 0x00, 0x00],\n    twoboxes4: [0xf0, 0xf8, 0xd8, 0xf8, 0x78, 0x00, 0x00, 0x00],\n    twoboxes5: [0x0f, 0x09, 0x09, 0x0f, 0xf0, 0x90, 0x90, 0xf0],\n    fourboxes: [0xff, 0x99, 0x99, 0xff, 0xff, 0x99, 0x99, 0xff],\n    chain1: [0xf0, 0xf8, 0xd8, 0xf8, 0x78, 0x00, 0x00, 0x00],\n    chain2: [0xf0, 0x90, 0xbc, 0xf4, 0x2f, 0x3d, 0x09, 0x0f],\n  },\n\n  SPECIAL_CHARS: {\n    //thicker numbers\n    \"0\": [0x3c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3c],\n    \"1\": [0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18],\n    \"2\": [0x3c, 0x66, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x7e],\n    \"3\": [0x3c, 0x66, 0x06, 0x1c, 0x06, 0x06, 0x66, 0x3c],\n    \"4\": [0x0e, 0x1e, 0x36, 0x66, 0x66, 0x7e, 0x06, 0x06],\n    \"5\": [0x7e, 0x60, 0x60, 0x7c, 0x06, 0x06, 0x66, 0x3c],\n    \"6\": [0x3c, 0x66, 0x60, 0x7c, 0x66, 0x66, 0x66, 0x3c],\n    \"7\": [0x7e, 0x7e, 0x06, 0x0c, 0x18, 0x18, 0x18, 0x18],\n    \"8\": [0x3c, 0x66, 0x66, 0x3c, 0x66, 0x66, 0x66, 0x3c],\n    \"9\": [0x3c, 0x66, 0x66, 0x3e, 0x06, 0x06, 0x66, 0x3c],\n\n    //Jory's double digits\n    \"10\": [0x5e, 0x52, 0x52, 0x52, 0x52, 0x5e, 0x00, 0xff],\n    \"11\": [0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x00, 0xff],\n    \"12\": [0x5e, 0x42, 0x44, 0x48, 0x50, 0x5e, 0x00, 0xff],\n    \"13\": [0x5e, 0x42, 0x4e, 0x42, 0x42, 0x5e, 0x00, 0xff],\n    \"14\": [0x52, 0x52, 0x5e, 0x42, 0x42, 0x42, 0x00, 0xff],\n    \"15\": [0x5e, 0x50, 0x5e, 0x42, 0x42, 0x5e, 0x00, 0xff],\n    \"16\": [0x5e, 0x50, 0x5e, 0x52, 0x52, 0x5e, 0x00, 0xff],\n    \"17\": [0x5e, 0x42, 0x44, 0x48, 0x48, 0x48, 0x00, 0xff],\n    \"18\": [0x5e, 0x52, 0x5e, 0x52, 0x52, 0x5e, 0x00, 0xff],\n    \"19\": [0x5e, 0x52, 0x5e, 0x42, 0x42, 0x5e, 0x00, 0xff],\n  },\n\n  DIGIT_CHARS: {\n    \"0\": 0x7E,\n    \"1\": 0x30,\n    \"2\": 0x6D,\n    \"3\": 0x79,\n    \"4\": 0x33,\n    \"5\": 0x5B,\n    \"6\": 0x5F,\n    \"7\": 0x70,\n    \"8\": 0x7F,\n    \"9\": 0x7B,\n    \" \": 0x00,\n    \".\": 0x80,\n    \":\": 0xFF,\n    \"!\": 0xB0,\n    \"A\": 0x77,\n    \"a\": 0x7D,\n    \"B\": 0x7F,\n    \"b\": 0x1F,\n    \"C\": 0x4E,\n    \"c\": 0x0D,\n    \"D\": 0x7E,\n    \"d\": 0x3D,\n    \"E\": 0x4F,\n    \"e\": 0x6f,\n    \"F\": 0x47,\n    \"f\": 0x47,\n    \"G\": 0x5E,\n    \"g\": 0x7B,\n    \"H\": 0x37,\n    \"h\": 0x17,\n    \"I\": 0x30,\n    \"i\": 0x10,\n    \"J\": 0x3C,\n    \"j\": 0x38,\n    \"K\": 0x37,\n    \"k\": 0x17,\n    \"L\": 0x0E,\n    \"l\": 0x06,\n    \"M\": 0x55,\n    \"m\": 0x55,\n    \"N\": 0x15,\n    \"n\": 0x15,\n    \"O\": 0x7E,\n    \"o\": 0x1D,\n    \"P\": 0x67,\n    \"p\": 0x67,\n    \"Q\": 0x73,\n    \"q\": 0x73,\n    \"R\": 0x77,\n    \"r\": 0x05,\n    \"S\": 0x5B,\n    \"s\": 0x5B,\n    \"T\": 0x46,\n    \"t\": 0x0F,\n    \"U\": 0x3E,\n    \"u\": 0x1C,\n    \"V\": 0x27,\n    \"v\": 0x23,\n    \"W\": 0x3F,\n    \"w\": 0x2B,\n    \"X\": 0x25,\n    \"x\": 0x25,\n    \"Y\": 0x3B,\n    \"y\": 0x33,\n    \"Z\": 0x6D,\n    \"z\": 0x6D,\n  }\n};\n\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/led/led-chars.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/led/led.js":
/*!*************************************************!*\
  !*** ./node_modules/johnny-five/lib/led/led.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var Board = __webpack_require__(/*! ../board */ \"./node_modules/johnny-five/lib/board.js\");\nvar Animation = __webpack_require__(/*! ../animation */ \"./node_modules/johnny-five/lib/animation.js\");\nvar Expander = __webpack_require__(/*! ../expander */ \"./node_modules/johnny-five/lib/expander.js\");\nvar Fn = __webpack_require__(/*! ../fn */ \"./node_modules/johnny-five/lib/fn.js\");\nvar Pins = Board.Pins;\n\nvar priv = new Map();\n\nvar Controllers = {\n  PCA9685: {\n    initialize: {\n      value: function(opts) {\n\n        var state = priv.get(this);\n\n        this.address = opts.address || 0x40;\n        this.pwmRange = opts.pwmRange || [0, 4095];\n        this.frequency = opts.frequency || 200;\n\n        state.expander = Expander.get({\n          address: this.address,\n          controller: this.controller,\n          bus: this.bus,\n          pwmRange: this.pwmRange,\n          frequency: this.frequency,\n        });\n\n        this.pin = state.expander.normalize(opts.pin);\n\n        state.mode = this.io.MODES.PWM;\n      }\n    },\n    update: {\n      writable: true,\n      value: function(input) {\n        var state = priv.get(this);\n        var output = typeof input !== \"undefined\" ? input : state.value;\n        var value = state.isAnode ? 255 - Board.constrain(output, 0, 255) : output;\n        this.write(value);\n      }\n    },\n    write: {\n      writable: true,\n      value: function(value) {\n        var state = priv.get(this);\n        state.expander.analogWrite(this.pin, value);\n      }\n    }\n  },\n  DEFAULT: {\n    initialize: {\n      value: function(opts, pinValue) {\n\n        var state = priv.get(this);\n        var isFirmata = true;\n        var defaultLed;\n\n        isFirmata = Pins.isFirmata(this);\n\n        if (isFirmata && typeof pinValue === \"string\" && pinValue[0] === \"A\") {\n          pinValue = this.io.analogPins[+pinValue.slice(1)];\n        }\n\n        defaultLed = this.io.defaultLed || 13;\n        pinValue = +pinValue;\n\n        if (isFirmata && this.io.analogPins.includes(pinValue)) {\n          this.pin = pinValue;\n          state.mode = this.io.MODES.OUTPUT;\n        } else {\n          this.pin = typeof opts.pin === \"undefined\" ? defaultLed : opts.pin;\n          state.mode = this.io.MODES[\n            (this.board.pins.isPwm(this.pin) ? \"PWM\" : \"OUTPUT\")\n          ];\n        }\n\n        this.io.pinMode(this.pin, state.mode);\n      }\n    },\n    update: {\n      writable: true,\n      value: function(input) {\n        var state = priv.get(this);\n        var output = typeof input !== \"undefined\" ? input : state.value;\n        var value = state.isAnode ? 255 - Board.constrain(output, 0, 255) : output;\n\n        // If pin is not a PWM pin and brightness is not HIGH or LOW, emit an error\n        if (value !== this.io.LOW && value !== this.io.HIGH && this.mode !== this.io.MODES.PWM) {\n          Board.Pins.Error({\n            pin: this.pin,\n            type: \"PWM\",\n            via: \"Led\"\n          });\n        }\n\n        if (state.mode === this.io.MODES.OUTPUT) {\n          value = output;\n        }\n\n        this.write(value);\n      }\n    },\n    write: {\n      writable: true,\n      value: function(value) {\n        var state = priv.get(this);\n\n        if (state.mode === this.io.MODES.OUTPUT) {\n          this.io.digitalWrite(this.pin, value);\n        }\n\n        if (state.mode === this.io.MODES.PWM) {\n          this.io.analogWrite(this.pin, value);\n        }\n      }\n    }\n  }\n};\n\n/**\n * Led\n * @constructor\n *\n * five.Led(pin);\n *\n * five.Led({\n *   pin: number\n *  });\n *\n *\n * @param {Object} opts [description]\n *\n */\n\nfunction Led(opts) {\n  if (!(this instanceof Led)) {\n    return new Led(opts);\n  }\n\n  var pinValue = typeof opts === \"object\" ? opts.pin : opts;\n  var controller = null;\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    controller = Controllers.DEFAULT;\n  }\n\n  Object.defineProperties(this, controller);\n\n  var state = {\n    isAnode: opts.isAnode,\n    isOn: false,\n    isRunning: false,\n    value: null,\n    direction: 1,\n    mode: null,\n    intensity: 0,\n    interval: null\n  };\n\n  priv.set(this, state);\n\n  Object.defineProperties(this, {\n    value: {\n      get: function() {\n        return state.value;\n      }\n    },\n    mode: {\n      get: function() {\n        return state.mode;\n      }\n    },\n    isOn: {\n      get: function() {\n        return !!state.value;\n      }\n    },\n    isRunning: {\n      get: function() {\n        return state.isRunning;\n      }\n    },\n    animation: {\n      get: function() {\n        return state.animation;\n      }\n    }\n  });\n\n  /* istanbul ignore else */\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts, pinValue);\n  }\n}\n\n/**\n * on Turn the led on\n * @return {Led}\n */\nLed.prototype.on = function() {\n  var state = priv.get(this);\n\n  if (state.mode === this.io.MODES.OUTPUT) {\n    state.value = this.io.HIGH;\n  }\n\n  if (state.mode === this.io.MODES.PWM) {\n    // Assume we need to simply turn this all the way on, when:\n\n    // ...state.value is null\n    if (state.value === null) {\n      state.value = 255;\n    }\n\n    // ...there is no active interval\n    if (!state.interval) {\n      state.value = 255;\n    }\n\n    // ...the last value was 0\n    if (state.value === 0) {\n      state.value = 255;\n    }\n  }\n\n  this.update();\n\n  return this;\n};\n\n/**\n * off  Turn the led off\n * @return {Led}\n */\nLed.prototype.off = function() {\n  var state = priv.get(this);\n\n  state.value = 0;\n\n  this.update();\n\n  return this;\n};\n\n/**\n * toggle Toggle the on/off state of an led\n * @return {Led}\n */\nLed.prototype.toggle = function() {\n  return this[this.isOn ? \"off\" : \"on\"]();\n};\n\n/**\n * brightness\n * @param  {Number} value analog brightness value 0-255\n * @return {Led}\n */\nLed.prototype.brightness = function(brightness) {\n  var state = priv.get(this);\n  state.value = brightness;\n\n  this.update();\n\n  return this;\n};\n\n/**\n * intensity\n * @param  {Number} value Light intensity 0-100\n * @return {Led}\n */\nLed.prototype.intensity = function(intensity) {\n  var state = priv.get(this);\n\n  if (arguments.length === 0) {\n    return state.intensity;\n  }\n\n  state.intensity = Fn.constrain(intensity, 0, 100);\n\n  return this.brightness(Fn.scale(state.intensity, 0, 100, 0, 255));\n};\n\n/**\n * Animation.normalize\n *\n * @param [number || object] keyFrames An array of step values or a keyFrame objects\n */\n\nLed.prototype[Animation.normalize] = function(keyFrames) {\n  var state = priv.get(this);\n\n  // If user passes null as the first element in keyFrames use current value\n  /* istanbul ignore else */\n  if (keyFrames[0] === null) {\n    keyFrames[0] = {\n      value: state.value || 0\n    };\n  }\n\n  return keyFrames.map(function(frame) {\n    var value = frame;\n    /* istanbul ignore else */\n    if (frame !== null) {\n      // frames that are just numbers represent values\n      if (typeof frame === \"number\") {\n        frame = {\n          value: value,\n        };\n      } else {\n        if (typeof frame.brightness === \"number\") {\n          frame.value = frame.brightness;\n          delete frame.brightness;\n        }\n        if (typeof frame.intensity === \"number\") {\n          frame.value = Fn.scale(frame.intensity, 0, 100, 0, 255);\n          delete frame.intensity;\n        }\n      }\n\n      /* istanbul ignore else */\n      if (!frame.easing) {\n        frame.easing = \"linear\";\n      }\n    }\n    return frame;\n  });\n};\n\n/**\n * Animation.render\n *\n * @position [number] value to set the led to\n */\n\nLed.prototype[Animation.render] = function(position) {\n  var state = priv.get(this);\n  state.value = position[0];\n  return this.update();\n};\n\n/**\n * pulse Fade the Led in and out in a loop with specified time\n * @param  {number} duration Time in ms that a fade in/out will elapse\n * @return {Led}\n *\n * - or -\n *\n * @param  {Object} val An Animation() segment config object\n */\n\nLed.prototype.pulse = function(duration, callback) {\n  var state = priv.get(this);\n\n  this.stop();\n\n  var options = {\n    duration: typeof duration === \"number\" ? duration : 1000,\n    keyFrames: [0, 0xff],\n    metronomic: true,\n    loop: true,\n    easing: \"inOutSine\",\n    onloop: function() {\n      /* istanbul ignore else */\n      if (typeof callback === \"function\") {\n        callback();\n      }\n    }\n  };\n\n  if (typeof duration === \"object\") {\n    Object.assign(options, duration);\n  }\n\n  if (typeof duration === \"function\") {\n    callback = duration;\n  }\n\n  state.isRunning = true;\n\n  state.animation = state.animation || new Animation(this);\n  state.animation.enqueue(options);\n  return this;\n};\n\n/**\n * fade Fade an led in and out\n * @param  {Number} val  Analog brightness value 0-255\n * @param  {Number} duration Time in ms that a fade in/out will elapse\n * @return {Led}\n *\n * - or -\n *\n * @param  {Object} val An Animation() segment config object\n */\n\nLed.prototype.fade = function(val, duration, callback) {\n\n  var state = priv.get(this);\n\n  this.stop();\n\n  var options = {\n    duration: typeof duration === \"number\" ? duration : 1000,\n    keyFrames: [null, typeof val === \"number\" ? val : 0xff],\n    easing: \"outSine\",\n    oncomplete: function() {\n      state.isRunning = false;\n      /* istanbul ignore else */\n      if (typeof callback === \"function\") {\n        callback();\n      }\n    }\n  };\n\n  if (typeof val === \"object\") {\n    Object.assign(options, val);\n  }\n\n  if (typeof val === \"function\") {\n    callback = val;\n  }\n\n  if (typeof duration === \"object\") {\n    Object.assign(options, duration);\n  }\n\n  if (typeof duration === \"function\") {\n    callback = duration;\n  }\n\n  state.isRunning = true;\n\n  state.animation = state.animation || new Animation(this);\n  state.animation.enqueue(options);\n\n  return this;\n};\n\nLed.prototype.fadeIn = function(duration, callback) {\n  return this.fade(255, duration || 1000, callback);\n};\n\nLed.prototype.fadeOut = function(duration, callback) {\n  return this.fade(0, duration || 1000, callback);\n};\n\n/**\n * blink\n * @param  {Number} duration Time in ms on, time in ms off\n * @return {Led}\n */\nLed.prototype.blink = function(duration, callback) {\n  var state = priv.get(this);\n\n  // Avoid traffic jams\n  this.stop();\n\n  if (typeof duration === \"function\") {\n    callback = duration;\n    duration = null;\n  }\n\n  state.isRunning = true;\n\n  state.interval = setInterval(function() {\n    this.toggle();\n    if (typeof callback === \"function\") {\n      callback();\n    }\n  }.bind(this), duration || 100);\n\n  return this;\n};\n\nLed.prototype.strobe = Led.prototype.blink;\n\n/**\n * stop Stop the led from strobing, pulsing or fading\n * @return {Led}\n */\nLed.prototype.stop = function() {\n  var state = priv.get(this);\n\n  if (state.interval) {\n    clearInterval(state.interval);\n  }\n\n  if (state.animation) {\n    state.animation.stop();\n  }\n\n  state.interval = null;\n  state.isRunning = false;\n\n  return this;\n};\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Led.Controllers = Controllers;\n  Led.purge = function() {\n    priv.clear();\n  };\n}\n\n\nmodule.exports = Led;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/led/led.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/led/ledcontrol.js":
/*!********************************************************!*\
  !*** ./node_modules/johnny-five/lib/led/ledcontrol.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {/*\n  About the original version of ledcontrol.js:\n\n  This was originally a port by Rebecca Murphey of the LedControl library\n  and also includes a port of the AdaFruit LEDBackpack library\n  (MIT License, Copyright (c) 2012 Adafruit Industries)\n\n  The license of the original LedControl library is as follows:\n\n  LedControl.cpp - A library for controling Leds with a MAX7219/MAX7221\n  Copyright (c) 2007 Eberhard Fahle\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation\n  files (the \"Software\"), to deal in the Software without\n  restriction, including without limitation the rights to use,\n  copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the\n  Software is furnished to do so, subject to the following\n  conditions:\n\n  This permission notice shall be included in all copies or\n  substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n  OTHER DEALINGS IN THE SOFTWARE.\n\n */\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\nvar Board = __webpack_require__(/*! ../board */ \"./node_modules/johnny-five/lib/board.js\");\nvar ledCharacters = __webpack_require__(/*! ./led-chars */ \"./node_modules/johnny-five/lib/led/led-chars.js\");\n\n// Led instance private data\nvar priv = new Map(),\n  Controllers;\n\n/**\n * Create an LED control.\n * @mixes Board.Component\n * @param {Object}  opts              An options hash.\n * @param {String}  [opts.controller] The controller to use. Either default (\"MAX 7219\") or \"HT16K33\".\n * @param {Boolean} [opts.colon]      Whether the device has a built in colon.\n * @param {Number}  [opts.devices]    The number of connected LED devices.\n * @param {Array}   [opts.addresses]  I2C addresses.\n * @param {*}       opts.pins         The digital pin numbers that connect to\n *                                    data, clock, and cs connections on the controller device.\n *                                    Only for use with the default controller.\n *                                    Accepts either an object ({data, clock, cs})\n *                                    or an array ([data, clock, cs]).\n * @param {*}       [opts.dims]       Dimensions of the LED screen.\n *                                    Only for use with the HT16K33 controller.\n * @param {Boolean} [opts.isBicolor]  Whether the LED screen is bicolor.\n *                                    Only for use with the HT16K33 controller.\n */\nfunction LedControl(opts) {\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  /*\n   device instance uses an interface from Controllers:\n   either MAX 7219 (default) or HT16K33\n   */\n  var controller = null;\n\n  if (typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (typeof controller === \"undefined\") {\n    controller = Controllers.DEFAULT;\n  }\n\n  // functions from Controller interface\n\n  this.clear = controller.clear;\n  this.led = controller.led;\n  this.row = controller.row;\n  this.scanLimit = controller.scanLimit;\n  this.send = controller.send;\n  this.sendDigit = controller.sendDigit;\n  this.initialize = controller.initialize;\n\n  // controller specific op codes\n  this.OP = controller.OP;\n\n  // digit indexes may be ordered left to right (1) or reversed (-1)\n  this.digitOrder = 1;\n\n  // Does the device have a built-in colon?\n  /* istanbul ignore else */\n  if (!this.isMatrix) {\n    this.colon = opts.colon || false;\n  }\n\n  // extra functions for HT16K33 devices only\n  if (controller.writeDisplay) {\n    this.writeDisplay = controller.writeDisplay;\n  }\n  if (controller.blink) {\n    this.blink = controller.blink;\n  }\n  /*\n    devices variable indicates number of connected LED devices\n    Here's an example of multiple devices:\n    http://tronixstuff.com/2013/10/11/tutorial-arduino-max7219-led-display-driver-ic/\n   */\n  var devices = opts.devices || (opts.addresses ? opts.addresses.length : 1);\n\n  this.memory = Array(64).fill(0);\n\n  opts.dims = opts.dims || LedControl.MATRIX_DIMENSIONS[\"8x8\"];\n  if (typeof opts.dims === \"string\") {\n    opts.dims = LedControl.MATRIX_DIMENSIONS[opts.dims];\n  }\n  if (Array.isArray(opts.dims)) {\n    opts.dims = {\n      rows: opts.dims[0],\n      columns: opts.dims[1],\n    };\n  }\n  var state = {\n    devices: devices,\n    digits: opts.digits || 8,\n    isMatrix: !!opts.isMatrix,\n    isBicolor: !!opts.isBicolor,\n    rows: opts.dims.rows,\n    columns: opts.dims.columns\n  };\n\n  if (!(state.columns === 8 || state.columns === 16) || !(state.rows === 8 || state.rows === 16) || (state.columns + state.rows === 32)) {\n    throw new Error(\"Invalid matrix dimensions specified: must be 8x8, 16x8 or 8x16\");\n  }\n\n  Object.defineProperties(this, {\n    devices: {\n      get: function() {\n        return state.devices;\n      }\n    },\n    digits: {\n      get: function() {\n        return state.digits;\n      }\n    },\n    isMatrix: {\n      get: function() {\n        return state.isMatrix;\n      }\n    },\n    isBicolor: {\n      get: function() {\n        return state.isBicolor;\n      }\n    },\n    rows: {\n      get: function() {\n        return state.rows;\n      }\n    },\n    columns: {\n      get: function() {\n        return state.columns;\n      }\n    }\n  });\n\n  priv.set(this, state);\n  controller.initialize.call(this, opts);\n}\n\n/**\n * Iterate over the index of each connected device and invoke a callback function\n * for each.\n * @param {Function} callbackfn The function to callback for each device index.\n */\nLedControl.prototype.each = function(callbackfn) {\n  for (var i = 0; i < this.devices; i++) {\n    callbackfn.call(this, i);\n  }\n};\n\n/**\n * Turn the LED device(s) on.\n * @param  {Number} addr The index of the device to turn on.\n *                       If undefined, all devices are turned on.\n * @return {LEDControl}  Returns this to allow for chaining.\n */\nLedControl.prototype.on = function(addr) {\n  if (typeof addr === \"undefined\") {\n    this.each(function(device) {\n      this.on(device);\n    });\n  } else {\n    this.send(addr, this.OP.SHUTDOWN || LedControl.OP.SHUTDOWN, 1);\n  }\n  return this;\n};\n\n/**\n * Turn the LED device(s) off.\n * @param  {Number} addr The index of the device to turn off.\n *                       If undefined, all devices are turned off.\n * @return {LEDControl}  Returns this to allow for chaining.\n */\nLedControl.prototype.off = function(addr) {\n  if (typeof addr === \"undefined\") {\n    this.each(function(device) {\n      this.off(device);\n    });\n  } else {\n    this.send(addr, this.OP.SHUTDOWN || LedControl.OP.SHUTDOWN, 0);\n  }\n  return this;\n};\n\n/* istanbul ignore next */\nLedControl.prototype.setLed = util.deprecate(function(addr, chr, val, dp) {\n  /* istanbul ignore next */\n  return this.led(addr, chr, val, dp);\n}, \"LedControl.prototype.setLed: Use `led`instead\");\n\n/**\n * digit Display a digit and optional decimal point.\n * @param  {Number} addr      Device address\n * @param  {Number} position  0-7\n * @param  {String} val       0-9[.]\n * @return {LedControl}\n */\nLedControl.prototype.digit = function(addr, position, chr) {\n  var args, offset, index, character, value;\n  var hasDecimal = false;\n\n  if (arguments.length < 3) {\n    args = Array.from(arguments);\n    this.each(function(device) {\n      this.digit.apply(this, (args.unshift(device), args));\n    });\n    return this;\n  }\n\n  if (this.isMatrix) {\n    // Not sure this is the best path, will check when segment\n    // devices are available.\n    this.draw.apply(this, arguments);\n    return this;\n  }\n\n  offset = addr * this.digits;\n\n  character = String(chr);\n  position = Number(position);\n\n  // If controller's indexes are ordered right to left, flip\n  // the index around.\n  index = position;\n  if (this.digitOrder === -1) {\n    index = this.digits - index - 1;\n  }\n\n  if (character.length === 2 && character[1] === \".\") {\n    hasDecimal = true;\n    character = character[0];\n  }\n\n  value = LedControl.DIGIT_CHARS[character];\n\n  if (!value) {\n    value = Math.abs(Number(character));\n  }\n\n  if (hasDecimal) {\n    value = value | LedControl.DIGIT_CHARS[\".\"];\n  }\n\n  this.memory[offset + index] = value;\n  this.sendDigit(addr, index, value);\n  return this;\n};\n\n/**\n * print Print series of characters to the display.\n * @param  {String} message One or more characters to be displayed.\n * @param  {Object} opts    (Optional) Options specifying:\n *                          - device: {Number} Device address\n * @return {LedControl}\n */\nLedControl.prototype.print = function(message, opts) {\n  var rdigchars = /([0-9A-Za-z][.]|[0-9A-Za-z:]|[\\s])/g;\n  var characters;\n\n  opts = opts || {\n    device: 0\n  };\n\n  if (this.isMatrix) {\n    // figure out what to do with Matrix displays\n    throw new Error(\"Led.Matrix does not yet support the print method\");\n  }\n\n  if (typeof message !== \"string\") {\n    message = String(message);\n  }\n\n  characters = message.match(rdigchars);\n\n  // When a device has a built-in colon, ie. \"00:00\",\n  // then attempt to make it less awkward to print words across\n  // the display by splicing in a \" \" placeholder, but only\n  // when necessary.\n  if (this.colon) {\n    if (characters.length > 2 &&\n      (characters[2] !== \":\" && characters[2] !== \" \")) {\n      characters.splice(2, 0, \" \");\n    }\n  }\n\n  /* istanbul ignore next */\n  (characters || []).forEach(function(character, position) {\n    this.digit(opts.device, position, character);\n  }, this);\n  return this;\n};\n\n/*\n * brightness\n * @param {Number} addr Address of Led device\n * @param {Number} val Brightness value\n */\nLedControl.prototype.brightness = function(addr, val) {\n  if (arguments.length === 1) {\n    val = addr;\n    this.each(function(device) {\n      this.brightness(device, val);\n    });\n  } else {\n    this.send(addr, this.OP.BRIGHTNESS || LedControl.OP.BRIGHTNESS, Board.map(val, 0, 100, 0, 15));\n  }\n  return this;\n};\n/**\n * column Update an entire column with an 8 or 16 bit value\n * @param  {Number} addr Device address\n * @param  {Number} col  0 indexed col number 0-7\n * @param  {Number} val  8-bit 0-0xFF (for 8x8 or 16x8 matrix) or 16-bit 0-0xFFFF (for 8x16) value\n * @return {LedControl}\n */\nLedControl.prototype.column = function(addr, col, value) {\n  var state;\n  if (!this.isMatrix) {\n    throw new Error(\"The `column` method is only supported for Matrix devices\");\n  }\n  if (arguments.length === 2) {\n    value = col;\n    col = addr;\n    this.each(function(device) {\n      this.column(device, col, value);\n    });\n  } else {\n    for (var row = 0; row < this.rows; row++) {\n      state = value >> ((this.rows - 1) - row);\n      state = state & 0x01;\n      this.led(addr, row, col, state);\n    }\n  }\n\n  return this;\n};\n\n/**\n * draw Draw a character\n * @param  {Number} addr  Device address\n * @param  {Number} chr   Character to draw\n *\n * Used as pass-through to .digit\n *\n * @param  {Number} val   8-bit value 0-255\n * @param  {Number} dp    ugly\n * @return {LedControl}\n */\nLedControl.prototype.draw = function(addr, chr) {\n  // in matrix mode, this takes two arguments:\n  // addr and the character to display\n  var character;\n\n  if (arguments.length === 1) {\n    chr = addr;\n    this.each(function(device) {\n      this.draw(device, chr);\n    });\n  } else {\n\n    if (this.isMatrix) {\n      if (Array.isArray(chr)) {\n        character = chr;\n      } else {\n        character = ledCharacters.MATRIX_CHARS[chr];\n      }\n\n      /* istanbul ignore else */\n      if (character !== undefined) {\n        if (character.length !== this.rows && character.length !== this.columns) {\n          throw new Error(\"Invalid character: \" + character);\n        }\n        // pad character to match number of rows suppported by device\n        var charLength = character.length;\n\n        for (var i = 0; i < (this.rows - charLength); i++) {\n          /* istanbul ignore next */\n          character.push(0);\n        }\n\n        character.forEach(function(rowData, idx) {\n          this.row(addr, idx, rowData);\n        }, this);\n      }\n    } else {\n\n      // in seven-segment mode, this takes four arguments, which\n      // are just passed through to digit\n      this.digit.apply(this, arguments);\n    }\n  }\n\n  return this;\n};\n\n// LedControl.prototype.shift = function(addr, direction, distance) {\n\n//   if (arguments.length === 2) {\n//     distance = direction;\n//     direction = addr;\n//     this.each(function() {\n//       this.shift(addr, direction, distance);\n//     });\n//   } else {\n\n//   }\n\n//   return this;\n// };\n\n/* istanbul ignore next */\nLedControl.prototype.char = util.deprecate(function(addr, chr, val, dp) {\n  /* istanbul ignore next */\n  return this.draw(addr, chr, val, dp);\n}, \"LedControl.prototype.setLed: Use `draw`instead\");\n\nLedControl.prototype.device = function(addr) {\n  var bound = {};\n\n  /* keys from prototype */\n  Object.keys(LedControl.prototype).forEach(function(key) {\n    bound[key] = this[key].bind(this, addr);\n  }, this);\n\n  /* functions from interface */\n  Object.getOwnPropertyNames(this).forEach(function(key) {\n    if (this[key] && typeof this[key] === \"function\") {\n      bound[key] = this[key].bind(this, addr);\n    }\n  }, this);\n  return bound;\n};\n\nvar addresses = new Set([0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77]);\n\nControllers = {\n  HT16K33: {\n    OP: {\n      SHUTDOWN: 0x20,\n      BRIGHTNESS: 0xE0,\n      BLINK: 0x80\n    },\n    initialize: function(opts) {\n      var state = priv.get(this);\n      var available = Array.from(addresses);\n\n      if (available.length === 0) {\n        throw new Error(\"There are no available HT16K33 controller addresses\");\n      }\n\n      this.addresses = opts.addresses || (opts.address ? [opts.address] : null);\n\n      // use default range of addresses if addresses aren't specified\n      if (this.addresses === null) {\n        this.addresses = available.slice(0, state.devices);\n      }\n\n      this.addresses.forEach(function(address) {\n        if (!addresses.has(address)) {\n          throw new Error(\"Invalid HT16K33 controller address: \" + address);\n        }\n        addresses.delete(address);\n      });\n\n      this.rotation = opts.rotation || 1;\n      // set a default rotation that works with AdaFruit 16x8 matrix if using 16 columns\n      /* istanbul ignore next */\n      if (this.columns === 16 && !opts.rotation) {\n        this.rotation = 0;\n      }\n      this.buffer = Array(this.rows).fill([]);\n\n      if (!this.isMatrix) {\n        this.colon = true;\n      }\n\n      opts.addresses = this.addresses;\n\n      // Set up I2C data connection\n      this.io.i2cConfig(opts);\n      // TODO allow setup to be configured through opts\n      this.each(function(device) {\n        this.on(device);\n        // Turn off blinking during initialization, in case it was left on.\n        this.blink(device, false);\n        this.brightness(device, 100);\n        this.clear(device);\n      });\n    },\n\n    /**\n     * Blink the screen.\n     *\n     * @param  {*} addr      Either the index of the device to blink,\n     *                       or the blink value to apply to all devices.\n     * @param  {String} val  The blink value. Either 'slow' (once every 2 seconds),\n     *                       'normal' (once every second), 'fast' (once every 500ms),\n     *                       or false to turn off blinking.\n     * @return {LedControl}  Returns this to allow for chaining.\n     */\n    blink: function(addr, val) {\n      if (arguments.length === 1) {\n        val = addr;\n        this.each(function(device) {\n          this.blink(device, val);\n        });\n      } else {\n        var _val = null;\n        // Translate human-readable value to value expected by HT16K33, see datasheet.\n        switch (val) {\n          case false:\n            _val = 0;\n            break;\n          case \"slow\":\n            _val = 6;\n            break;\n          case \"normal\":\n            _val = 4;\n            break;\n          case \"fast\":\n            _val = 2;\n            break;\n        }\n        /* istanbul ignore if */\n        if (_val == null) {\n          return;\n        }\n        // Add 1 to the opcode to turn blinking functionality on, see datasheet.\n        this.send(addr, this.OP.BLINK | 1, _val);\n      }\n      return this;\n    },\n\n    /*\n     * clear\n     * @param {Number} addr Address of Led device\n     */\n    clear: function(addr) {\n      var offset;\n      if (typeof addr === \"undefined\") {\n        this.each(function(device) {\n          this.clear(device);\n        });\n      } else {\n        offset = addr * this.columns;\n\n        for (var i = 0; i < this.rows; i++) {\n          this.memory[offset + i] = 0;\n          this.buffer[addr][i] = 0;\n        }\n        this.writeDisplay(addr);\n      }\n      return this;\n    },\n    /**\n     * led or setLed Set the memory of a single Led.\n     *\n     * @param {Number} addr Address of Led\n     * @param {Number} row Row number of Led (0-7)\n     * @param {Number} column Column number of Led (0-7)\n     * @param {Boolean} state [ true: on, false: off ] [ 1, 0 ] or an LedControl color code\n     *\n     */\n    led: function(addr, row, col, state) {\n\n      if (arguments.length === 3) {\n        state = col;\n        col = row;\n        row = addr;\n        this.each(function(device) {\n          this.led(device, row, col, state);\n        });\n        return this;\n      } else {\n        var x = col;\n        var y = row;\n        var tmp, rows = this.rows,\n          columns = this.columns;\n        if ((y < 0) || (y >= rows)) {\n          return this;\n        }\n        if ((x < 0) || (x >= columns)) {\n          return this;\n        }\n        switch (this.rotation) {\n          case 1:\n            columns = this.rows;\n            rows = this.columns;\n            tmp = x;\n            x = y;\n            y = tmp;\n            x = columns - x - 1;\n            break;\n          case 2:\n            x = columns - x - 1;\n            y = rows - y - 1;\n            break;\n          case 3:\n            columns = this.rows;\n            rows = this.columns;\n            tmp = x;\n            x = y;\n            y = tmp;\n            y = rows - y - 1;\n            break;\n        }\n        if (!this.isBicolor) {\n          // x needs to be wrapped around for single color 8x8 AdaFruit matrix\n          /* istanbul ignore else */\n          if (columns === 8 && rows === 8) {\n            x += columns - 1;\n            x %= columns;\n          }\n          if (state) {\n            this.buffer[addr][y] |= 1 << x;\n          } else {\n            this.buffer[addr][y] &= ~(1 << x);\n          }\n        } else {\n          // 8x8 bi-color matrixes only\n          if (state === LedControl.COLORS.GREEN) {\n            // Turn on green LED.\n            this.buffer[addr][y] |= 1 << x;\n            // Turn off red LED.\n            this.buffer[addr][y] &= ~(1 << (x + 8));\n          } else if (state === LedControl.COLORS.YELLOW) {\n            // Turn on green and red LED.\n            this.buffer[addr][y] |= (1 << (x + 8)) | (1 << x);\n          } else if (state === LedControl.COLORS.RED) {\n            // Turn on red LED.\n            this.buffer[addr][y] |= 1 << (x + 8);\n            // Turn off green LED.\n            this.buffer[addr][y] &= ~(1 << x);\n          } else {\n            // Turn off green and red LED.\n            this.buffer[addr][y] &= ~(1 << x) & ~(1 << (x + 8));\n          }\n        }\n        this.writeDisplay(addr);\n      }\n      return this;\n    },\n    writeDisplay: function(addr) {\n      var bytes = [0x00];\n      // always writes 8 rows (for 8x16, the values have already been rotated)\n      for (var i = 0; i < 8; i++) {\n        bytes.push(this.buffer[addr][i] & 0xFF);\n        bytes.push(this.buffer[addr][i] >> 8);\n      }\n      this.io.i2cWrite(this.addresses[addr], bytes);\n    },\n\n    /**\n     * row Update an entire row with an 8 bit value\n     * @param  {Number} addr Device address\n     * @param  {Number} row  0 indexed row number 0-7\n     * @param  {Number} val  8-bit value 0-255\n     * @return {LedControl}\n     */\n    row: function(addr, row, val /* 0 - 0xFFFF or string */ ) {\n      if (!this.isMatrix) {\n        throw new Error(\"The `row` method is only supported for Matrix devices\");\n      }\n      if (typeof val === \"number\") {\n        val = (\"0000000000000000\" + parseInt(val, 10).toString(2)).substr(0 - (this.columns), this.columns);\n      }\n      if (arguments.length === 2) {\n        val = row;\n        row = addr;\n        this.each(function(device) {\n          this.row(device, row, val);\n        });\n      } else {\n\n        // call the led function because the handling of rotation\n        // and wrapping for monochrome matrixes is done there\n        for (var i = 0; i < this.columns; i++) {\n          this.led(addr, row, i, parseInt(val[i], 10));\n        }\n      }\n\n      return this;\n    },\n\n    scanLimit: function() {\n      throw new Error(\"The `scanLimit` method is not implemented for HT16K33 devices\");\n    },\n\n    /*\n     * Send data to the LED controller.\n     * @param {Number} addr   Index of the device to address.\n     * @param {Number} opcode Operation code.\n     * @param {Number} data   Data.\n     */\n    send: function(addr, opcode, data) {\n      if (arguments.length !== 3) {\n        throw new Error(\"The `send` method expects three arguments: device, opcode, data\");\n      }\n      this.io.i2cWrite(this.addresses[addr], [opcode | data]);\n      return this;\n    },\n\n    /**\n     * sendDigit\n     * @param  {Number} addr     Device address.\n     * @param  {Number} index    0-7\n     * @param  {Number} code     8-bit value 0-255\n     * @return {LedControl}\n     */\n    sendDigit: function(addr, index, code) {\n      // Given:\n      //\n      //   0 === 0b00000000\n      // 255 === 0b11111111\n      //\n      // ...0 & 255 can be skipped.\n      //\n      if (code > 0 && code < 255) {\n        // Convert from hex to binary, padded to 8 bits.\n        code = (\"00000000\" + code.toString(2)).slice(-8).split(\"\");\n        // Reverse bits for each display segment except the decimal,\n        // to match the HT16K33 controller's segment ordering.\n        code = code.shift() + code.reverse().join(\"\");\n        code = parseInt(code, 2);\n      }\n\n      // Convert to decimal and write to the display.\n      this.buffer[addr][index] = code;\n      this.writeDisplay(addr);\n      return this;\n    },\n  },\n\n  DEFAULT: {\n    OP: {},\n    initialize: function(opts) {\n\n      this.pins = {\n        data: opts.pins.data,\n        clock: opts.pins.clock,\n        cs: opts.pins.cs || opts.pins.latch\n      };\n      [\"data\", \"clock\", \"cs\"].forEach(function(pin) {\n        this.io.pinMode(this.pins[pin], this.io.MODES.OUTPUT);\n      }, this);\n      // NOTE: Currently unused, these will form\n      // the basis for the `setup` constructor option\n      // var setup = Object.assign({}, LedControl.DEFAULTS, opts.setup || {});\n      // var keys = Object.keys(setup);\n\n      // digit indexes ordered right to left.\n      this.digitOrder = -1;\n      this.digitOrder = -1;\n\n      for (var device = 0; device < this.devices; device++) {\n        /*\n          TODO: Add support for custom initialization\n\n          An example of initialization, added to the constructor options:\n\n            setup: {\n              // OPCODE: VALUE\n              DECODING: 0,\n              BRIGHTNESS: 3,\n              SCANLIMIT: 7,\n              SHUTDOWN: 1,\n              DISPLAYTEST: 1\n            },\n\n\n          In context:\n\n            var lc = new five.LedControl({\n              pins: {\n                data: 2,\n                clock: 3,\n                cs: 4\n              },\n              setup: {\n                DECODING: 0,\n                BRIGHTNESS: 3,\n                SCANLIMIT: 7,\n                SHUTDOWN: 1,\n                DISPLAYTEST: 1\n              },\n              isMatrix: true\n            });\n\n\n          The custom initializers are invoked as:\n\n            keys.forEach(function(key) {\n              this.send(device, LedControl.OP[key], setup[key]);\n            }, this);\n\n\n          I might be missing something obvious, but this isn't working.\n          Using the same options shown below, the above should behave exactly the\n          same way that the code below does, but that's not the case. The result is\n          all leds in the matrix are lit and none can be cleared.\n          */\n        if (this.isMatrix) {\n          this.send(device, LedControl.OP.DECODING, 0);\n        }\n\n        this.send(device, LedControl.OP.BRIGHTNESS, 3);\n        this.send(device, LedControl.OP.SCANLIMIT, 7);\n        this.send(device, LedControl.OP.SHUTDOWN, 1);\n        this.send(device, LedControl.OP.DISPLAYTEST, 0);\n\n        this.clear(device);\n        this.on(device);\n      }\n      return this;\n\n    },\n    clear: function(addr) {\n      var offset;\n\n      if (typeof addr === \"undefined\") {\n        this.each(function(device) {\n          this.clear(device);\n        });\n      } else {\n        offset = addr * 8;\n\n        for (var i = 0; i < 8; i++) {\n          this.memory[offset + i] = 0;\n          this.send(addr, i + 1, 0);\n        }\n      }\n      return this;\n    },\n\n    /**\n     * sendDigit\n     * @param  {Number} addr     Device address.\n     * @param  {Number} index    0-7\n     * @param  {Number} code     8-bit value 0-255\n     * @return {LedControl}\n     */\n    sendDigit: function(addr, index, code) {\n      this.send(addr, index + 1, code);\n      return this;\n    },\n\n    /**\n     * led or setLed Set the memory of a single Led.\n     *\n     * @param {Number} addr Address of Led\n     * @param {Number} row Row number of Led (0-7)\n     * @param {Number} column Column number of Led (0-7)\n     * @param {Boolean} state [ true: on, false: off ] [ 1, 0 ]\n     *\n     */\n    led: function(addr, row, col, state) {\n      var offset, val;\n\n      if (arguments.length === 3) {\n        state = col;\n        col = row;\n        row = addr;\n        this.each(function(device) {\n          this.led(device, row, col, state);\n        });\n      } else {\n        offset = addr * this.columns;\n        val = 0x80 >> col;\n\n        if (state) {\n          this.memory[offset + row] = this.memory[offset + row] | val;\n        } else {\n          val = ~val;\n          this.memory[offset + row] = this.memory[offset + row] & val;\n        }\n        this.send(addr, row + 1, this.memory[offset + row]);\n      }\n\n      return this;\n    },\n\n    /**\n     * row Update an entire row with an 8 bit value\n     * @param  {Number} addr Device address\n     * @param  {Number} row  0 indexed row number 0-7\n     * @param  {Number} val  8-bit value 0-255\n     * @return {LedControl}\n     */\n    row: function(addr, row, val /* 0 - 255 or string */ ) {\n      if (!this.isMatrix) {\n        throw new Error(\"The `row` method is only supported for Matrix devices\");\n      }\n      var offset;\n      if (typeof val === \"string\") {\n        val = parseInt(val, 2);\n      }\n      if (arguments.length === 2) {\n        val = row;\n        row = addr;\n        this.each(function(device) {\n          this.row(device, row, val);\n        });\n      } else {\n        offset = addr * this.columns;\n        this.memory[offset + row] = val;\n        this.send(addr, row + 1, this.memory[offset + row]);\n      }\n\n      return this;\n    },\n    /*\n     * scanLimit (function from interface)\n     * @param {Number} addr Address of Led device\n     * @param {Number} limit\n     */\n    scanLimit: function(addr, limit) {\n      if (arguments.length === 1) {\n        limit = addr;\n        this.each(function(device) {\n          this.scanLimit(device, limit);\n        });\n      } else {\n        this.send(addr, LedControl.OP.SCANLIMIT, limit);\n      }\n      return this;\n    },\n    send: function(addr, opcode, data) {\n      if (arguments.length !== 3) {\n        throw new Error(\"`send` expects three arguments: device, opcode, data\");\n      }\n      var offset = addr * 2;\n      var maxBytes = this.devices * 2;\n      var spiData = [];\n\n      if (addr < this.devices) {\n        for (var i = 0; i < maxBytes; i++) {\n          spiData[i] = 0;\n        }\n\n        spiData[offset + 1] = opcode;\n        spiData[offset] = data;\n\n        this.io.digitalWrite(this.pins.cs, this.io.LOW);\n\n        for (var j = maxBytes; j > 0; j--) {\n          this.board.shiftOut(this.pins.data, this.pins.clock, spiData[j - 1]);\n        }\n\n        this.io.digitalWrite(this.pins.cs, this.io.HIGH);\n      }\n\n      return this;\n    }\n  }\n};\n\n// NOTE: Currently unused, these will form\n// the basis for the `setup` constructor option\nLedControl.DEFAULTS = {\n  DECODING: 0x00,\n  BRIGHTNESS: 0x03,\n  SCANLIMIT: 0x07,\n  SHUTDOWN: 0x01,\n  DISPLAYTEST: 0x00\n};\n\nObject.freeze(LedControl.DEFAULTS);\n\nLedControl.OP = {};\n\nLedControl.OP.NOOP = 0x00;\n\nLedControl.OP.DIGIT0 = 0x01;\nLedControl.OP.DIGIT1 = 0x02;\nLedControl.OP.DIGIT2 = 0x03;\nLedControl.OP.DIGIT3 = 0x04;\nLedControl.OP.DIGIT4 = 0x05;\nLedControl.OP.DIGIT5 = 0x06;\nLedControl.OP.DIGIT6 = 0x07;\nLedControl.OP.DIGIT7 = 0x08;\n\nLedControl.OP.DECODEMODE = 0x09;\nLedControl.OP.INTENSITY = 0x0a;\nLedControl.OP.SCANLIMIT = 0x0b;\nLedControl.OP.SHUTDOWN = 0x0c;\nLedControl.OP.DISPLAYTEST = 0x0f;\n\n// Aliases\nLedControl.OP.BRIGHTNESS = LedControl.OP.INTENSITY;\nLedControl.OP.DECODING = LedControl.OP.DECODEMODE;\nLedControl.OP.DISPLAY = LedControl.OP.DISPLAYTEST;\nLedControl.OP.POWERDOWN = LedControl.OP.SHUTDOWN;\n\nObject.freeze(LedControl.OP);\n\nLedControl.COLORS = {\n  RED: 1,\n  YELLOW: 2,\n  GREEN: 3\n};\n\nLedControl.DIRECTIONS = {\n  UP: 1,\n  RIGHT: 2,\n  DOWN: 3,\n  LEFT: 4,\n  1: \"UP\",\n  2: \"RIGHT\",\n  3: \"DOWN\",\n  4: \"LEFT\",\n};\n\nObject.freeze(LedControl.DIRECTIONS);\n\n// Double Digit Numbers\n//\n// Each digit:\n//\n// - is drawn as far to the left as possible.\n// - uses 3 bits\n//\nvar digits = [\n  [0xe0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xe0, 0x00],\n  [0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0xe0, 0x00],\n  [0xe0, 0x20, 0x20, 0xe0, 0x80, 0x80, 0xe0, 0x00],\n  [0xe0, 0x20, 0x20, 0x60, 0x20, 0x20, 0xe0, 0x00],\n  [0x20, 0x60, 0xa0, 0xe0, 0x20, 0x20, 0x20, 0x00],\n  [0xe0, 0x80, 0x80, 0xe0, 0x20, 0x20, 0xe0, 0x00],\n  [0xe0, 0x80, 0x80, 0xe0, 0xa0, 0xa0, 0xe0, 0x00],\n  [0xe0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00],\n  [0xe0, 0xa0, 0xa0, 0x40, 0xa0, 0xa0, 0xe0, 0x00],\n  [0xe0, 0xa0, 0xa0, 0xe0, 0x20, 0x20, 0xe0, 0x00],\n];\n\nvar charName = \"\";\n\nfor (var i = 0; i < 10; i++) {\n  for (var k = 0; k < 10; k++) {\n    charName = i + \"\" + k;\n    ledCharacters.MATRIX_CHARS[charName] = [];\n\n    for (var j = 0; j < 8; j++) {\n      // Left digit takes 3 bits, plus 1 to between digits = 4 bits to the right.\n      ledCharacters.MATRIX_CHARS[charName][j] = digits[i][j] | (digits[k][j] >>> 4);\n    }\n  }\n}\n\nLedControl.MATRIX_DIMENSIONS = {\n  \"16x8\": {\n    rows: 16,\n    columns: 8\n  },\n  \"8x16\": {\n    rows: 8,\n    columns: 16\n  },\n  \"8x8\": {\n    rows: 8,\n    columns: 8\n  }\n};\n\nLedControl.MATRIX_CHARS = ledCharacters.MATRIX_CHARS;\nLedControl.DIGIT_CHARS = ledCharacters.DIGIT_CHARS;\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  LedControl.Controllers = Controllers;\n  LedControl.purge = function() {\n    addresses = new Set([0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77]);\n    priv.clear();\n  };\n}\n\nmodule.exports = LedControl;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/led/ledcontrol.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/led/leds.js":
/*!**************************************************!*\
  !*** ./node_modules/johnny-five/lib/led/leds.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Animation = __webpack_require__(/*! ../animation */ \"./node_modules/johnny-five/lib/animation.js\");\nvar Led = __webpack_require__(/*! ./led */ \"./node_modules/johnny-five/lib/led/led.js\");\nvar callbacks = __webpack_require__(/*! ./callbacks */ \"./node_modules/johnny-five/lib/led/callbacks.js\");\nvar Collection = __webpack_require__(/*! ../mixins/collection */ \"./node_modules/johnny-five/lib/mixins/collection.js\");\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\n\n/**\n * Leds()\n * new Leds()\n *\n * Create an Array-like object instance of Leds\n * @alias Led.Array\n * @constructor\n * @return {Leds}\n */\nfunction Leds(numsOrObjects) {\n  if (!(this instanceof Leds)) {\n    return new Leds(numsOrObjects);\n  }\n\n  Object.defineProperty(this, \"type\", {\n    value: Led\n  });\n\n  Collection.call(this, numsOrObjects);\n}\n\nutil.inherits(Leds, Collection);\n\nCollection.installMethodForwarding(\n  Leds.prototype, Led.prototype\n);\n\ncallbacks(Leds, [\"pulse\", \"fade\", \"fadeIn\", \"fadeOut\", \"blink\"]);\n\n/**\n * Animation.normalize\n *\n * @param [number || object] keyFrames An array of step values or a keyFrame objects\n */\n\nLeds.prototype[Animation.normalize] = function(keyFrameSet) {\n  return keyFrameSet.map(function(keyFrames, index) {\n    if (keyFrames !== null) {\n      return this[index][Animation.normalize](keyFrames);\n    }\n    return keyFrames;\n  }, this);\n};\n\n/**\n * Animation.render\n *\n * @position [number] array of values to set the leds to\n */\n\nLeds.prototype[Animation.render] = function(frames) {\n  return this.each(function(led, i) {\n    led[Animation.render]([frames[i]]);\n  });\n};\n\n\nmodule.exports = Leds;\n\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/led/leds.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/led/matrix.js":
/*!****************************************************!*\
  !*** ./node_modules/johnny-five/lib/led/matrix.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var LedControl = __webpack_require__(/*! ./ledcontrol */ \"./node_modules/johnny-five/lib/led/ledcontrol.js\");\n\n// stub implementation; extract functionality from ledcontrol.js\nfunction Matrix(opts) {\n  opts.isMatrix = true;\n  return new LedControl(opts);\n}\n\nObject.assign(Matrix, LedControl, {\n  CHARS: LedControl.MATRIX_CHARS\n});\n\nmodule.exports = Matrix;\n\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/led/matrix.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/led/rgb.js":
/*!*************************************************!*\
  !*** ./node_modules/johnny-five/lib/led/rgb.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var Board = __webpack_require__(/*! ../board */ \"./node_modules/johnny-five/lib/board.js\");\nvar Animation = __webpack_require__(/*! ../animation */ \"./node_modules/johnny-five/lib/animation.js\");\nvar Expander = __webpack_require__(/*! ../expander */ \"./node_modules/johnny-five/lib/expander.js\");\nvar Fn = __webpack_require__(/*! ../fn */ \"./node_modules/johnny-five/lib/fn.js\");\nvar converter = __webpack_require__(/*! color-convert */ \"./node_modules/color-convert/index.js\");\n\nvar priv = new Map();\n\nvar Controllers = {\n  DEFAULT: {\n    initialize: {\n      value: function(opts) {\n        RGB.colors.forEach(function(color, index) {\n          var pin = opts.pins[index];\n\n          if (opts.debug && !this.board.pins.isPwm(pin)) {\n            Board.Pins.Error({\n              pin: pin,\n              type: \"PWM\",\n              via: \"Led.RGB\"\n            });\n          }\n\n          this.io.pinMode(pin, this.io.MODES.PWM);\n          this.pins[index] = pin;\n        }, this);\n      }\n    },\n    write: {\n      writable: true,\n      value: function(colors) {\n        var state = priv.get(this);\n\n        RGB.colors.forEach(function(color, index) {\n          var pin = this.pins[index];\n          var value = colors[color];\n\n          if (state.isAnode) {\n            value = 255 - Board.constrain(value, 0, 255);\n          }\n\n          this.io.analogWrite(pin, value);\n        }, this);\n      }\n    }\n  },\n  PCA9685: {\n    initialize: {\n      value: function(opts) {\n\n        var state = priv.get(this);\n\n        this.address = opts.address || 0x40;\n        this.pwmRange = opts.pwmRange || [0, 4095];\n        this.frequency = opts.frequency || 200;\n\n        state.expander = Expander.get({\n          address: this.address,\n          controller: this.controller,\n          bus: this.bus,\n          pwmRange: this.pwmRange,\n          frequency: this.frequency,\n        });\n\n        RGB.colors.forEach(function(color, index) {\n          this.pins[index] = state.expander.normalize(opts.pins[index]);\n          state.expander.analogWrite(this.pins[index], 0);\n        }, this);\n      }\n    },\n    write: {\n      writable: true,\n      value: function(colors) {\n        var state = priv.get(this);\n\n        RGB.colors.forEach(function(color, index) {\n          var pin = this.pins[index];\n          var value = colors[color];\n\n          if (state.isAnode) {\n            value = 255 - Board.constrain(value, 0, 255);\n          }\n\n          state.expander.analogWrite(pin, value);\n\n        }, this);\n      }\n    }\n  },\n  BLINKM: {\n    REGISTER: {\n      value: {\n        GO_TO_RGB_COLOR_NOW: 0x6e,\n        STOP_SCRIPT: 0x6f\n      }\n    },\n    initialize: {\n      value: function(opts) {\n        this.address = opts.address || 0x09;\n\n        // Ensure that this is passed on to i2cConfig\n        opts.address = this.address;\n\n        /* istanbul ignore else */\n        if (!this.board.Drivers[this.address]) {\n          this.io.i2cConfig(opts);\n          this.board.Drivers[this.address] = {\n            initialized: false\n          };\n\n          // Stop the current script\n          this.io.i2cWrite(this.address, [this.REGISTER.STOP_SCRIPT]);\n\n          this.board.Drivers[this.address].initialized = true;\n        }\n      }\n    },\n    write: {\n      writable: true,\n      value: function(colors) {\n        this.io.i2cWrite(this.address, [this.REGISTER.GO_TO_RGB_COLOR_NOW, colors.red, colors.green, colors.blue]);\n      }\n    }\n  }\n};\n\nControllers.ESPLORA = {\n  initialize: {\n    value: function(opts) {\n      opts.pins = [5, 10, 9];\n      this.pins = [];\n      Controllers.DEFAULT.initialize.value.call(this, opts);\n    }\n  },\n  write: Controllers.DEFAULT.write\n};\n\n/**\n * RGB\n * @constructor\n *\n * @param {Object} opts [description]\n * @alias Led.RGB\n */\nfunction RGB(opts) {\n  if (!(this instanceof RGB)) {\n    return new RGB(opts);\n  }\n\n  var controller = null;\n\n  if (Array.isArray(opts)) {\n    // RGB([Byte, Byte, Byte]) shorthand\n    // Convert to opts.pins array definition\n    opts = {\n      pins: opts\n    };\n    // If opts.pins is an object, convert to array\n  } else if (typeof opts.pins === \"object\" && !Array.isArray(opts.pins)) {\n    opts.pins = [opts.pins.red, opts.pins.green, opts.pins.blue];\n  }\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    controller = Controllers.DEFAULT;\n  }\n\n\n  // The default color is #ffffff, but the light will be off\n  var state = {\n    red: 255,\n    green: 255,\n    blue: 255,\n    intensity: 100,\n    isAnode: opts.isAnode || false,\n    interval: null\n  };\n\n  // red, green, and blue store the raw color set via .color()\n  // values takes state into account, such as on/off and intensity\n  state.values = {\n    red: state.red,\n    green: state.green,\n    blue: state.blue\n  };\n\n  priv.set(this, state);\n\n  Board.Controller.call(this, controller, opts);\n\n  Object.defineProperties(this, {\n    isOn: {\n      get: function() {\n        return RGB.colors.some(function(color) {\n          return state[color] > 0;\n        });\n      }\n    },\n    isRunning: {\n      get: function() {\n        return !!state.interval;\n      }\n    },\n    isAnode: {\n      get: function() {\n        return state.isAnode;\n      }\n    },\n    values: {\n      get: function() {\n        return Object.assign({}, state.values);\n      }\n    },\n    update: {\n      value: function(colors) {\n        var state = priv.get(this);\n\n        colors = colors || this.color();\n\n        state.values = RGB.ToScaledRGB(state.intensity, colors);\n\n        this.write(state.values);\n\n        Object.assign(state, colors);\n      }\n    }\n  });\n\n  this.initialize(opts);\n  this.off();\n}\n\nRGB.colors = [\"red\", \"green\", \"blue\"];\n\n\nRGB.ToScaledRGB = function(intensity, colors) {\n  var scale = intensity / 100;\n\n  return RGB.colors.reduce(function(current, color) {\n    return (current[color] = Math.round(colors[color] * scale), current);\n  }, {});\n};\n\nRGB.ToRGB = function(red, green, blue) {\n  var update = {};\n  var flags = 0;\n  var input;\n\n  if (typeof red !== \"undefined\") {\n    // 0b100\n    flags |= 1 << 2;\n  }\n\n  if (typeof green !== \"undefined\") {\n    // 0b010\n    flags |= 1 << 1;\n  }\n\n  if (typeof blue !== \"undefined\") {\n    // 0b001\n    flags |= 1 << 0;\n  }\n\n  if ((flags | 0x04) === 0x04) {\n    input = red;\n\n    if (input == null) {\n      throw new Error(\"Invalid color (\" + input + \")\");\n    }\n\n    /* istanbul ignore else */\n    if (Array.isArray(input)) {\n      // color([Byte, Byte, Byte])\n      update = {\n        red: input[0],\n        green: input[1],\n        blue: input[2]\n      };\n    } else if (typeof input === \"object\") {\n      // color({\n      //   red: Byte,\n      //   green: Byte,\n      //   blue: Byte\n      // });\n      update = {\n        red: input.red,\n        green: input.green,\n        blue: input.blue\n      };\n    } else if (typeof input === \"string\") {\n\n      // color(\"#ffffff\") or color(\"ffffff\")\n      if (/^#?[0-9A-Fa-f]{6}$/.test(input)) {\n\n        // remove the leading # if there is one\n        if (input.length === 7 && input[0] === \"#\") {\n          input = input.slice(1);\n        }\n\n        update = {\n          red: parseInt(input.slice(0, 2), 16),\n          green: parseInt(input.slice(2, 4), 16),\n          blue: parseInt(input.slice(4, 6), 16)\n        };\n      } else {\n        // color(\"rgba(r, g, b, a)\") or color(\"rgb(r, g, b)\")\n        // color(\"rgba(r g b a)\") or color(\"rgb(r g b)\")\n        if (/^rgb/.test(input)) {\n          var args = input.match(/^rgba?\\(([^)]+)\\)$/)[1].split(/[\\s,]+/);\n\n          // If the values were %...\n          if (isPercentString(args[0])) {\n            args.forEach(function(value, index) {\n              // Only convert the first 3 values\n              if (index <= 2) {\n                args[index] = Math.round((parseInt(value, 10) / 100) * 255);\n              }\n            });\n          }\n\n          update = {\n            red: parseInt(args[0], 10),\n            green: parseInt(args[1], 10),\n            blue: parseInt(args[2], 10)\n          };\n\n          // If rgba(...)\n          if (args.length > 3) {\n            if (isPercentString(args[3])) {\n              args[3] = parseInt(args[3], 10) / 100;\n            }\n            update = RGB.ToScaledRGB(100 * parseFloat(args[3]), update);\n          }\n        } else {\n          // color name\n          return RGB.ToRGB(converter.keyword.rgb(input.toLowerCase()));\n        }\n      }\n    }\n  } else {\n    // color(red, green, blue)\n    update = {\n      red: red,\n      green: green,\n      blue: blue\n    };\n  }\n\n  return update;\n};\n\nfunction isPercentString(input) {\n  return typeof input === \"string\" && input.endsWith(\"%\");\n}\n/**\n * color\n *\n * @param  {String} color Hexadecimal color string or CSS color name\n * @param  {Array} color Array of color values\n * @param  {Object} color object {red, green, blue}\n *\n * @return {RGB}\n */\nRGB.prototype.color = function(red, green, blue) {\n  var state = priv.get(this);\n  var colors;\n\n  if (arguments.length === 0) {\n    // Return a copy of the state values,\n    // not a reference to the state object itself.\n    colors = this.isOn ? state : state.prev;\n    return RGB.colors.reduce(function(current, color) {\n      return (current[color] = Math.round(colors[color]), current);\n    }, {});\n  }\n\n  var update = RGB.ToRGB(red, green, blue);\n\n  // Validate all color values before writing any values\n  RGB.colors.forEach(function(color) {\n    var value = update[color];\n\n    if (value == null) {\n      throw new Error(\"Led.RGB.color: invalid color ([\" + [update.red, update.green, update.blue].join(\",\") + \"])\");\n    }\n\n    value = Fn.constrain(value, 0, 255);\n    update[color] = value;\n  }, this);\n\n  this.update(update);\n\n  return this;\n};\n\nRGB.prototype.on = function() {\n  var state = priv.get(this);\n  var colors;\n\n  // If it's not already on, we set them to the previous color\n  if (!this.isOn) {\n    /* istanbul ignore next */\n    colors = state.prev || {\n      red: 255,\n      green: 255,\n      blue: 255\n    };\n\n    state.prev = null;\n\n    this.update(colors);\n  }\n\n  return this;\n};\n\nRGB.prototype.off = function() {\n  var state = priv.get(this);\n\n  // If it's already off, do nothing so the pervious state stays intact\n  /* istanbul ignore else */\n  if (this.isOn) {\n    state.prev = RGB.colors.reduce(function(current, color) {\n      return (current[color] = state[color], current);\n    }.bind(this), {});\n\n    this.update({\n      red: 0,\n      green: 0,\n      blue: 0\n    });\n  }\n\n  return this;\n};\n\n/**\n * blink\n * @param  {Number} duration Time in ms on, time in ms off\n * @return {RGB}\n */\nRGB.prototype.blink = function(duration, callback) {\n  var state = priv.get(this);\n\n  // Avoid traffic jams\n  this.stop();\n\n  if (typeof duration === \"function\") {\n    callback = duration;\n    duration = null;\n  }\n\n  state.interval = setInterval(function() {\n    this.toggle();\n    if (typeof callback === \"function\") {\n      callback();\n    }\n  }.bind(this), duration || 100);\n\n  return this;\n};\n\nRGB.prototype.strobe = RGB.prototype.blink;\n\nRGB.prototype.toggle = function() {\n  return this[this.isOn ? \"off\" : \"on\"]();\n};\n\nRGB.prototype.stop = function() {\n  var state = priv.get(this);\n\n  if (state.interval) {\n    clearInterval(state.interval);\n  }\n\n  /* istanbul ignore if */\n  if (state.animation) {\n    state.animation.stop();\n  }\n\n  state.interval = null;\n\n  return this;\n};\n\nRGB.prototype.intensity = function(intensity) {\n  var state = priv.get(this);\n\n  if (arguments.length === 0) {\n    return state.intensity;\n  }\n\n  state.intensity = Fn.constrain(intensity, 0, 100);\n\n  this.update();\n\n  return this;\n};\n\n/**\n * Animation.normalize\n *\n * @param [number || object] keyFrames An array of step values or a keyFrame objects\n */\n\nRGB.prototype[Animation.normalize] = function(keyFrames) {\n  var state = priv.get(this);\n\n  // If user passes null as the first element in keyFrames use current value\n  if (keyFrames[0] === null) {\n    keyFrames[0] = state.values;\n  }\n\n  return keyFrames.reduce(function(accum, frame) {\n    var normalized = {};\n    var value = frame;\n    var color = null;\n    var intensity = state.intensity;\n\n    if (frame !== null) {\n      // Frames that are just numbers are not allowed\n      // because it is ambiguous.\n      if (typeof value === \"number\") {\n        throw new Error(\"RGB LEDs expect a complete keyFrame object or hexadecimal string value\");\n      }\n\n      if (typeof value === \"string\") {\n        color = value;\n      }\n\n      if (Array.isArray(value)) {\n        color = value;\n      } else {\n        if (typeof value === \"object\") {\n          if (typeof value.color !== \"undefined\") {\n            color = value.color;\n          } else {\n            color = value;\n          }\n        }\n      }\n\n      if (typeof frame.intensity === \"number\") {\n        intensity = frame.intensity;\n        delete frame.intensity;\n      }\n\n      normalized.easing = frame.easing || \"linear\";\n      normalized.value = RGB.ToScaledRGB(intensity, RGB.ToRGB(color));\n    } else {\n      normalized = frame;\n    }\n\n    accum.push(normalized);\n\n    return accum;\n  }, []);\n};\n\n/**\n * Animation.render\n *\n * @color [object] color object\n */\n\nRGB.prototype[Animation.render] = function(frames) {\n  return this.color(frames[0]);\n};\n\n/**\n * For multi-property animation, must define\n * the keys to use for tween calculation.\n */\nRGB.prototype[Animation.keys] = RGB.colors;\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  RGB.Controllers = Controllers;\n  RGB.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = RGB;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/led/rgb.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/led/rgbs.js":
/*!**************************************************!*\
  !*** ./node_modules/johnny-five/lib/led/rgbs.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Animation = __webpack_require__(/*! ../animation */ \"./node_modules/johnny-five/lib/animation.js\");\nvar callbacks = __webpack_require__(/*! ./callbacks */ \"./node_modules/johnny-five/lib/led/callbacks.js\");\nvar Collection = __webpack_require__(/*! ../mixins/collection */ \"./node_modules/johnny-five/lib/mixins/collection.js\");\nvar RGB = __webpack_require__(/*! ./rgb */ \"./node_modules/johnny-five/lib/led/rgb.js\");\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\n\n/**\n * RGBs()\n * new RGBs()\n *\n * Create an Array-like object instance of RGBs\n * @alias Led.RGB.Collection\n * @constructor\n * @return {RGBs}\n */\nfunction RGBs(numsOrObjects) {\n  if (!(this instanceof RGBs)) {\n    return new RGBs(numsOrObjects);\n  }\n\n  Object.defineProperty(this, \"type\", {\n    value: RGB\n  });\n\n  Collection.call(this, numsOrObjects);\n}\n\nutil.inherits(RGBs, Collection);\n\nCollection.installMethodForwarding(\n  RGBs.prototype, RGB.prototype\n);\n\ncallbacks(RGBs, [\"blink\"]);\n\n\n/**\n * Animation.normalize\n *\n * @param [number || object] keyFrames An array of step values or a keyFrame objects\n */\n\nRGBs.prototype[Animation.normalize] = function(keyFrameSet) {\n  return keyFrameSet.map(function(keyFrames, index) {\n    if (keyFrames !== null) {\n      return this[index][Animation.normalize](keyFrames);\n    }\n    return keyFrames;\n  }, this);\n};\n\n/**\n * Animation.render\n *\n * @position [number] array of values to set the leds to\n */\n\nRGBs.prototype[Animation.render] = function(frames) {\n  return this.each(function(rgb, i) {\n    rgb[Animation.render]([frames[i]]);\n  });\n};\n\n/**\n * For multi-property animation, must define\n * the keys to use for tween calculation.\n */\nRGBs.prototype[Animation.keys] = RGB.colors;\n\n\nmodule.exports = RGBs;\n\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/led/rgbs.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/light.js":
/*!***********************************************!*\
  !*** ./node_modules/johnny-five/lib/light.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\");\nvar EVS = __webpack_require__(/*! ./evshield */ \"./node_modules/johnny-five/lib/evshield.js\");\nvar within = __webpack_require__(/*! ./mixins/within */ \"./node_modules/johnny-five/lib/mixins/within.js\");\nvar Fn = __webpack_require__(/*! ./fn */ \"./node_modules/johnny-five/lib/fn.js\");\nvar Emitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\nvar priv = new Map();\n// var int16 = Fn.int16;\nvar uint16 = Fn.uint16;\nvar toFixed = Fn.toFixed;\n\nvar Controllers = {\n  DEFAULT: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        this.io.pinMode(this.pin, this.io.MODES.ANALOG);\n        this.io.analogRead(this.pin, dataHandler);\n      },\n    },\n    toIntensityLevel: {\n      value: function(raw) {\n        return toFixed(Fn.scale(raw, 0, 1023, 0, 100) / 100, 2);\n      }\n    }\n  },\n  EVS_EV3: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n\n        if (opts.mode) {\n          opts.mode = opts.mode.toUpperCase();\n        }\n\n        state.mode = opts.mode === \"REFLECTED\" ? EVS.Type_EV3_LIGHT_REFLECTED : EVS.Type_EV3_LIGHT;\n\n        state.shield = EVS.shieldPort(opts.pin);\n        state.ev3 = new EVS(Object.assign(opts, {\n          io: this.io\n        }));\n        state.ev3.setup(state.shield, EVS.Type_EV3);\n        state.ev3.write(state.shield, 0x81 + state.shield.offset, state.mode);\n        state.ev3.read(state.shield, EVS.Light, EVS.Light_Bytes, function(data) {\n          var value = data[0] | (data[1] << 8);\n          dataHandler(value);\n        });\n      }\n    },\n    toIntensityLevel: {\n      value: function(raw) {\n        return toFixed(raw / 100, 2);\n      }\n    }\n  },\n  EVS_NXT: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n\n        if (opts.mode) {\n          opts.mode = opts.mode.toUpperCase();\n        }\n\n        state.mode = opts.mode === \"REFLECTED\" ? EVS.Type_NXT_LIGHT_REFLECTED : EVS.Type_NXT_LIGHT;\n\n        state.shield = EVS.shieldPort(opts.pin);\n        state.ev3 = new EVS(Object.assign(opts, {\n          io: this.io\n        }));\n        state.ev3.setup(state.shield, state.mode);\n        state.ev3.read(state.shield, state.shield.analog, EVS.Analog_Bytes, function(data) {\n          var value = data[0] | (data[1] << 8);\n          dataHandler(value);\n        });\n      }\n    },\n    toIntensityLevel: {\n      value: function(raw) {\n        return toFixed(Fn.scale(raw, 0, 1023, 100, 0) / 100, 2);\n      }\n    }\n  },\n\n  TSL2561: {\n    ADDRESSES: {\n      value: [0x29, 0x39, 0x49]\n    },\n    REGISTER: {\n      value: {\n        CONTROL: 0x00,\n        TIMING: 0x01,\n        READ: 0x2C,\n      },\n    },\n\n    initialize: {\n      value: function(opts, dataHandler) {\n        var address = opts.address || 0x39;\n        var command = function(byte) {\n          // byte | 0b10000000;\n          return byte | 0x80;\n        };\n\n        opts.address = address;\n\n        this.io.i2cConfig(opts);\n\n        // Page 15\n        // Control Register (0h)\n        // RESV  7:2\n        // POWER 1:0\n        //\n        // Power up/power down.\n        // By writing a 03h to this register, the device is powered up.\n        // By writing a 00h to this register, the device is powered down.\n        //\n        // 0b00000011 = 0x03\n        // 0b00000000 = 0x00\n        this.io.i2cWriteReg(address, command(this.REGISTER.CONTROL), 0x03);\n\n        // Gain & Integration\n        // var isAutoGain = false;\n\n        // Page 24\n        // Integration time scaling factors\n        var LUX_SCALE = 14; // scale by (2 ** 14)\n        var RATIO_SCALE = 9; // scale ratio by (2 ** 9)\n\n        // Page 24\n        // T, FN, and CL Package coefficients\n        var K1T = 0x0040; // 0.125 * (2 ** RATIO_SCALE)\n        var B1T = 0x01F2; // 0.0304 * (2 ** LUX_SCALE)\n        var M1T = 0x01BE; // 0.0272 * (2 ** LUX_SCALE)\n        var K2T = 0x0080; // 0.250 * (2 ** RATIO_SCALE)\n        var B2T = 0x0214; // 0.0325 * (2 ** LUX_SCALE)\n        var M2T = 0x02D1; // 0.0440 * (2 ** LUX_SCALE)\n        var K3T = 0x00C0; // 0.375 * (2 ** RATIO_SCALE)\n        var B3T = 0x023F; // 0.0351 * (2 ** LUX_SCALE)\n        var M3T = 0x037B; // 0.0544 * (2 ** LUX_SCALE)\n        var K4T = 0x0100; // 0.50 * (2 ** RATIO_SCALE)\n        var B4T = 0x0270; // 0.0381 * (2 ** LUX_SCALE)\n        var M4T = 0x03FE; // 0.0624 * (2 ** LUX_SCALE)\n        var K5T = 0x0138; // 0.61 * (2 ** RATIO_SCALE)\n        var B5T = 0x016F; // 0.0224 * (2 ** LUX_SCALE)\n        var M5T = 0x01FC; // 0.0310 * (2 ** LUX_SCALE)\n        var K6T = 0x019A; // 0.80 * (2 ** RATIO_SCALE)\n        var B6T = 0x00D2; // 0.0128 * (2 ** LUX_SCALE)\n        var M6T = 0x00FB; // 0.0153 * (2 ** LUX_SCALE)\n        var K7T = 0x029A; // 1.3 * (2 ** RATIO_SCALE)\n        var B7T = 0x0018; // 0.00146 * (2 ** LUX_SCALE)\n        var M7T = 0x0012; // 0.00112 * (2 ** LUX_SCALE)\n        var K8T = 0x029A; // 1.3 * (2 ** RATIO_SCALE)\n        var B8T = 0x0000; // 0.000 * (2 ** LUX_SCALE)\n        var M8T = 0x0000; // 0.000 * (2 ** LUX_SCALE)\n\n        // Auto-gain thresholds\n        // Max value at Ti 13ms = 5047\n        // var AGT_LO_13MS = 100;\n        // var AGT_HI_13MS = 4850;\n\n        // // Max value at Ti 101ms = 37177\n        // var AGT_LO_101MS = 200;\n        // var AGT_HI_101MS = 36000;\n\n        // // Max value at Ti 402ms = 65535\n        // var AGT_LO_402MS = 500;\n        // var AGT_HI_402MS = 63000;\n\n        // var agtRanges = [\n        //   // 0, TI_13MS\n        //   [100, 4850],\n        //   // 1, TI_101MS\n        //   [200, 36000],\n        //   // 2, TI_402MS\n        //   [500, 63000],\n        // ];\n\n        // var CLIPPING_13MS = 4900;\n        // var CLIPPING_101MS = 37000;\n        // var CLIPPING_402MS = 65000;\n\n        // var clipping = [\n        //   // 0, TI_13MS\n        //   4900,\n        //   // 1, TI_101MS\n        //   37000,\n        //   // 2, TI_402MS\n        //   65000,\n        // ];\n\n\n        var GAIN_1X = 0x00;\n        var GAIN_16X = 0x10;\n\n        // var TI_13MS = 0x00;\n        // var TI_101MS = 0x01;\n        // var TI_402MS = 0x02;\n\n        var TintMs = [\n          // 0, TI_13MS\n          13,\n          // 1, TI_101MS\n          101,\n          // 2, TI_402MS\n          402,\n        ];\n\n        var TintDelayMs = [\n          // 0, TI_13MS\n          15,\n          // 1, TI_101MS\n          120,\n          // 2, TI_402MS\n          450,\n        ];\n\n        // Page 23 - 28\n        // Simplified Lux Calculation\n        // var CH_SCALE_D = 0x0010;\n        // var CH_SCALE_0 = 0x7517;\n        // var CH_SCALE_1 = 0x0FE7;\n\n        var chScales = [\n          // 0, TI_13MS\n          0x07517,\n          // 1, TI_101MS\n          0x00FE7,\n          // 2, TI_402MS\n          0x10000,\n        ];\n\n        // Gain and Tint defaults;\n        var gain = GAIN_16X;\n        var TintIndex = 0;\n        var Tint = TintMs[TintIndex];\n        var lux = 0;\n\n        // if (typeof opts.gain !== \"undefined\") {\n        //   isAutoGain = false;\n        //   gain = opts.gain;\n        // }\n\n        // if (typeof opts.integration !== \"undefined\") {\n        //   isAutoGain = false;\n        //   Tint = opts.integration;\n        // }\n\n\n        // TODO: reduce duplication here\n        Object.defineProperties(this, {\n          gain: {\n            get: function() {\n              return gain;\n            },\n            set: function(value) {\n              if (value !== GAIN_1X && value !== GAIN_16X) {\n                throw new RangeError(\"Invalid gain. Expected one of: 0, 16\");\n              }\n              gain = value;\n\n              this.io.i2cWriteReg(address, command(this.REGISTER.TIMING), TintIndex | gain);\n            }\n          },\n          integration: {\n            get: function() {\n              return Tint;\n            },\n            set: function(value) {\n              TintIndex = TintMs.indexOf(value);\n\n              if (TintIndex === -1) {\n                throw new RangeError(\"Invalid integration. Expected one of: 13, 101, 402\");\n              }\n\n              Tint = value;\n\n              this.io.i2cWriteReg(address, command(this.REGISTER.TIMING), TintIndex | gain);\n            }\n          },\n          lux: {\n            get: function() {\n              return lux;\n            }\n          }\n        });\n\n        // Assign the default gain and integration values\n        // These are validated and written to the device.\n        // These will invoke the accessors above.\n        this.gain = gain;\n        this.integration = Tint;\n\n        // Page 1\n        // Description\n        // Page 2\n        // Functional Block Diagram\n        // var data = {\n        //   broadband: null,\n        //   infrared: null,\n        // };\n\n        var read = function() {\n          setTimeout(function() {\n            // Page 19\n            // Read ADC Channels Using Read Word Protocol − RECOMMENDED\n            this.io.i2cReadOnce(address, command(this.REGISTER.READ), 4, function(data) {\n              // Page 23 - 28\n              // Simplified Lux Calculation\n              var ch0 = uint16(data[1], data[0]);\n              var ch1 = uint16(data[3], data[2]);\n              var b = 0;\n              var m = 0;\n\n              // Page 26\n              // CalculateLux(...)\n              var chScale = chScales[TintIndex];\n\n\n              if (!gain) {\n                chScale = chScale << 4;\n              }\n\n              // Page 27\n              // CalculateLux(...)\n              ch0 = (ch0 * chScale) >> 10;\n              ch1 = (ch1 * chScale) >> 10;\n\n              var ratio1 = 0;\n\n              if (ch0) {\n                ratio1 = (ch1 << (RATIO_SCALE + 1)) / ch0;\n              }\n\n              ratio1 = Math.round(ratio1);\n\n              var ratio = (ratio1 + 1) >> 1;\n\n              if (ratio >= 0 && ratio <= K1T) {\n                b = B1T;\n                m = M1T;\n              } else if (ratio <= K2T) {\n                b = B2T;\n                m = M2T;\n              } else if (ratio <= K3T) {\n                b = B3T;\n                m = M3T;\n              } else if (ratio <= K4T) {\n                b = B4T;\n                m = M4T;\n              } else if (ratio <= K5T) {\n                b = B5T;\n                m = M5T;\n              } else if (ratio <= K6T) {\n                b = B6T;\n                m = M6T;\n              } else if (ratio <= K7T) {\n                b = B7T;\n                m = M7T;\n              } else if (ratio > K8T) {\n                b = B8T;\n                m = M8T;\n              }\n              // I followed the datasheet and it had no else clause here.\n\n              var temp = (ch0 * b) - (ch1 * m);\n\n              if (temp < 0) {\n                temp = 0;\n              }\n\n              temp += 1 << (LUX_SCALE - 1);\n\n              // Updating the `lux` binding\n              // in the outer scope.\n              lux = temp >>> LUX_SCALE;\n\n              dataHandler(lux);\n              read();\n            });\n          }.bind(this), TintDelayMs[TintIndex]);\n        }.bind(this);\n\n        read();\n      }\n    },\n    toLux: {\n      value: function(raw) {\n        return raw;\n      },\n    },\n    toIntensityLevel: {\n      value: function(raw) {\n        return toFixed(Fn.scale(raw, 0, 17000, 0, 100) / 100, 2);\n      },\n    },\n  },\n  BH1750: {\n    // code based on Arduino library https://github.com/claws/BH1750\n    // currently only \"continuous H-resolution\" mode supported\n    ADDRESSES: {\n      value: [0x23, 0x5C]\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var address = opts.address || 0x23;\n        var mode = opts.mode || 0x10;\n        opts.address = address;\n        this.io.i2cConfig(opts);\n        this.io.i2cWrite(address, mode);\n        var read = function() {\n          setTimeout(function() {\n            this.io.i2cReadOnce(address, 2, function(data) {\n              var raw = data[0];\n              raw <<= 8;\n              raw |= data[1];\n              dataHandler(raw);\n              read();\n            });\n          }.bind(this), 120);\n        }.bind(this);\n        read();\n      },\n    },\n    toLux: {\n      value: function(raw) {\n        // Page 2\n        // H-Resolution Mode Resolution rHR － 1 － lx\n        return Math.round(raw / 1.2);\n      },\n    },\n    toIntensityLevel: {\n      value: function(raw) {\n        return toFixed(Fn.scale(raw / 1.2, 0, 65535, 0, 100) / 100, 2);\n      },\n    },\n  },\n};\n\nControllers.ALSPT19 = Controllers[\"ALS-PT19\"] = Controllers.DEFAULT;\n\n\n/**\n * Light\n * @constructor\n *\n */\n\nfunction Light(opts) {\n\n  if (!(this instanceof Light)) {\n    return new Light(opts);\n  }\n\n  var controller = null;\n  var state = {};\n  var raw = 0;\n  var last = 0;\n  var freq = opts.freq || 25;\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  if (typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller];\n  } else {\n    controller = opts.controller || Controllers.DEFAULT;\n  }\n\n  Board.Controller.call(this, controller, opts);\n\n  if (!this.toIntensityLevel) {\n    this.toIntensityLevel = opts.toIntensityLevel || function(x) {\n      return x;\n    };\n  }\n\n  if (!this.toLux) {\n    this.toLux = opts.toLux || function(x) {\n      return x;\n    };\n  }\n\n  Object.defineProperties(this, {\n    value: {\n      get: function() {\n        return raw;\n      },\n    },\n    level: {\n      get: function() {\n        return this.toIntensityLevel(raw);\n      },\n    },\n  });\n\n  priv.set(this, state);\n\n  /* istanbul ignore else */\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts, function(data) {\n      raw = data;\n    });\n  }\n\n  if (typeof this.lux === \"undefined\") {\n    Object.defineProperty(this, \"lux\", {\n      get: function() {\n        return this.toLux(raw);\n      },\n    });\n  }\n\n  var data = {\n    level: 0,\n    lux: 0,\n  };\n\n  setInterval(function() {\n    data.level = this.level;\n    data.lux = this.lux;\n\n    this.emit(\"data\", data);\n\n    if (raw !== last) {\n      last = raw;\n      this.emit(\"change\", data);\n    }\n  }.bind(this), freq);\n}\n\nutil.inherits(Light, Emitter);\n\nObject.assign(Light.prototype, within);\n\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Light.Controllers = Controllers;\n  Light.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = Light;\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/light.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/mixins/collection.js":
/*!***********************************************************!*\
  !*** ./node_modules/johnny-five/lib/mixins/collection.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var IS_TEST_MODE = !!process.env.IS_TEST_MODE;\nvar Emitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\nvar priv = new Map();\n\n/**\n * Collection\n *\n * Make Collections for output classes\n *\n * @param {[type]} numsOrObjects\n */\nfunction Collection(numsOrObjects) {\n  var Type = this.type;\n  var initObjects = [];\n\n  this.length = 0;\n\n  if (Array.isArray(numsOrObjects)) {\n    initObjects = numsOrObjects;\n  } else {\n    // Initialize with a Shared Properties object\n    /* istanbul ignore else */\n    if (Array.isArray(numsOrObjects.pins)) {\n      var keys = Object.keys(numsOrObjects).filter(function(key) {\n        return key !== \"pins\";\n      });\n      initObjects = numsOrObjects.pins.map(function(pin) {\n        var obj = {};\n\n        if (Array.isArray(pin)) {\n          obj.pins = pin;\n        } else {\n          obj.pin = pin;\n        }\n\n        return keys.reduce(function(accum, key) {\n          accum[key] = numsOrObjects[key];\n          return accum;\n        }, obj);\n      });\n    }\n  }\n\n  /* istanbul ignore else */\n  if (initObjects.length) {\n    while (initObjects.length) {\n      var numOrObject = initObjects.shift();\n\n      // When a Type exists, respect it!\n      if (typeof Type === \"function\") {\n        if (!(numOrObject instanceof Type || numOrObject instanceof this.constructor)) {\n          numOrObject = new Type(numOrObject);\n        }\n      }\n\n      this.add(numOrObject);\n    }\n  }\n}\n\nif (typeof Symbol !== \"undefined\" && Symbol.iterator) {\n  Collection.prototype[Symbol.iterator] = Array.prototype[Symbol.iterator];\n}\n\nCollection.prototype.add = function() {\n  var length = this.length;\n  var aLen = arguments.length;\n\n  for (var i = 0; i < aLen; i++) {\n    // When a Type exists, respect it!\n    if (this.type) {\n      if (arguments[i] instanceof this.type ||\n          arguments[i] instanceof this.constructor) {\n        this[length++] = arguments[i];\n      }\n    } else {\n      // Otherwise allow user to directly instantiate\n      // Collection or Collection.Emitter to create\n      // a mixed collection\n      this[length++] = arguments[i];\n    }\n  }\n\n  return (this.length = length);\n};\n\nCollection.prototype.each = function(callbackFn) {\n  var length = this.length;\n\n  for (var i = 0; i < length; i++) {\n    callbackFn.call(this[i], this[i], i);\n  }\n\n  return this;\n};\n\nCollection.prototype.forEach = function() {\n  [].forEach.apply(this, arguments);\n};\n\nCollection.prototype.includes = function() {\n  return [].includes.apply(this, arguments);\n};\n\nCollection.prototype.indexOf = function() {\n  return [].indexOf.apply(this, arguments);\n};\n\nCollection.prototype.map = function() {\n  return [].map.apply(this, arguments);\n};\n\nCollection.prototype.slice = function() {\n  return new this.constructor([].slice.apply(this, arguments));\n};\n\nCollection.prototype.byId = function(id) {\n  return [].find.call(this, function(entry) {\n    return entry.id !== undefined && entry.id === id;\n  });\n};\n\n/**\n * Collection.installMethodForwarding\n *\n * Copy single method to collection class\n *\n * @param  {Object} target Target prototype\n * @param  {Object} source Source prototype\n * @return {Object} target Modified Target prototype\n */\nCollection.installMethodForwarding = function(target, source) {\n  return Object.keys(source).reduce(function(accum, method) {\n    // Create Inputs wrappers for each method listed.\n    // This will allow us control over all Input instances\n    // simultaneously.\n    accum[method] = function() {\n      var length = this.length;\n\n      for (var i = 0; i < length; i++) {\n        this[i][method].apply(this[i], arguments);\n      }\n      return this;\n    };\n\n    return accum;\n  }, target);\n};\n\n\n\n/**\n * Collection.Emitter\n *\n * Make Collections for input classes\n *\n * @param {[type]} numsOrObjects\n *\n */\nCollection.Emitter = function(numsOrObjects) {\n\n  // Create private state ahead of super call\n  priv.set(this, {\n    timing: {\n      last: Date.now()\n    }\n  });\n\n  Collection.call(this, numsOrObjects);\n\n  // If the Collection.Emitter was created\n  // with a Shared Properties object, then\n  // we should abide by the freq or period\n  // properties...\n  var interval = null;\n  var period = 5;\n\n  if (!Array.isArray(numsOrObjects) &&\n      (typeof numsOrObjects === \"object\" && numsOrObjects !== null))  {\n\n    period = numsOrObjects.freq || numsOrObjects.period || period;\n\n    // _However_, looking to the future, we\n    // need to start thinking about replacing\n    // the garbage named _freq_ (the value is\n    // actually a period), with real _frequency_\n    // in Hz.\n\n    // If provided, convert frequency to period\n    /* istanbul ignore else */\n    if (numsOrObjects.frequency) {\n      period = (1 / numsOrObjects.frequency) * 1000;\n    }\n  }\n\n  Object.defineProperties(this, {\n    period: {\n      get: function() {\n        return period;\n      },\n      set: function(value) {\n        if (period !== value) {\n          period = value;\n        }\n\n        if (interval) {\n          clearInterval(interval);\n        }\n\n        interval = setInterval(function() {\n          this.emit(\"data\", this);\n        }.bind(this), period);\n      }\n    },\n  });\n\n  this.period = period;\n\n  this.on(\"newListener\", function(event) {\n    if (event === \"change\" || event === \"data\") {\n      return;\n    }\n\n    this.forEach(function(input) {\n      input.on(event, function(data) {\n        this.emit(event, input, data);\n      }.bind(this));\n    }, this);\n  });\n};\n\nutil.inherits(Collection.Emitter, Collection);\n\nObject.assign(Collection.Emitter.prototype, Emitter.prototype);\n\nif (typeof Symbol !== \"undefined\" && Symbol.iterator) {\n  Collection.prototype[Symbol.iterator] = Array.prototype[Symbol.iterator];\n}\n\nCollection.Emitter.prototype.add = function() {\n  var inputs = Array.from(arguments);\n\n  /* istanbul ignore else */\n  if (inputs.length) {\n    Collection.prototype.add.apply(this, inputs);\n\n    inputs.forEach(function(input) {\n      if (input) {\n        input.on(\"change\", function() {\n          this.emit(\"change\", input);\n        }.bind(this));\n      }\n    }, this);\n  }\n  return this.length;\n  // return (this.length = length);\n};\n\n/* istanbul ignore else */\nif (IS_TEST_MODE) {\n  Collection.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = Collection;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/mixins/collection.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/mixins/within.js":
/*!*******************************************************!*\
  !*** ./node_modules/johnny-five/lib/mixins/within.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var mixins = {\n\n  within: function(range, unit, callback) {\n    var upper;\n\n    if (typeof range === \"number\") {\n      upper = range;\n      range = [0, upper];\n    }\n\n    if (!Array.isArray(range)) {\n      throw new Error(\"within expected a range array\");\n    }\n\n    if (typeof unit === \"function\") {\n      callback = unit;\n      unit = \"value\";\n    }\n\n    if (typeof this[unit] === \"undefined\") {\n      return this;\n    }\n\n    // Use the continuous read event for high resolution\n    this.on(\"data\", function() {\n      var value = this[unit];\n      if (value >= range[0] && value <= range[1]) {\n        callback.call(this, null, value);\n      }\n    }.bind(this));\n\n    return this;\n  }\n};\n\nmodule.exports = mixins;\n\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/mixins/within.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/motion.js":
/*!************************************************!*\
  !*** ./node_modules/johnny-five/lib/motion.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var Collection = __webpack_require__(/*! ./mixins/collection */ \"./node_modules/johnny-five/lib/mixins/collection.js\");\nvar Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\");\nvar events = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\nvar priv = new Map();\n\n\nfunction analogInitializer(opts, dataHandler) {\n  var state = priv.get(this);\n\n  this.io.pinMode(opts.pin, this.io.MODES.ANALOG);\n\n  setTimeout(function() {\n    state.isCalibrated = true;\n    this.emit(\"calibrated\");\n  }.bind(this), 10);\n\n  this.io.analogRead(opts.pin, dataHandler);\n}\n\nvar Controllers = {\n  PIR: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n        var calibrationDelay = typeof opts.calibrationDelay !== \"undefined\" ?\n          opts.calibrationDelay : 2000;\n\n        this.io.pinMode(opts.pin, this.io.MODES.INPUT);\n\n        setTimeout(function() {\n          state.isCalibrated = true;\n          this.emit(\"calibrated\");\n        }.bind(this), calibrationDelay);\n\n        this.io.digitalRead(opts.pin, dataHandler);\n      }\n    },\n    toBoolean: {\n      value: function(raw) {\n        return !!raw;\n      }\n    }\n  },\n  GP2Y0D805Z0F: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var address = opts.address || 0x26;\n        var state = priv.get(this);\n\n        opts.address = address;\n\n        // This is meaningless for GP2Y0D805Z0F.\n        // The event is implemented for consistency\n        // with the digital passive infrared sensor\n        setTimeout(function() {\n          state.isCalibrated = true;\n          this.emit(\"calibrated\");\n        }.bind(this), 10);\n\n\n        // Set up I2C data connection\n        this.io.i2cConfig(opts);\n\n        this.io.i2cWriteReg(address, 0x03, 0xFE);\n        this.io.i2cWrite(address, [0x00]);\n        this.io.i2cRead(address, 1, function(data) {\n          dataHandler(data[0] & 0x02);\n        });\n      }\n    },\n    toBoolean: {\n      value: function(raw) {\n        return raw === 0;\n      }\n    }\n  },\n  GP2Y0D810Z0F: {\n    initialize: {\n      value: analogInitializer\n    },\n    toBoolean: {\n      value: function(raw) {\n        return raw >> 9 === 0;\n      }\n    }\n  },\n  GP2Y0A60SZLF: {\n    initialize: {\n      value: analogInitializer\n    },\n    toBoolean: {\n      value: function(raw) {\n        return raw >> 9 === 1;\n      }\n    }\n  }\n};\n\nControllers.GP2Y0D815Z0F = Controllers.GP2Y0D810Z0F;\n\nControllers[\"HC-SR501\"] = Controllers.PIR;\nControllers[\"HCSR501\"] = Controllers.PIR;\nControllers[\"0D805\"] = Controllers.GP2Y0D805Z0F;\nControllers[\"805\"] = Controllers.GP2Y0D805Z0F;\nControllers[\"0D810\"] = Controllers.GP2Y0D810Z0F;\nControllers[\"810\"] = Controllers.GP2Y0D810Z0F;\nControllers[\"0D815\"] = Controllers.GP2Y0D815Z0F;\nControllers[\"815\"] = Controllers.GP2Y0D815Z0F;\nControllers[\"0A60SZLF\"] = Controllers.GP2Y0A60SZLF;\nControllers[\"60SZLF\"] = Controllers.GP2Y0A60SZLF;\n\n/**\n * Motion\n * @constructor\n *\n * five.Motion(7);\n *\n * five.Motion({\n *  controller: \"PIR\",\n *  pin: 7,\n *  freq: 100,\n *  calibrationDelay: 1000\n * });\n *\n *\n * @param {Object} opts [description]\n *\n */\n\nfunction Motion(opts) {\n\n  if (!(this instanceof Motion)) {\n    return new Motion(opts);\n  }\n\n  var freq = opts.freq || 25;\n  var last = false;\n  var controller;\n  var state;\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  if (typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller];\n  } else {\n    controller = opts.controller || Controllers[\"PIR\"];\n  }\n\n  Board.Controller.call(this, controller, opts);\n\n  state = {\n    value: false,\n    isCalibrated: false\n  };\n\n  priv.set(this, state);\n\n  Object.defineProperties(this, {\n    /**\n     * [read-only] Current sensor state\n     * @property detectedMotion\n     * @type Boolean\n     */\n    detectedMotion: {\n      get: function() {\n        return this.toBoolean(state.value);\n      }\n    },\n    /**\n     * [read-only] Sensor calibration status\n     * @property isCalibrated\n     * @type Boolean\n     */\n    isCalibrated: {\n      get: function() {\n        return state.isCalibrated;\n      }\n    },\n  });\n\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts, function(data) {\n      state.value = data;\n    });\n  }\n\n  setInterval(function() {\n    var isChange = false;\n    var eventData = {\n      timestamp: Date.now(),\n      detectedMotion: this.detectedMotion,\n      isCalibrated: state.isCalibrated\n    };\n\n    if (state.isCalibrated && this.detectedMotion && !last) {\n      this.emit(\"motionstart\", eventData);\n    }\n\n    if (state.isCalibrated && !this.detectedMotion && last) {\n      this.emit(\"motionend\", eventData);\n    }\n\n    if (last !== this.detectedMotion) {\n      isChange = true;\n    }\n\n    this.emit(\"data\", eventData);\n\n    if (isChange) {\n      this.emit(\"change\", eventData);\n    }\n\n    last = this.detectedMotion;\n  }.bind(this), freq);\n}\n\nutil.inherits(Motion, events.EventEmitter);\n\n\n\n/**\n * Motion.Collection()\n * new Motion.Collection()\n *\n * Constructs an Array-like instance\n */\n\nMotion.Collection = function(numsOrObjects) {\n  if (!(this instanceof Motion.Collection)) {\n    return new Motion.Collection(numsOrObjects);\n  }\n\n  Object.defineProperty(this, \"type\", {\n    value: Motion\n  });\n\n  Collection.Emitter.call(this, numsOrObjects);\n};\n\nutil.inherits(Motion.Collection, Collection.Emitter);\n\nCollection.installMethodForwarding(\n  Motion.Collection.prototype, Motion.prototype\n);\n\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Motion.Controllers = Controllers;\n  Motion.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = Motion;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/motion.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/motor.js":
/*!***********************************************!*\
  !*** ./node_modules/johnny-five/lib/motor.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\");\nvar Expander = __webpack_require__(/*! ./expander.js */ \"./node_modules/johnny-five/lib/expander.js\");\nvar EVS = __webpack_require__(/*! ./evshield */ \"./node_modules/johnny-five/lib/evshield.js\");\nvar __ = __webpack_require__(/*! ./fn */ \"./node_modules/johnny-five/lib/fn.js\");\nvar events = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\nvar Collection = __webpack_require__(/*! ./mixins/collection */ \"./node_modules/johnny-five/lib/mixins/collection.js\");\nvar Sensor = __webpack_require__(/*! ./sensor */ \"./node_modules/johnny-five/lib/sensor.js\");\nvar ShiftRegister = __webpack_require__(/*! ./shiftregister */ \"./node_modules/johnny-five/lib/shiftregister.js\");\n\nvar priv = new Map();\nvar registers = new Map();\n\nfunction registerKey(registerOpts) {\n  return [\"clock\", \"data\", \"latch\"].reduce(function(accum, key) {\n    return accum + \".\" + registerOpts[key];\n  }, \"\");\n}\n\nfunction latch(state, bit, on) {\n  return on ? state |= (1 << bit) : state &= ~(1 << bit);\n}\n\nfunction updateShiftRegister(motor, dir) {\n  var rKey = registerKey(motor.opts.register),\n    register = registers.get(motor.board)[rKey],\n    latchState = register.value,\n    bits = priv.get(motor).bits,\n    forward = dir !== \"reverse\";\n\n  // There are two ShiftRegister bits which we need to change based on the\n  // direction of the motor.  These will be the pins that control the HBridge\n  // on the board.  They will get flipped high/low based on the current flow\n  // in the HBridge.\n  latchState = latch(latchState, bits.a, forward);\n  latchState = latch(latchState, bits.b, !forward);\n\n  if (register.value !== latchState) {\n    register.send(latchState);\n  }\n}\n\nvar Controllers = {\n  ShiftRegister: {\n    initialize: {\n      value: function(opts) {\n        var rKey = registerKey(opts.register);\n\n        if (!opts.bits || opts.bits.a === undefined || opts.bits.b === undefined) {\n          throw new Error(\"ShiftRegister Motors MUST contain HBRIDGE bits {a, b}\");\n        }\n\n        priv.get(this).bits = opts.bits;\n\n        if (!registers.has(this.board)) {\n          registers.set(this.board, {});\n        }\n\n        if (!registers.get(this.board)[rKey]) {\n          registers.get(this.board)[rKey] = new ShiftRegister({\n            board: this.board,\n            pins: opts.register\n          });\n        }\n\n        this.io.pinMode(this.pins.pwm, this.io.MODES.PWM);\n      }\n    },\n    dir: {\n      value: function(dir) {\n        this.stop();\n\n        updateShiftRegister(this, dir.name);\n\n        this.direction = dir;\n\n        process.nextTick(this.emit.bind(this, dir.name));\n\n        return this;\n      }\n    }\n  },\n  PCA9685: {\n    setPWM: {\n      writable: true,\n      value: function(pin, speed) {\n        var state = priv.get(this);\n        state.expander.analogWrite(pin, speed);\n      }\n    },\n    setPin: {\n      writable: true,\n      value: function(pin, value) {\n        var state = priv.get(this);\n        state.expander.digitalWrite(pin, value);\n      }\n    },\n    initialize: {\n      value: function(opts) {\n\n        var state = priv.get(this);\n\n        this.address = opts.address || 0x40;\n        this.pwmRange = opts.pwmRange || [0, 4080];\n        this.frequency = opts.frequency || 50;\n\n        state.expander = Expander.get({\n          address: this.address,\n          controller: this.controller,\n          bus: this.bus,\n          pwmRange: this.pwmRange,\n          frequency: this.frequency,\n        });\n\n        Object.keys(this.pins).forEach(function(pinName) {\n          this.pins[pinName] = state.expander.normalize(this.pins[pinName]);\n        }, this);\n\n      }\n    }\n  },\n  EVS_EV3: {\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n\n        state.shield = EVS.shieldPort(opts.pin);\n        state.ev3 = new EVS(Object.assign(opts, {\n          io: this.io\n        }));\n\n        this.opts.pins = {\n          pwm: opts.pin,\n          dir: opts.pin,\n        };\n      }\n    },\n    setPWM: {\n      value: function(pin, value) {\n        var state = priv.get(this);\n\n        var register = state.shield.motor === EVS.M1 ? EVS.SPEED_M1 : EVS.SPEED_M2;\n        var speed = __.scale(value, 0, 255, 0, 100) | 0;\n\n        if (value === 0) {\n          state.ev3.write(state.shield, EVS.COMMAND, EVS.Motor_Reset);\n        } else {\n          if (!this.direction.value) {\n            speed = -speed;\n          }\n\n          var data = [\n            // 0-100\n            speed,\n            // Duration (0 is forever)\n            0,\n            // Command B\n            0,\n            // Command A\n            EVS.CONTROL_SPEED | EVS.CONTROL_GO\n          ];\n\n          state.ev3.write(state.shield, register, data);\n        }\n      }\n    },\n    setPin: {\n      value: function(pin, value) {\n        this.setPWM(this.pin, value);\n      }\n    },\n    validatePins: {\n      value: function() {\n        // Check for required pins\n        if (typeof this.opts.pin === \"undefined\") {\n          throw new Error(\"Pin must be defined\");\n        }\n      }\n    }\n  },\n\n  GROVE_I2C_MOTOR_DRIVER: {\n    REGISTER: {\n      value: {\n        ADDRESS: 0x0F,\n      }\n    },\n    COMMANDS: {\n      value: {\n        SET_SPEED: 0x82,\n        SET_PWM_FREQUENCY: 0x84,\n        SET_DIRECTION: 0xAA,\n        NOOP: 0x01,\n      }\n    },\n\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n        var shared = priv.get(\"GROVE_I2C_MOTOR_DRIVER\");\n\n        if (!shared) {\n          shared = {\n            direction: {\n              A: 0x01,\n              B: 0x01,\n            },\n            speed: {\n              A: 0,\n              B: 0,\n            }\n          };\n\n          priv.set(\"GROVE_I2C_MOTOR_DRIVER\", shared);\n        }\n\n        state.shared = shared;\n        state.pin = opts.pin.toUpperCase();\n\n        this.opts.pins = {\n          pwm: opts.pin,\n          dir: opts.pin,\n        };\n\n        this.address = opts.address || this.REGISTER.ADDRESS;\n\n        opts.address = this.address;\n\n        this.io.i2cConfig(opts);\n      }\n    },\n    setPWM: {\n      value: function(pin, value) {\n        var state = priv.get(this);\n        var speed = Board.constrain(value, 0, 255) | 0;\n\n        state.shared.speed[state.pin] = speed;\n\n        this.io.i2cWrite(this.address, [\n          this.COMMANDS.SET_SPEED,\n          state.shared.speed.A,\n          state.shared.speed.B,\n        ]);\n      }\n    },\n    setPin: {\n      value: function(pin, value) {\n        var state = priv.get(this);\n\n        // DIR_CCW = 0x02\n        // DIR_CW  = 0x01\n        state.shared.direction[state.pin] = value ? 0x01 : 0x02;\n\n        var a = state.shared.direction.A & 0x03;\n        var b = state.shared.direction.B & 0x03;\n        var direction = (b << 2) | a;\n\n        this.io.i2cWrite(this.address, [\n          this.COMMANDS.SET_DIRECTION,\n          direction,\n          this.COMMANDS.NOOP,\n        ]);\n      }\n    },\n    validatePins: {\n      value: function() {\n        // Check for required pins\n        if (typeof this.opts.pin === \"undefined\") {\n          throw new Error(\"Pin must be defined\");\n        }\n      }\n    }\n  }\n};\n\n// Aliases\n//\n// NXT motors have the exact same control commands as EV3 motors\nControllers.EVS_NXT = Controllers.EVS_EV3;\n\nvar Devices = {\n  NONDIRECTIONAL: {\n    pins: {\n      get: function() {\n        if (this.opts.pin) {\n          return {\n            pwm: this.opts.pin\n          };\n        } else {\n          return this.opts.pins || {};\n        }\n      }\n    },\n    dir: {\n      writable: true,\n      configurable: true,\n      value: function(speed) {\n        speed = speed || this.speed();\n        return this;\n      }\n    },\n    resume: {\n      value: function() {\n        var speed = this.speed();\n        this.speed({\n          speed: speed\n        });\n        return this;\n      }\n    }\n  },\n  DIRECTIONAL: {\n    pins: {\n      get: function() {\n        if (Array.isArray(this.opts.pins)) {\n          return {\n            pwm: this.opts.pins[0],\n            dir: this.opts.pins[1]\n          };\n        } else {\n          return this.opts.pins;\n        }\n      }\n    },\n    dir: {\n      writable: true,\n      configurable: true,\n      value: function(dir) {\n\n        this.stop();\n\n        this.setPin(this.pins.dir, dir.value);\n        this.direction = dir;\n\n        process.nextTick(this.emit.bind(this, dir.name));\n\n        return this;\n      }\n    }\n  },\n  CDIR: {\n    pins: {\n      get: function() {\n        if (Array.isArray(this.opts.pins)) {\n          return {\n            pwm: this.opts.pins[0],\n            dir: this.opts.pins[1],\n            cdir: this.opts.pins[2]\n          };\n        } else {\n          return this.opts.pins;\n        }\n      }\n    },\n    dir: {\n      value: function(dir) {\n\n        this.stop();\n        this.direction = dir;\n\n        this.setPin(this.pins.cdir, 1 ^ dir.value);\n        this.setPin(this.pins.dir, dir.value);\n\n        process.nextTick(this.emit.bind(this, dir.name));\n\n        return this;\n      }\n    },\n    brake: {\n      value: function(duration) {\n\n        this.speed({\n          speed: 0,\n          saveSpeed: false\n        });\n        this.setPin(this.pins.dir, 1, 127);\n        this.setPin(this.pins.cdir, 1, 128, 127);\n        this.speed({\n          speed: 255,\n          saveSpeed: false,\n          braking: true\n        });\n\n        process.nextTick(this.emit.bind(this, \"brake\"));\n\n        if (duration) {\n          var motor = this;\n          this.board.wait(duration, function() {\n            motor.stop();\n          });\n        }\n\n        return this;\n      }\n    }\n  }\n};\n\n/**\n * Motor\n * @constructor\n *\n * @param {Object} opts Options: pin|pins{pwm, dir[, cdir]}, device, controller, current\n * @param {Number} pin A single pin for basic\n * @param {Array} pins A two or three digit array of pins [pwm, dir]|[pwm, dir, cdir]\n *\n *\n * Initializing \"Hobby Motors\"\n *\n *    new five.Motor(9);\n *\n * ...is the same as...\n *\n *    new five.Motor({\n *      pin: 9\n *    });\n *\n *\n * Initializing 2 pin, Bi-Directional DC Motors:\n *\n *    new five.Motor([ 3, 12 ]);\n *\n * ...is the same as...\n *\n *    new five.Motor({\n *      pins: [ 3, 12 ]\n *    });\n *\n * ...is the same as...\n *\n *    new five.Motor({\n *      pins: {\n *        pwm: 3,\n *        dir: 12\n *      }\n *    });\n *\n *\n * Initializing 3 pin, I2C PCA9685 Motor Controllers:\n * i.e. The Adafruit Motor Shield V2\n *\n *    new five.Motor({\n *      pins: [ 8, 9, 10 ],\n *      controller: \"PCA9685\",\n *      address: 0x60\n *    });\n *\n *\n * Initializing 3 pin, Bi-Directional DC Motors:\n *\n *    new five.Motor([ 3, 12, 11 ]);\n *\n * ...is the same as...\n *\n *    new five.Motor({\n *      pins: [ 3, 12, 11 ]\n *    });\n *\n * ...is the same as...\n *\n *    new five.Motor({\n *      pins: {\n *        pwm: 3,\n *        dir: 12,\n *        cdir: 11\n *      }\n *    });\n *\n *\n * Initializing Bi-Directional DC Motors with brake:\n *\n *    new five.Motor({\n *      pins: {\n *        pwm: 3,\n *        dir: 12,\n *        brake: 11\n *      }\n *    });\n *\n *\n * Initializing Bi-Directional DC Motors with current sensing pins:\n * See Sensor.js for details on options\n *\n *    new five.Motor({\n *      pins: [3, 12],\n *      current: {\n *        pin: \"A0\",\n *        freq: 250,\n *        range: [0, 2000]\n *      }\n *    });\n *\n *\n * Initializing Bi-Directional DC Motors with inverted speed for reverse:\n * Most likely used for non-commercial H-Bridge controllers\n *\n *    new five.Motor({\n *      pins: [3, 12],\n *      invertPWM: true\n *    });\n *\n */\n\nfunction Motor(opts) {\n\n  var device, controller, state;\n\n  if (!(this instanceof Motor)) {\n    return new Motor(opts);\n  }\n\n  Board.Component.call(\n    this, this.opts = Board.Options(opts)\n  );\n\n  controller = opts.controller || null;\n\n  // Derive device based on pins passed\n  if (typeof this.opts.device === \"undefined\") {\n    this.opts.device = \"DIRECTIONAL\";\n  \n    if (typeof this.opts.pins === \"undefined\" && typeof this.opts.register !== \"object\") {\n      this.opts.device = \"NONDIRECTIONAL\";\n    }\n    \n    if (this.opts.pins) {\n      if (Array.isArray(this.opts.pins)) {\n        this.opts.device = [\"NONDIRECTIONAL\", \"DIRECTIONAL\", \"CDIR\"][this.opts.pins.length - 1];\n      } else {\n        if (typeof this.opts.pins.dir === \"undefined\") {\n          this.opts.device = \"NONDIRECTIONAL\";\n        } else {\n          this.opts.device = \"DIRECTIONAL\";\n        }\n        if (typeof this.opts.pins.cdir !== \"undefined\") {\n          this.opts.device = \"CDIR\";\n        }\n      }\n    }\n  }\n  \n  if (typeof controller === \"string\" &&\n    (controller.startsWith(\"EVS\") || controller.startsWith(\"GROVE_I2C\"))) {\n      this.opts.device = \"DIRECTIONAL\";\n  }\n\n  // Allow users to pass in custom device types\n  device = typeof this.opts.device === \"string\" ?\n    Devices[this.opts.device] : this.opts.device;\n\n  this.threshold = typeof this.opts.threshold !== \"undefined\" ?\n    this.opts.threshold : 30;\n\n  this.invertPWM = typeof this.opts.invertPWM !== \"undefined\" ?\n    this.opts.invertPWM : false;\n\n  Object.defineProperties(this, device);\n\n  if (this.opts.register) {\n    this.opts.controller = \"ShiftRegister\";\n  }\n\n  /**\n   * Note: Controller decorates the device. Used for adding\n   * special controllers (i.e. PCA9685)\n   **/\n  if (this.opts.controller) {\n    controller = typeof this.opts.controller === \"string\" ?\n      Controllers[this.opts.controller] : this.opts.controller;\n\n    Board.Controller.call(this, controller, opts);\n  }\n\n  // current just wraps a Sensor\n  if (this.opts.current) {\n    this.opts.current.board = this.board;\n    this.current = new Sensor(this.opts.current);\n  }\n\n  // Create a \"state\" entry for privately\n  // storing the state of the motor\n  state = {\n    isOn: false,\n    currentSpeed: typeof this.opts.speed !== \"undefined\" ?\n      this.opts.speed : 128,\n    braking: false,\n    enabled: false\n  };\n\n  priv.set(this, state);\n\n  Object.defineProperties(this, {\n    // Calculated, read-only motor on/off state\n    // true|false\n    isOn: {\n      get: function() {\n        return state.isOn;\n      }\n    },\n    currentSpeed: {\n      get: function() {\n        return state.currentSpeed;\n      }\n    },\n    braking: {\n      get: function() {\n        return state.braking;\n      }\n    },\n    enabled: {\n      get: function() {\n        return state.enabled;\n      }\n    }\n  });\n\n  // We need to store and initialize the state of the dir pin(s)\n  this.direction = {\n    value: 1\n  };\n\n  if (this.initialize) {\n    this.initialize(opts);\n  }\n\n  this.validatePins();\n  this.enable();\n  this.dir(this.direction);\n}\n\nutil.inherits(Motor, events.EventEmitter);\n\nMotor.prototype.initialize = function() {\n  this.io.pinMode(this.pins.pwm, this.io.MODES.PWM);\n\n  [\"dir\", \"cdir\", \"brake\", \"enable\"].forEach(function(pin) {\n    if (typeof this.pins[pin] !== \"undefined\") {\n      this.io.pinMode(this.pins[pin], this.io.MODES.OUTPUT);\n    }\n  }, this);\n\n};\n\nMotor.prototype.setPin = function(pin, value) {\n  this.io.digitalWrite(pin, value);\n};\n\nMotor.prototype.setPWM = function(pin, value) {\n  this.io.analogWrite(pin, value);\n};\n\nMotor.prototype.speed = function(opts) {\n  var state = priv.get(this);\n\n  if (typeof opts === \"undefined\") {\n    return state.currentSpeed;\n  } else {\n\n    if (typeof opts === \"number\") {\n      opts = {\n        speed: opts\n      };\n    }\n\n    opts.speed = Board.constrain(opts.speed, 0, 255);\n\n    opts.saveSpeed = typeof opts.saveSpeed !== \"undefined\" ?\n      opts.saveSpeed : true;\n\n    if (opts.speed < this.threshold) {\n      opts.speed = 0;\n    }\n\n    state.isOn = opts.speed === 0 ? false : true;\n\n    if (opts.saveSpeed) {\n      state.currentSpeed = opts.speed;\n    }\n\n    if (opts.braking) {\n      state.braking = true;\n    }\n\n    if (this.invertPWM && this.direction.value === 1) {\n      opts.speed ^= 0xff;\n    }\n\n    this.setPWM(this.pins.pwm, opts.speed);\n\n    return this;\n  }\n\n};\n\n// start a motor - essentially just switch it on like a normal motor\nMotor.prototype.start = function(speed) {\n  // Send a signal to turn on the motor and run at given speed in whatever\n  // direction is currently set.\n  if (this.pins.brake && this.braking) {\n    this.setPin(this.pins.brake, 0);\n  }\n\n  // get current speed if nothing provided.\n  speed = typeof speed !== \"undefined\" ?\n    speed : this.speed();\n\n  this.speed({\n    speed: speed,\n    braking: false\n  });\n\n  // \"start\" event is fired when the motor is started\n  if (speed > 0) {\n    process.nextTick(this.emit.bind(this, \"start\"));\n  }\n\n  return this;\n};\n\nMotor.prototype.stop = function() {\n  this.speed({\n    speed: 0,\n    saveSpeed: false\n  });\n  process.nextTick(this.emit.bind(this, \"stop\"));\n\n  return this;\n};\n\nMotor.prototype.brake = function(duration) {\n  if (typeof this.pins.brake === \"undefined\") {\n    if (this.board.io.name !== \"Mock\") {\n      console.log(\"Non-braking motor type\");\n    }\n    this.stop();\n  } else {\n    this.setPin(this.pins.brake, 1);\n    this.setPin(this.pins.dir, 1);\n    this.speed({\n      speed: 255,\n      saveSpeed: false,\n      braking: true\n    });\n    process.nextTick(this.emit.bind(this, \"brake\"));\n\n    if (duration) {\n      var motor = this;\n      this.board.wait(duration, function() {\n        motor.resume();\n      });\n    }\n  }\n\n  return this;\n};\n\nMotor.prototype.release = function() {\n  this.resume();\n  process.nextTick(this.emit.bind(this, \"release\"));\n\n  return this;\n};\n\nMotor.prototype.resume = function() {\n  var speed = this.speed();\n  this.dir(this.direction);\n  this.start(speed);\n\n  return this;\n};\n\nMotor.prototype.enable = function() {\n  var state = priv.get(this);\n  if (typeof this.pins.enable !== \"undefined\" && !state.enabled) {\n    this.setPin(this.pins.enable, 1);\n    state.enabled = true;\n  }\n};\n\nMotor.prototype.disable = function() {\n  var state = priv.get(this);\n  if (typeof this.pins.enable !== \"undefined\" && state.enabled) {\n    this.setPin(this.pins.enable, 0);\n    state.enabled = false;\n  }\n};\n\n// Check for required pins\nMotor.prototype.validatePins = function() {\n  \n  if (typeof this.pins.pwm === \"undefined\") {\n    throw new Error(\"PWM pin must be defined\");\n  }\n  \n  if (typeof this.pins.dir === \"undefined\" && this.opts.device !== \"NONDIRECTIONAL\") {\n    throw new Error(\"DIR pin must be defined\");\n  }\n  \n  if (this.opts.device === \"CDIR\" && typeof this.pins.cdir === \"undefined\") {\n    throw new Error(\"CDIR pin must be defined for three wire motors\");\n  }\n};\n\n[\n  /**\n   * forward Turn the Motor in its forward direction\n   * fwd Turn the Motor in its forward direction\n   *\n   * @param  {Number} 0-255, 0 is stopped, 255 is fastest\n   * @return {Object} this\n   */\n  {\n    name: \"forward\",\n    abbr: \"fwd\",\n    value: 1\n  },\n  /**\n   * reverse Turn the Motor in its reverse direction\n   * rev Turn the Motor in its reverse direction\n   *\n   * @param  {Number} 0-255, 0 is stopped, 255 is fastest\n   * @return {Object} this\n   */\n  {\n    name: \"reverse\",\n    abbr: \"rev\",\n    value: 0\n  }\n].forEach(function(dir) {\n  var method = function(speed) {\n    this.dir(dir);\n    this.start(speed);\n    return this;\n  };\n\n  Motor.prototype[dir.name] = Motor.prototype[dir.abbr] = method;\n});\n\nMotor.SHIELD_CONFIGS = {\n  ADAFRUIT_V1: {\n    M1: {\n      pins: {\n        pwm: 11\n      },\n      register: {\n        data: 8,\n        clock: 4,\n        latch: 12\n      },\n      bits: {\n        a: 2,\n        b: 3\n      }\n    },\n    M2: {\n      pins: {\n        pwm: 3\n      },\n      register: {\n        data: 8,\n        clock: 4,\n        latch: 12\n      },\n      bits: {\n        a: 1,\n        b: 4\n      }\n    },\n    M3: {\n      pins: {\n        pwm: 6\n      },\n      register: {\n        data: 8,\n        clock: 4,\n        latch: 12\n      },\n      bits: {\n        a: 5,\n        b: 7\n      }\n    },\n    M4: {\n      pins: {\n        pwm: 5\n      },\n      register: {\n        data: 8,\n        clock: 4,\n        latch: 12\n      },\n      bits: {\n        a: 0,\n        b: 6\n      }\n    }\n  },\n  ADAFRUIT_V2: {\n    M1: {\n      pins: {\n        pwm: 8,\n        dir: 9,\n        cdir: 10\n      },\n      address: 0x60,\n      controller: \"PCA9685\"\n    },\n    M2: {\n      pins: {\n        pwm: 13,\n        dir: 12,\n        cdir: 11\n      },\n      address: 0x60,\n      controller: \"PCA9685\"\n    },\n    M3: {\n      pins: {\n        pwm: 2,\n        dir: 3,\n        cdir: 4\n      },\n      address: 0x60,\n      controller: \"PCA9685\"\n    },\n    M4: {\n      pins: {\n        pwm: 7,\n        dir: 6,\n        cdir: 5\n      },\n      address: 0x60,\n      controller: \"PCA9685\"\n    }\n  },\n  SEEED_STUDIO: {\n    A: {\n      pins: {\n        pwm: 9,\n        dir: 8,\n        cdir: 11\n      }\n    },\n    B: {\n      pins: {\n        pwm: 10,\n        dir: 12,\n        cdir: 13\n      }\n    }\n  },\n  FREETRONICS_HBRIDGE: {\n    A: {\n      pins: {\n        pwm: 6,\n        dir: 4,\n        cdir: 7\n      }\n    },\n    B: {\n      pins: {\n        pwm: 5,\n        dir: 3,\n        cdir: 2\n      }\n    }\n  },\n  ARDUINO_MOTOR_SHIELD_R3_1: {\n    A: {\n      pins: {\n        pwm: 3,\n        dir: 12\n      }\n    },\n    B: {\n      pins: {\n        pwm: 11,\n        dir: 13\n      }\n    }\n  },\n  ARDUINO_MOTOR_SHIELD_R3_2: {\n    A: {\n      pins: {\n        pwm: 3,\n        dir: 12,\n        brake: 9\n      }\n    },\n    B: {\n      pins: {\n        pwm: 11,\n        dir: 13,\n        brake: 8\n      }\n    }\n  },\n  ARDUINO_MOTOR_SHIELD_R3_3: {\n    A: {\n      pins: {\n        pwm: 3,\n        dir: 12,\n        brake: 9,\n        current: \"A0\"\n      }\n    },\n    B: {\n      pins: {\n        pwm: 11,\n        dir: 13,\n        brake: 8,\n        current: \"A1\"\n      }\n    }\n  },\n  DF_ROBOT: {\n    A: {\n      pins: {\n        pwm: 6,\n        dir: 7\n      }\n    },\n    B: {\n      pins: {\n        pwm: 5,\n        dir: 4\n      }\n    }\n  },\n  NKC_ELECTRONICS_KIT: {\n    A: {\n      pins: {\n        pwm: 9,\n        dir: 12\n      }\n    },\n    B: {\n      pins: {\n        pwm: 10,\n        dir: 13\n      }\n    }\n  },\n  RUGGED_CIRCUITS: {\n    A: {\n      pins: {\n        pwm: 3,\n        dir: 12\n      }\n    },\n    B: {\n      pins: {\n        pwm: 11,\n        dir: 13\n      }\n    }\n  },\n  SPARKFUN_ARDUMOTO: {\n    A: {\n      pins: {\n        pwm: 3,\n        dir: 12\n      }\n    },\n    B: {\n      pins: {\n        pwm: 11,\n        dir: 13\n      }\n    }\n  },\n  POLOLU_DRV8835_SHIELD: {\n    M1: {\n      pins: {\n        pwm: 9,\n        dir: 7\n      }\n    },\n    M2: {\n      pins: {\n        pwm: 10,\n        dir: 8\n      }\n    }\n  },\n  POLOLU_VNH5019_SHIELD: {\n    M1: {\n      pins: {\n        pwm: 9,\n        dir: 2,\n        cdir: 4,\n        enable: 6\n      }\n    },\n    M2: {\n      pins: {\n        pwm: 10,\n        dir: 7,\n        cdir: 8,\n        enable: 12\n      }\n    }\n  },\n  MICRO_MAGICIAN_V2: {\n    A: {\n      pins: {\n        pwm: 6,\n        dir: 8\n      },\n      invertPWM: true\n    },\n    B: {\n      pins: {\n        pwm: 5,\n        dir: 7\n      },\n      invertPWM: true\n    }\n  },\n  SPARKFUN_LUDUS: {\n    A: {\n      pins: {\n        pwm: 3,\n        dir: 4,\n        cdir: 5\n      }\n    },\n    B: {\n      pins: {\n        pwm: 6,\n        dir: 7,\n        cdir: 8\n      }\n    }\n  },\n  SPARKFUN_DUAL_HBRIDGE_EDISON_BLOCK: {\n    A: {\n      pins: {\n        pwm: 20,\n        dir: 33,\n        cdir: 46,\n        enable: 47\n      }\n    },\n    B: {\n      pins: {\n        pwm: 14,\n        dir: 48,\n        cdir: 36,\n        enable: 47\n      }\n    }\n  },\n\n};\n\n\n/**\n * Motors()\n * new Motors()\n */\nfunction Motors(numsOrObjects) {\n  if (!(this instanceof Motors)) {\n    return new Motors(numsOrObjects);\n  }\n\n  Object.defineProperty(this, \"type\", {\n    value: Motor\n  });\n\n  Collection.call(this, numsOrObjects);\n}\n\nutil.inherits(Motors, Collection);\n\n\n/*\n * Motors, forward(speed)/fwd(speed)\n *\n * eg. array.forward(speed);\n\n * Motors, reverse(speed)/rev(speed)\n *\n * eg. array.reverse(speed);\n\n * Motors, start(speed)\n *\n * eg. array.start(speed);\n\n * Motors, stop()\n *\n * eg. array.stop();\n\n * Motors, brake()\n *\n * eg. array.brake();\n\n * Motors, release()\n *\n * eg. array.release();\n */\n\nCollection.installMethodForwarding(\n  Motors.prototype, Motor.prototype\n);\n\n\n// Assign Motors Collection class as static \"method\" of Motor.\n// TODO: Eliminate .Array for 1.0.0\nMotor.Array = Motors;\nMotor.Collection = Motors;\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Motor.Controllers = Controllers;\n  Motor.purge = function() {\n    priv.clear();\n    registers.clear();\n  };\n}\n\nmodule.exports = Motor;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/motor.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/orientation.js":
/*!*****************************************************!*\
  !*** ./node_modules/johnny-five/lib/orientation.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var Emitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\n\nvar Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\");\n\nvar priv = new Map();\n\nvar Controllers = {\n\n  BNO055: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var IMU = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\"),\n          driver = IMU.Drivers.get(this.board, \"BNO055\", opts);\n\n        driver.on(\"data\", function(data) {\n          dataHandler(data);\n        });\n      }\n    },\n    toScaledEuler: {\n      value: function(raw) {\n\n        return {\n          heading: raw.euler.heading / 16,\n          roll: raw.euler.roll / 16,\n          pitch: raw.euler.pitch / 16,\n        };\n      }\n    },\n    toScaledQuarternion: {\n      value: function(raw) {\n        return {\n          w: raw.quarternion.w * (1 / (1 << 14)),\n          x: raw.quarternion.x * (1 / (1 << 14)),\n          y: raw.quarternion.y * (1 / (1 << 14)),\n          z: raw.quarternion.z * (1 / (1 << 14)),\n        };\n      }\n    },\n    calibration: {\n      get: function() {\n        return priv.get(this).calibration;\n      }\n    },\n    isCalibrated: {\n      get: function() {\n        //only returns true if the calibration of the NDOF/Fusion algo is calibrated\n        return ((this.calibration >> 6) & 0x03) === 0x03; //are we fully calibrated\n      }\n    }\n  },\n};\n\n\n/**\n * Orientation\n * @constructor\n *\n * five.Orientation();\n *\n * five.Orientation({\n *  controller: \"BNO055\",\n *  freq: 50,\n * });\n *\n *\n * Device Shorthands:\n *\n * \"BNO055\": new five.Orientation()\n *\n *\n * @param {Object} opts [description]\n *\n */\n\nfunction Orientation(opts) {\n  /* istanbul ignore if */\n  if (!(this instanceof Orientation)) {\n    return new Orientation(opts);\n  }\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  var freq = opts.freq || 25;\n  var controller = null;\n  var raw = null;\n  var state = {\n    euler: {\n      heading: 0,\n      roll: 0,\n      pitch: 0,\n    },\n    quarternion: {\n      w: 0,\n      x: 0,\n      y: 0,\n      z: 0,\n    },\n    calibration: 0,\n  };\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller === null || typeof controller !== \"object\") {\n    throw new Error(\"Missing valid Orientation controller\");\n  }\n\n  Board.Controller.call(this, controller, opts);\n\n  /* istanbul ignore else */\n  if (!this.toScaledQuarternion) {\n    this.toScaledQuarternion = opts.toScaledQuarternion || function(raw) {\n      return raw;\n    };\n  }\n\n  /* istanbul ignore else */\n  if (!this.toScaledEuler) {\n    this.toScaledEuler = opts.toScaledEuler || function(raw) {\n      return raw;\n    };\n  }\n\n  priv.set(this, state);\n\n  /* istanbul ignore else */\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts, function(data) {\n      raw = data;\n    });\n  }\n\n  setInterval(function() {\n    if (raw === null) {\n      return;\n    }\n    var didOrientationChange = false;\n    var didCalibrationChange = false;\n\n    [\"heading\", \"roll\", \"pitch\"].forEach(function(el) {\n      /* istanbul ignore else */\n      if (state.euler[el] !== raw.orientation.euler[el]) {\n        didOrientationChange = true;\n      }\n      state.euler[el] = raw.orientation.euler[el];\n    });\n\n    [\"w\", \"x\", \"y\", \"z\"].forEach(function(el) {\n      /* istanbul ignore else */\n      if (state.quarternion[el] !== raw.orientation.quarternion[el]) {\n        didOrientationChange = true;\n      }\n      state.quarternion[el] = raw.orientation.quarternion[el];\n    });\n\n    //if we have a raw calibration state...\n    // not sure if this is the best place... some devices may not have a calibration state...\n    if (raw.calibration) {\n      /* istanbul ignore else */\n      if (state.calibration !== raw.calibration) {\n        didCalibrationChange = true;\n      }\n      state.calibration = raw.calibration;\n    }\n\n    var data = {\n      euler: this.euler,\n      quarternion: this.quarternion,\n      calibration: this.calibration\n    };\n\n    this.emit(\"data\", data);\n\n    if (didOrientationChange) {\n      this.emit(\"change\", data);\n    }\n\n    //not sure how we can get this event into other drivers\n    if (didCalibrationChange) {\n      this.emit(\"calibration\", this.calibration);\n    }\n  }.bind(this), freq);\n}\n\n\nutil.inherits(Orientation, Emitter);\n\nObject.defineProperties(Orientation.prototype, {\n  euler: {\n    get: function() {\n      var state = priv.get(this);\n      return this.toScaledEuler(state);\n    }\n  },\n  quarternion: {\n    get: function() {\n      var state = priv.get(this);\n      return this.toScaledQuarternion(state);\n    }\n  }\n});\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Orientation.Controllers = Controllers;\n  Orientation.purge = function() {\n    priv.clear();\n  };\n}\n\n\nmodule.exports = Orientation;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/orientation.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/piezo.js":
/*!***********************************************!*\
  !*** ./node_modules/johnny-five/lib/piezo.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\");\nvar Timer = __webpack_require__(/*! nanotimer */ \"./node_modules/nanotimer/lib/nanoTimer.js\");\n\nvar MICROSECONDS_PER_SECOND = 1000000;\nvar priv = new Map();\nvar defaultOctave = 4;\n\nfunction clearTimer() {\n  if (!this.timer) {\n    return;\n  }\n\n  this.timer.clearInterval();\n  delete this.timer;\n}\n\nvar Controllers = {\n  /**\n   * Timer-based tone generator using digital high/low piezo.\n   */\n  DEFAULT: {\n    initialize: {\n      writable: true,\n      value: function() {\n        this.io.pinMode(this.pin, this.io.MODES.OUTPUT);\n      },\n    },\n    tone: {\n      writable: true,\n      value: function(tone, duration) {\n        if (isNaN(tone) || isNaN(duration)) {\n          // Very Bad Things happen if one tries to play a NaN tone\n          throw new Error(\n            \"Piezo.tone: invalid tone or duration\"\n          );\n        }\n\n        clearTimer.call(this);\n\n        var timer = this.timer = new Timer();\n        var value = 1;\n\n        timer.setInterval(function() {\n          value = value === 1 ? 0 : 1;\n          this.io.digitalWrite(this.pin, value);\n\n          if ((timer.difTime / 1000000) > duration) {\n            clearTimer.call(this);\n          }\n        }.bind(this), null, tone + \"u\", function() {});\n\n        return this;\n      },\n    },\n    noTone: {\n      writable: true,\n      value: function() {\n        this.io.digitalWrite(this.pin, 0);\n        clearTimer.call(this);\n\n        return this;\n      },\n    },\n  },\n\n  I2C_BACKPACK: {\n    ADDRESSES: {\n      value: [0x0A]\n    },\n    REGISTER: {\n      value: {\n        NO_TONE: 0x00,\n        TONE: 0x01,\n      },\n    },\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n        var address = opts.address || this.ADDRESSES[0];\n\n        state.address = opts.address = address;\n\n        this.io.i2cConfig(opts);\n      }\n    },\n    tone: {\n      value: function(tone, duration) {\n        var state = priv.get(this);\n\n        if (isNaN(tone) || isNaN(duration)) {\n          throw new Error(\n            \"Piezo.tone: invalid tone or duration\"\n          );\n        }\n\n        var data = [\n          this.REGISTER.TONE,\n          this.pin,\n          (tone >> 8) & 0xff,\n          tone & 0xff,\n          (duration >> 24) & 0xff,\n          (duration >> 16) & 0xff,\n          (duration >> 8) & 0xff,\n          duration & 0xff,\n        ];\n\n        this.io.i2cWrite(state.address, data);\n\n        return this;\n      },\n    },\n    noTone: {\n      value: function() {\n        var state = priv.get(this);\n\n        var data = [\n          this.REGISTER.NO_TONE,\n          this.pin,\n        ];\n\n        this.io.i2cWrite(state.address, data);\n\n        return this;\n      },\n    },\n  },\n};\n\nfunction Piezo(opts) {\n\n  if (!(this instanceof Piezo)) {\n    return new Piezo(opts);\n  }\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  var controller = null;\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    controller = Controllers.DEFAULT;\n  }\n\n  Object.defineProperties(this, controller);\n\n  Board.Controller.call(this, controller, opts);\n\n  // Piezo instance properties\n  var state = {\n    isPlaying: false,\n    timeout: null,\n    address: null,\n  };\n\n  priv.set(this, state);\n\n  Object.defineProperties(this, {\n    isPlaying: {\n      get: function() {\n        return state.isPlaying;\n      }\n    }\n  });\n\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts);\n  }\n}\n\n// These notes are rounded up at .5 otherwise down.\nPiezo.Notes = {\n  \"c0\": 16,\n  \"c#0\": 17,\n  \"d0\": 18,\n  \"d#0\": 19,\n  \"e0\": 21,\n  \"f0\": 22,\n  \"f#0\": 23,\n  \"g0\": 25,\n  \"g#0\": 26,\n  \"a0\": 28,\n  \"a#0\": 29,\n  \"b0\": 31,\n  \"c1\": 33,\n  \"c#1\": 35,\n  \"d1\": 37,\n  \"d#1\": 39,\n  \"e1\": 41,\n  \"f1\": 44,\n  \"f#1\": 47,\n  \"g1\": 49,\n  \"g#1\": 52,\n  \"a1\": 55,\n  \"a#1\": 58,\n  \"b1\": 62,\n  \"c2\": 65,\n  \"c#2\": 69,\n  \"d2\": 73,\n  \"d#2\": 78,\n  \"e2\": 82,\n  \"f2\": 87,\n  \"f#2\": 93,\n  \"g2\": 98,\n  \"g#2\": 104,\n  \"a2\": 110,\n  \"a#2\": 117,\n  \"b2\": 124,\n  \"c3\": 131,\n  \"c#3\": 139,\n  \"d3\": 147,\n  \"d#3\": 156,\n  \"e3\": 165,\n  \"f3\": 175,\n  \"f#3\": 185,\n  \"g3\": 196,\n  \"g#3\": 208,\n  \"a3\": 220,\n  \"a#3\": 233,\n  \"b3\": 247,\n  \"c4\": 262,\n  \"c#4\": 277,\n  \"d4\": 294,\n  \"d#4\": 311,\n  \"e4\": 330,\n  \"f4\": 349,\n  \"f#4\": 370,\n  \"g4\": 392,\n  \"g#4\": 415,\n  \"a4\": 440,\n  \"a#4\": 466,\n  \"b4\": 494,\n  \"c5\": 523,\n  \"c#5\": 554,\n  \"d5\": 587,\n  \"d#5\": 622,\n  \"e5\": 659,\n  \"f5\": 698,\n  \"f#5\": 740,\n  \"g5\": 784,\n  \"g#5\": 831,\n  \"a5\": 880,\n  \"a#5\": 932,\n  \"b5\": 988,\n  \"c6\": 1047,\n  \"c#6\": 1109,\n  \"d6\": 1175,\n  \"d#6\": 1245,\n  \"e6\": 1319,\n  \"f6\": 1397,\n  \"f#6\": 1480,\n  \"g6\": 1568,\n  \"g#6\": 1661,\n  \"a6\": 1760,\n  \"a#6\": 1865,\n  \"b6\": 1976,\n  \"c7\": 2093,\n  \"c#7\": 2217,\n  \"d7\": 2349,\n  \"d#7\": 2489,\n  \"e7\": 2637,\n  \"f7\": 2794,\n  \"f#7\": 2960,\n  \"g7\": 3136,\n  \"g#7\": 3322,\n  \"a7\": 3520,\n  \"a#7\": 3729,\n  \"b7\": 3951,\n  \"c8\": 4186,\n  \"c#8\": 4435,\n  \"d8\": 4699,\n  \"d#8\": 4978,\n  \"e8\": 5274,\n  \"f8\": 5588,\n  \"f#8\": 5920,\n  \"g8\": 6272,\n  \"g#8\": 6645,\n  \"a8\": 7040,\n  \"a#8\": 7459,\n  \"b8\": 7902,\n};\n\nPiezo.Frequencies = Object.keys(Piezo.Notes).reduce(function(accum, note) {\n  accum[Piezo.Notes[note]] = note;\n  return accum;\n}, {});\n\nPiezo.Parsers = {};\n/**\n * Get the tone from the current note. note\n * could be an int, string, array or null.\n * If int or null, leave alone. Otherwise,\n * derive what the tone should be.\n * @return int | null\n */\nPiezo.Parsers.hzFromInput = function(input) {\n  var output = input;\n\n  if (Array.isArray(input)) {\n    output = input[0];\n  }\n\n  // Is it a valid frequency?\n  if (typeof output === \"number\" &&\n      Piezo.Frequencies[output]) {\n    return output;\n  }\n\n  // See above: Piezo.Notes { ... }\n  if (typeof output === \"string\") {\n    output = output.toLowerCase().trim();\n\n    // Example: c#, c\n    if (output.endsWith(\"#\") || output.length === 1) {\n      output += defaultOctave;\n    }\n\n    // There will never be a 0 tone\n    output = Piezo.Notes[output] || null;\n  }\n\n  // Normalize NaN, null & undefined to null\n  if (isNaN(output)) {\n    output = null;\n  }\n\n  return output;\n};\n\n/**\n * Obtain the beat/duration count from the current\n * note. This is either an int or undefined. Default\n * to 1.\n * @return int (default 1)\n */\nPiezo.Parsers.beatFromNote = function(note) {\n  var beat = 1;\n  if (Array.isArray(note) && note[1] !== undefined) {\n    // If extant, beat will be second element of note\n    beat = note[1];\n  }\n  return beat;\n};\n\n/**\n * Validate the octave provided to ensure the value is\n * supported and won't crash the board.\n * @return bool\n */\nPiezo.isValidOctave = function(octave) {\n  return typeof octave === \"number\" && (octave >= 0 && octave <= 8);\n};\n\n/**\n * Set or get a default octave for all notes\n * @return number\n */\nPiezo.defaultOctave = function(octave) {\n  if (Piezo.isValidOctave(octave)) {\n    defaultOctave = octave;\n  }\n\n  return defaultOctave;\n};\n\nPiezo.ToFrequency = function(tone) {\n  var toneSeconds = tone / MICROSECONDS_PER_SECOND;\n  var period = toneSeconds * 2;\n  return Math.round(1 / period);\n};\n\nPiezo.ToTone = function(frequency) {\n  var period = 1 / frequency;\n  var duty = period / 2;\n  return Math.round(duty * MICROSECONDS_PER_SECOND);\n};\n\nPiezo.ToSong = function(stringSong, beats) {\n  beats = beats || 1;\n  var notes = stringSong.split(\" \");\n  var song = [];\n  var note, lastNote;\n  while (notes.length) {\n    note = notes.shift();\n    if (/^[0-9]+$/.test(note)) {\n      note = parseInt(note, 10);\n    }\n    lastNote = song[song.length - 1];\n    if (lastNote && lastNote[0] === note) {\n      lastNote[1] += beats;\n    } else {\n      song.push([note, beats]);\n    }\n  }\n  return song;\n};\n\n/**\n * Play a note for a duration.\n * @param {string} note - see Piezo.Notes.  Case-insensitive.\n *   If a note name without an octave number is given (e.g. \"C#\" instead of\n *   \"C#4\") then the configured default octave will be used.\n *   @see Piezo.prototype.defaultOctave\n * @param {number} duration - in milliseconds.\n */\nPiezo.prototype.note = function(note, duration) {\n  return this.frequency(Piezo.Parsers.hzFromInput(note), duration);\n};\n\n/**\n * Play a tone for a duration.\n * This is a lower-level method than frequency (which does\n * the translation from frequency to tone for you). Most of\n * the time you likely want to use frequency.\n * @param {number} tone - Given as a computed duty-cycle,\n *   in microseconds. Larger values produce lower tones.\n *   See https://en.wikipedia.org/wiki/Duty_cycle\n * @param {number} duration - in milliseconds.\n */\nPiezo.prototype.tone = function(tone, duration) {\n  return this.frequency(Piezo.ToFrequency(tone), duration);\n};\n\n/**\n * Play a frequency for a duration.\n * @param {number} frequency - in Hz\n * @param {number} duration - in milliseconds\n */\nPiezo.prototype.frequency = function(frequency, duration) {\n  return this.tone(Piezo.ToTone(frequency), duration);\n};\n\n\nPiezo.prototype.play = function(tune, callback) {\n  if (typeof tune !== \"object\") {\n    tune = {\n      song: tune\n    };\n  }\n\n  if (typeof tune.song === \"string\") {\n    tune.song = Piezo.ToSong(tune.song, tune.beats);\n  }\n\n  if (tune.song && !Array.isArray(tune.song)) {\n    /*\n      If `tune.song` was present and not falsy,\n      but also is not a string (above), or an array\n      (presently), then it is likely a Hz value, so\n      normalize song to the appropriate array format:\n     */\n    tune.song = [tune.song];\n    /*\n      Note: This path is taken for calls that look\n      like this:\n\n      piezo.play({\n        song: 262,\n      }, ...)\n\n      Where 262 is a frequency in Hz\n     */\n  }\n\n  var state = priv.get(this);\n  var tempo = tune.tempo || 250;\n  // Length for a single beat in ms\n  var beatDuration = Math.round(60000 / tempo);\n  var song = tune.song || [];\n  var duration;\n  var nextNoteIndex = 0;\n\n  var next = function() {\n    if (nextNoteIndex === song.length) {\n      // No more notes in song:\n      // Song is over\n      state.isPlaying = false;\n      if (typeof callback === \"function\") {\n        callback(tune);\n      }\n      return;\n    }\n\n    var note = song[nextNoteIndex];\n    var hz = Piezo.Parsers.hzFromInput(note);\n    var beat = Piezo.Parsers.beatFromNote(note);\n\n    duration = beat * beatDuration;\n    nextNoteIndex++;\n\n    if (hz === null) {\n      this.noTone();\n    } else {\n      this.frequency(hz, duration);\n    }\n\n    state.timeout = setTimeout(next, duration);\n  }.bind(this);\n\n  // We are playing a song\n  state.isPlaying = true;\n\n  next();\n\n  return this;\n};\n\nPiezo.prototype.off = function() {\n  return this.noTone();\n};\n\nPiezo.prototype.stop = function() {\n  var state = priv.get(this);\n\n  /* istanbul ignore else */\n  if (state.timeout) {\n    clearTimeout(state.timeout);\n    state.timeout = null;\n  }\n\n  return this;\n};\n\n\nmodule.exports = Piezo;\n\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/piezo.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/pin.js":
/*!*********************************************!*\
  !*** ./node_modules/johnny-five/lib/pin.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\");\nvar Emitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\nvar Collection = __webpack_require__(/*! ./mixins/collection */ \"./node_modules/johnny-five/lib/mixins/collection.js\");\n\nvar priv = new Map();\nvar modes = {\n  INPUT: 0x00,\n  OUTPUT: 0x01,\n  ANALOG: 0x02,\n  PWM: 0x03,\n  SERVO: 0x04\n};\n\n/**\n * Pin\n * @constructor\n *\n * @description Direct Pin access objects\n *\n * @param {Object} opts Options: pin, freq, range\n */\n\nfunction Pin(opts) {\n  if (!(this instanceof Pin)) {\n    return new Pin(opts);\n  }\n  if (opts === undefined || (typeof opts === \"object\" &&\n      opts.addr === undefined && opts.pin === undefined)) {\n    throw new Error(\"Pins must have a pin number\");\n  }\n\n  var pinValue = typeof opts === \"object\" ? (opts.addr || opts.pin || 0) : opts;\n  var isAnalogInput = Pin.isAnalog(opts);\n  var isDTOA = false;\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  opts.addr = opts.addr || opts.pin;\n\n  if (this.io.analogPins.includes(pinValue)) {\n    isAnalogInput = false;\n    isDTOA = true;\n  }\n\n  var isPin = typeof opts !== \"object\";\n  var addr = isDTOA ? pinValue : (isPin ? opts : opts.addr);\n  var type = opts.type || (isAnalogInput ? \"analog\" : \"digital\");\n\n  // Create a private side table\n  var state = {\n    mode: null,\n    last: null,\n    value: 0\n  };\n\n  priv.set(this, state);\n\n  // Create read-only \"addr(address)\" property\n  Object.defineProperties(this, {\n    type: {\n      get: function() {\n        return type;\n      }\n    },\n    addr: {\n      get: function() {\n        return addr;\n      }\n    },\n    value: {\n      get: function() {\n        return state.value;\n      }\n    },\n    mode: {\n      set: function(mode) {\n        var state = priv.get(this);\n        state.mode = mode;\n        this.io.pinMode(this.addr, mode);\n      },\n      get: function() {\n        return priv.get(this).mode;\n      }\n    }\n  });\n\n  this.mode = typeof opts.as !== \"undefined\" ? opts.as :\n    (typeof opts.mode !== \"undefined\" ? opts.mode : (isAnalogInput ? 0x02 : 0x01));\n\n  this.freq = typeof opts.freq !== \"undefined\" ? opts.freq : 20;\n\n  if (this.mode === 0 || this.mode === 2) {\n    read(this);\n  }\n\n  if (type === \"digital\") {\n    Object.defineProperties(this, {\n      isHigh: {\n        get: function() {\n          return !!state.value;\n        }\n      },\n      isLow: {\n        get: function() {\n          return !state.value;\n        }\n      },\n    });\n  }\n}\n\n\nfunction read(pin) {\n  var state = priv.get(pin);\n\n  pin.io[pin.type + \"Read\"](pin.addr, function(data) {\n    state.value = data;\n  });\n\n  setInterval(function() {\n    var isNot, emit;\n\n    isNot = state.value ? \"low\" : \"high\";\n    emit = state.value ? \"high\" : \"low\";\n\n    if (state.mode === modes.INPUT) {\n      if (state.last === null) {\n        state.last = isNot;\n      }\n      if (state.last === isNot) {\n        state.last = emit;\n        pin.emit(emit, state.value);\n        pin.emit(\"change\", state.value);\n      }\n    }\n    pin.emit(\"data\", state.value);\n  }, pin.freq);\n}\n\nutil.inherits(Pin, Emitter);\n\n/**\n * Pin.@@MODE\n *\n * Read-only constants\n * Pin.INPUT   = 0x00\n * Pin.OUTPUT  = 0x01\n * Pin.ANALOG  = 0x02\n * Pin.PWM     = 0x03\n * Pin.SERVO   = 0x04\n *\n */\nObject.keys(modes).forEach(function(mode) {\n  Object.defineProperty(Pin, mode, {\n    value: modes[mode]\n  });\n});\n\n\nPin.isAnalog = function(opts) {\n  if (typeof opts === \"string\" && Pin.isPrefixed(opts, [\"I\", \"A\"])) {\n    return true;\n  }\n\n  if (typeof opts === \"object\") {\n    return Pin.isAnalog(\n      typeof opts.addr !== \"undefined\" ? opts.addr : opts.pin\n    );\n  }\n};\n\nPin.isPrefixed = function(value, prefixes) {\n  value = value[0];\n\n  return prefixes.reduce(function(resolution, prefix) {\n    if (!resolution) {\n      return prefix === value;\n    }\n    return resolution;\n  }, false);\n};\n\nPin.write = function(pin, val) {\n  var state = priv.get(pin);\n\n  state.value = val;\n\n  // Set the correct mode (OUTPUT)\n  // This will only set if it needs to be set, otherwise a no-op\n  pin.mode = modes.OUTPUT;\n\n  // Create the correct type of write command\n  pin.io[pin.type + \"Write\"](pin.addr, val);\n\n  pin.emit(\"write\", null, val);\n};\n\nPin.read = function(pin, callback) {\n  // Set the correct mode (INPUT)\n  // This will only set if it needs to be set, otherwise a no-op\n\n  var isChanging = false;\n\n  if (pin.type === \"digital\" && pin.mode !== 0) {\n    isChanging = true;\n    pin.mode = modes.INPUT;\n  }\n\n  if (pin.type === \"analog\" && pin.mode !== 2) {\n    isChanging = true;\n    pin.mode = modes.ANALOG;\n  }\n\n  if (isChanging) {\n    read(pin);\n  }\n\n  pin.on(\"data\", function() {\n    callback.call(pin, null, pin.value);\n  });\n};\n\n\n// Pin.prototype.isDigital = function() {\n//   return this.addr > 1;\n// };\n\n// Pin.prototype.isAnalog = function() {\n//   return this.board > 1;\n// };\n\n// Pin.prototype.isPWM = function() {\n// };\n\n// Pin.prototype.isServo = function() {\n// };\n\n// Pin.prototype.isI2C = function() {\n// };\n\n// Pin.prototype.isSerial = function() {\n// };\n\n// Pin.prototype.isInterrupt = function() {\n// };\n\n// Pin.prototype.isVersion = function() {\n// };\n\n\nPin.prototype.query = function(callback) {\n  var index = this.addr;\n\n  if (this.type === \"analog\") {\n    index = this.io.analogPins[this.addr];\n  }\n\n  function handler() {\n    callback(this.io.pins[index]);\n  }\n\n  this.io.queryPinState(index, handler.bind(this));\n\n  return this;\n};\n\n/**\n * high  Write high/1 to the pin\n * @return {Pin}\n */\n\nPin.prototype.high = function() {\n  var value = this.type === \"analog\" ? 255 : 1;\n  Pin.write(this, value);\n  this.emit(\"high\");\n  return this;\n};\n\n/**\n * low  Write low/0 to the pin\n * @return {Pin}\n */\n\nPin.prototype.low = function() {\n  Pin.write(this, 0);\n  this.emit(\"low\");\n  return this;\n};\n\n/**\n * read  Read from the pin, value is passed to callback continuation\n * @return {Pin}\n */\n\n/**\n * write  Write to a pin\n * @return {Pin}\n */\n[\"read\", \"write\"].forEach(function(operation) {\n  Pin.prototype[operation] = function(valOrCallback) {\n    Pin[operation](this, valOrCallback);\n    return this;\n  };\n});\n\n\n/**\n * Pins()\n * new Pins()\n *\n * Constructs an Array-like instance of all servos\n */\nfunction Pins(numsOrObjects) {\n  if (!(this instanceof Pins)) {\n    return new Pins(numsOrObjects);\n  }\n\n  Object.defineProperty(this, \"type\", {\n    value: Pin\n  });\n\n  Collection.call(this, numsOrObjects);\n}\n\nutil.inherits(Pins, Collection);\n\n[\n  \"high\", \"low\", \"write\"\n].forEach(function(method) {\n  Pins.prototype[method] = function() {\n    var length = this.length;\n\n    for (var i = 0; i < length; i++) {\n      this[i][method].apply(this[i], arguments);\n    }\n    return this;\n  };\n});\n\n\n// Assign Pins Collection class as static \"method\" of Pin.\n// TODO: Eliminate .Array for 1.0.0\nPin.Array = Pins;\nPin.Collection = Pins;\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Pin.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = Pin;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/pin.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/ping.js":
/*!**********************************************!*\
  !*** ./node_modules/johnny-five/lib/ping.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Emitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\n\nvar Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\");\nvar Fn = __webpack_require__(/*! ./fn */ \"./node_modules/johnny-five/lib/fn.js\");\nvar within = __webpack_require__(/*! ./mixins/within */ \"./node_modules/johnny-five/lib/mixins/within.js\");\n\nvar toFixed = Fn.toFixed;\n\nvar priv = new Map();\n\n/**\n * Ping\n * @param {Object} opts Options: pin\n */\n\nfunction Ping(opts) {\n\n  if (!(this instanceof Ping)) {\n    return new Ping(opts);\n  }\n\n  var last = null;\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  this.pin = opts && opts.pin || 7;\n  this.freq = opts.freq || 20;\n  // this.pulse = opts.pulse || 250;\n\n  var state = {\n    value: null\n  };\n\n  // Private settings object\n  var settings = {\n    pin: this.pin,\n    value: this.io.HIGH,\n    pulseOut: 5\n  };\n\n  this.io.setMaxListeners(100);\n\n  // Interval for polling pulse duration as reported in microseconds\n  setInterval(function() {\n    this.io.pingRead(settings, function(microseconds) {\n      state.value = microseconds;\n    });\n  }.bind(this), 225);\n\n  // Interval for throttled event\n  setInterval(function() {\n    if (state.value === null) {\n      return;\n    }\n\n    // The \"read\" event has been deprecated in\n    // favor of a \"data\" event.\n    this.emit(\"data\", state.value);\n\n    // If the state.value for this interval is not the same as the\n    // state.value in the last interval, fire a \"change\" event.\n    if (state.value !== last) {\n      this.emit(\"change\", state.value);\n    }\n\n    // Store state.value for comparison in next interval\n    last = state.value;\n\n    // Reset samples;\n    // samples.length = 0;\n  }.bind(this), this.freq);\n\n  Object.defineProperties(this, {\n    value: {\n      get: function() {\n        return state.value;\n      }\n    },\n    // Based on the round trip travel time in microseconds,\n    // Calculate the distance in inches and centimeters\n    inches: {\n      get: function() {\n        return toFixed(state.value / 74 / 2, 2);\n      }\n    },\n    in: {\n      get: function() {\n        return this.inches;\n      }\n    },\n    cm: {\n      get: function() {\n        return toFixed(state.value / 29 / 2, 3);\n      }\n    }\n  });\n\n  priv.set(this, state);\n}\n\nutil.inherits(Ping, Emitter);\n\nObject.assign(Ping.prototype, within);\n\nmodule.exports = Ping;\n\n\n//http://itp.nyu.edu/physcomp/Labs/Servo\n//http://arduinobasics.blogspot.com/2011/05/arduino-uno-flex-sensor-and-leds.html\n//http://protolab.pbworks.com/w/page/19403657/TutorialPings\n\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/ping.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/proximity.js":
/*!***************************************************!*\
  !*** ./node_modules/johnny-five/lib/proximity.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\");\nvar Collection = __webpack_require__(/*! ./mixins/collection */ \"./node_modules/johnny-five/lib/mixins/collection.js\");\nvar EVS = __webpack_require__(/*! ./evshield */ \"./node_modules/johnny-five/lib/evshield.js\");\nvar Fn = __webpack_require__(/*! ./fn */ \"./node_modules/johnny-five/lib/fn.js\");\nvar within = __webpack_require__(/*! ./mixins/within */ \"./node_modules/johnny-five/lib/mixins/within.js\");\nvar Emitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\nvar Pins = Board.Pins;\n\nvar toFixed = Fn.toFixed;\n\nvar priv = new Map();\n\nfunction analogHandler(opts, dataHandler) {\n  this.io.pinMode(this.pin, this.io.MODES.ANALOG);\n  this.io.analogRead(this.pin, function(data) {\n    dataHandler.call(this, data);\n  }.bind(this));\n}\n\nvar Controllers = {\n  GP2Y0A21YK: {\n    // https://www.sparkfun.com/products/242\n    initialize: {\n      value: analogHandler\n    },\n    toCm: {\n      value: function(raw) {\n        return toFixed(12343.85 * Math.pow(raw, -1.15), 2);\n      }\n    }\n  },\n  GP2D120XJ00F: {\n    // https://www.sparkfun.com/products/8959\n    initialize: {\n      value: analogHandler\n    },\n    toCm: {\n      value: function(raw) {\n        return toFixed((2914 / (raw + 5)) - 1, 2);\n      }\n    }\n  },\n  GP2Y0A02YK0F: {\n    // https://www.sparkfun.com/products/8958\n    // 15cm - 150cm\n    initialize: {\n      value: analogHandler\n    },\n    toCm: {\n      value: function(raw) {\n        return toFixed(10650.08 * Math.pow(raw, -0.935) - 10, 2);\n      }\n    }\n  },\n  GP2Y0A41SK0F: {\n    // https://www.sparkfun.com/products/12728\n    // 4cm - 30cm\n    initialize: {\n      value: analogHandler\n    },\n    toCm: {\n      value: function(raw) {\n        return toFixed(2076 / (raw - 11), 2);\n      }\n    }\n  },\n  GP2Y0A710K0F: {\n    // https://www.adafruit.com/products/1568\n    // 100cm - 500cm\n    initialize: {\n      value: analogHandler\n    },\n    toCm: {\n      value: function(raw) {\n        return toFixed(3.8631e8 * Math.pow(raw, -2.463343), 0);\n      }\n    }\n  },\n  SRF10: {\n    initialize: {\n      value: function(opts, dataHandler) {\n\n        var address = opts.address || 0x70;\n        var msUntilNextRead = 65;\n\n        opts.address = address;\n\n        // Set up I2C data connection\n        this.io.i2cConfig(opts);\n\n        // Startup parameter\n        this.io.i2cWrite(address, [0x01, 16]);\n        this.io.i2cWrite(address, [0x02, 255]);\n\n        function read() {\n          this.io.i2cWrite(address, [0x02]);\n          this.io.i2cReadOnce(address, 2, function(data) {\n            dataHandler((data[0] << 8) | data[1]);\n          }.bind(this));\n\n          prime.call(this);\n        }\n\n        function prime() {\n          // 0x51 result in cm (centimeters)\n          this.io.i2cWrite(address, [0x00, 0x51]);\n\n          setTimeout(read.bind(this), msUntilNextRead);\n        }\n\n        prime.call(this);\n      }\n    },\n    toCm: {\n      value: function(raw) {\n        return raw;\n      }\n    }\n  },\n  // LV-MaxSonar-EZ\n  // LV-MaxSonar-EZ0\n  // LV-MaxSonar-EZ1\n  MB1000: {\n    initialize: {\n      value: analogHandler\n    },\n    toCm: {\n      value: function(raw) {\n        // From http://www.maxbotix.com/articles/032.htm\n        // ADC -> inches -> cm\n        //\n        //\n        // From intro in page 1\n        // 'The LV-MaxSonar-EZ detects objects\n        // from 0-inches to 254-inches (6.45-meters) and provides sonar range information from 6-\n        // inches out to 254-inches with 1-inch resolution.'\n        // 1inch = 2.54cm\n        return toFixed((raw / 2) * 2.54, 2);\n      }\n    }\n  },\n  // HRLV-MaxSonar-EZ0\n  MB1003: {\n    initialize: {\n      value: analogHandler\n    },\n    toCm: {\n      value: function(raw) {\n        // http://www.maxbotix.com/articles/032.htm\n        //\n        //\n        // From intro in page 1\n        // 'This sensor line features 1-mm resolution, .....'\n        return toFixed(raw / 2, 1);\n      }\n    }\n  },\n  // XL-MaxSonar-EZ3\n  MB1230: {\n    initialize: {\n      value: analogHandler\n    },\n    toCm: {\n      value: function(raw) {\n        // From http://www.maxbotix.com/articles/016.htm\n        // Using a Standard Range XL-MaxSonar with an ADC (Analog Digital Converter)\n        // When using a standard XL-MaxSonar with an ADC, verify that the sensor\n        // and micro-controller are referencing the same power supply and ground.\n        // This also assumes that the ADC being used is perfectly accurate.\n        // When reading the sensor's output with the scaling in centimeters with a\n        // 10-bit ADC, the range can be read directly off the ADC.\n        // If the ADC output reads 700 the range in centimeters is 700 centimeters.\n        //\n        // ADC -> cm\n        //\n        //\n        // From intro on page 1\n        // 'The MB1200 and MB1300 sensor series detects objects from 0-cm1\n        //  to 765-cm (25.1 feet) or 1068cm (35 feet) (select models) and\n        // provide sonar range information from 20-cm2\n        //  out to765-cm or 1068-cm (select models) with 1-cm resolution...'\n        return raw >> 0;\n      }\n    }\n  },\n  HCSR04: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var pinValue = opts.pinValue;\n        var msToNextRead = 65;\n\n        if (Pins.isFirmata(this)) {\n          if (typeof pinValue === \"string\" && pinValue[0] === \"A\") {\n            pinValue = this.io.analogPins[+pinValue.slice(1)];\n          }\n\n          pinValue = +pinValue;\n\n          if (this.io.analogPins.includes(pinValue)) {\n            opts.pin = pinValue;\n          }\n\n          this.pin = opts.pin;\n        }\n\n        // Private settings object\n        var settings = {\n          pin: opts.pin,\n          value: this.io.HIGH,\n          pulseOut: 5,\n        };\n\n        var read = function() {\n          this.io.pingRead(settings, function(microseconds) {\n            dataHandler(microseconds);\n            setTimeout(read, msToNextRead);\n          });\n        }.bind(this);\n\n        read();\n      }\n    },\n    toCm: {\n      value: function(raw) {\n        // https://www.sparkfun.com/products/13959\n        //\n        //\n        // From `Product features` paragraph at page 1\n        // 'Ultrasonic ranging module HC - SR04 provides 2cm - 400cm non-contact\n        // measurement function, the ranging accuracy can reach to 3mm'\n        return toFixed(raw / 29.1 / 2, 1);\n      }\n    }\n  },\n  HCSR04I2CBACKPACK: {\n    initialize: {\n      value: function(opts, datahandler) {\n        var address = opts.address || 0x27;\n        var msToNextRead = 90;\n\n        opts.address = address;\n\n        // set up IO connection:\n        this.io.i2cConfig(opts);\n\n        if (typeof opts.pin === \"undefined\") {\n          this.pin = 8;\n        }\n\n        var read = function() {\n          // Read the 2 data bytes from the \"register\" for the pin.\n          // When firmware is complete, update to:\n          // this.io.i2cReadOnce(address, this.pin, 2, function(data) {\n          this.io.i2cReadOnce(address, 2, function(data) {\n            datahandler((data[0] << 8) + data[1]);\n            setTimeout(read, msToNextRead);\n          });\n        }.bind(this);\n\n        read();\n      }\n    },\n    toCm: {\n      value: function(raw) {\n        return toFixed(raw / 29.1 / 2, 1);\n      }\n    }\n  },\n  LIDARLITE: {\n    REGISTER: {\n      value: {\n        ENABLE: 0x00,\n        READ: 0x8F,\n      }\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var address = 0x62;\n\n        opts.address = address;\n\n        this.io.i2cConfig(opts);\n\n        var read = function() {\n          this.io.i2cWrite(address, this.REGISTER.ENABLE, 0x04);\n          setTimeout(function() {\n            this.io.i2cReadOnce(address, this.REGISTER.READ, 2, function(bytes) {\n              // Step 5 of Quick Start Guide\n              dataHandler((bytes[0] << 8) + bytes[1]);\n              read();\n            });\n          }.bind(this), 20);\n        }.bind(this);\n\n        read();\n      }\n    },\n    toCm: {\n      value: function(raw) {\n\n        //\n        // From `Technology` paragraph at page 11\n        // 'Our patented, high\"accuracy\"\n        // measurement\"technique\"enables\"distance\"measurement\"accuracy down\"to 1cm..'\n        return raw >> 0;\n      }\n    }\n  },\n  EVS_EV3_IR: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n\n        state.shield = EVS.shieldPort(opts.pin);\n\n        state.ev3 = new EVS(Object.assign(opts, {\n          io: this.io\n        }));\n        state.ev3.setup(state.shield, EVS.Type_EV3);\n        state.ev3.read(state.shield, EVS.Proximity, EVS.Proximity_Bytes, function(data) {\n          var value = data[0] | (data[1] << 8);\n\n          dataHandler(value);\n        });\n      }\n    },\n    toCm: {\n      value: function(raw) {\n        return raw;\n      }\n    }\n  },\n  EVS_EV3_US: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n\n        state.shield = EVS.shieldPort(opts.pin);\n\n        state.ev3 = new EVS(Object.assign(opts, {\n          io: this.io\n        }));\n        state.ev3.setup(state.shield, EVS.Type_EV3);\n        state.ev3.read(state.shield, EVS.Proximity, EVS.Proximity_Bytes, function(data) {\n          var value = data[0] | (data[1] << 8);\n          dataHandler(value);\n        });\n      }\n    },\n    toCm: {\n      value: function(raw) {\n        return raw / 10;\n      }\n    }\n  },\n};\n\n// Sensor aliases\n// IR\nControllers[\"2Y0A21\"] = Controllers.GP2Y0A21YK;\nControllers[\"2D120X\"] = Controllers.GP2D120XJ00F;\nControllers[\"2Y0A02\"] = Controllers.GP2Y0A02YK0F;\nControllers[\"0A41\"] = Controllers.GP2Y0A41SK0F;\nControllers[\"0A21\"] = Controllers.GP2Y0A21YK;\nControllers[\"0A02\"] = Controllers.GP2Y0A02YK0F;\nControllers[\"41SK0F\"] = Controllers.GP2Y0A41SK0F;\nControllers[\"21YK\"] = Controllers.GP2Y0A21YK;\nControllers[\"2YK0F\"] = Controllers.GP2Y0A02YK0F;\n\n// Sonar\nControllers.MB1010 = Controllers.MB1000;\n\nControllers[\"LV-MaxSonar-EZ\"] = Controllers.MB1000;\nControllers[\"LV-MaxSonar-EZ0\"] = Controllers.MB1000;\nControllers[\"LV-MaxSonar-EZ1\"] = Controllers.MB1010;\nControllers[\"HRLV-MaxSonar-EZ0\"] = Controllers.MB1003;\nControllers[\"XL-MaxSonar-EZ3\"] = Controllers.MB1230;\n\n// Ping\n[\n  \"HC-SR04\",\n  \"SR04\",\n  \"SRF05\",\n  \"SRF06\",\n  \"PARALLAXPING\",\n  \"SEEEDPING\",\n  \"GROVEPING\",\n  \"PING_PULSE_IN\",\n  \"ULTRASONIC_PING\",\n].forEach(function(alias) {\n  Controllers[alias] = Controllers.HCSR04;\n});\n\n// Ping/HCSR04 I2C Backpack\n[\n  \"HCSR04-I2C-BACKPACK\",\n  \"HC-SR04-I2C-BACKPACK\",\n  \"SR04-I2C-BACKPACK\",\n  \"SR04I2CBACKPACK\",\n  \"PINGI2CBACKPACK\",\n  \"PING-I2C-BACKPACK\",\n  \"HCSR04_I2C_BACKPACK\",\n  \"HC_SR04_I2C_BACKPACK\",\n  \"SR04_I2C_BACKPACK\",\n  \"SR04I2CBACKPACK\",\n  \"PINGI2CBACKPACK\",\n  \"PING_I2C_BACKPACK\",\n].forEach(function(alias) {\n  Controllers[alias] = Controllers.HCSR04I2CBACKPACK;\n});\n\n\n// LIDAR Lite\nControllers[\"LIDAR-Lite\"] = Controllers.LIDARLITE;\n\n\n/**\n * Proximity\n * @constructor\n *\n * five.Proximity(\"A0\");\n *\n * five.Proximity({\n *  controller: \"GP2Y0A41SK0F\",\n *  pin: \"A0\",\n *  freq: 100\n * });\n *\n *\n * @param {Object} opts [description]\n *\n */\n\nfunction Proximity(opts) {\n\n  if (!(this instanceof Proximity)) {\n    return new Proximity(opts);\n  }\n\n  var controller = null;\n  var state = {};\n  var raw = 0;\n  var freq = opts.freq || 25;\n  var last = 0;\n  var pinValue = typeof opts === \"object\" ? opts.pin : opts;\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  if (typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller];\n  } else {\n    controller = opts.controller || Controllers[\"GP2Y0A21YK\"];\n  }\n\n  Board.Controller.call(this, controller, opts);\n\n  if (!this.toCm) {\n    this.toCm = opts.toCm || function(x) {\n      return x;\n    };\n  }\n\n  priv.set(this, state);\n\n  Object.defineProperties(this, {\n    /**\n     * [read-only] Calculated centimeter value\n     * @property centimeters\n     * @type Number\n     */\n    centimeters: {\n      get: function() {\n        return this.toCm(raw);\n      }\n    },\n    cm: {\n      get: function() {\n        return this.centimeters;\n      }\n    },\n    /**\n     * [read-only] Calculated inch value\n     * @property inches\n     * @type Number\n     */\n    inches: {\n      get: function() {\n        return toFixed(this.centimeters * 0.39, 2);\n      }\n    },\n    in: {\n      get: function() {\n        return this.inches;\n      }\n    },\n  });\n\n  if (typeof this.initialize === \"function\") {\n    opts.pinValue = pinValue;\n    this.initialize(opts, function(data) {\n      raw = data;\n    });\n  }\n\n  setInterval(function() {\n    if (raw === undefined) {\n      return;\n    }\n\n    var data = {\n      cm: this.cm,\n      centimeters: this.centimeters,\n      in: this.in,\n      inches: this.inches\n    };\n\n    this.emit(\"data\", data);\n\n    if (raw !== last) {\n      last = raw;\n      this.emit(\"change\", data);\n    }\n  }.bind(this), freq);\n}\n\nProximity.Controllers = [\n  \"2Y0A21\", \"GP2Y0A21YK\",\n  \"2D120X\", \"GP2D120XJ00F\",\n  \"2Y0A02\", \"GP2Y0A02YK0F\",\n  \"OA41SK\", \"GP2Y0A41SK0F\",\n  \"0A21\", \"GP2Y0A21YK\",\n  \"0A02\", \"GP2Y0A02YK0F\",\n];\n\nutil.inherits(Proximity, Emitter);\n\nObject.assign(Proximity.prototype, within);\n\n\n/**\n * new Proximity.Collection();\n */\n\nProximity.Collection = function(numsOrObjects) {\n  if (!(this instanceof Proximity.Collection)) {\n    return new Proximity.Collection(numsOrObjects);\n  }\n\n  Object.defineProperty(this, \"type\", {\n    value: Proximity\n  });\n\n  Collection.Emitter.call(this, numsOrObjects);\n};\n\nutil.inherits(Proximity.Collection, Collection.Emitter);\n\nCollection.installMethodForwarding(\n  Proximity.Collection.prototype, Proximity.prototype\n);\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Proximity.Controllers = Controllers;\n  Proximity.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = Proximity;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/proximity.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/reflectancearray.js":
/*!**********************************************************!*\
  !*** ./node_modules/johnny-five/lib/reflectancearray.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\"),\n  events = __webpack_require__(/*! events */ \"./node_modules/events/events.js\"),\n  util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\"),\n  __ = __webpack_require__(/*! ./fn */ \"./node_modules/johnny-five/lib/fn.js\"),\n  Led = __webpack_require__(/*! ./led */ \"./node_modules/johnny-five/lib/led/index.js\"),\n  Sensor = __webpack_require__(/*! ./sensor */ \"./node_modules/johnny-five/lib/sensor.js\");\n\nvar CALIBRATED_MIN_VALUE = 0;\nvar CALIBRATED_MAX_VALUE = 1000;\nvar LINE_ON_THRESHOLD = 200;\nvar LINE_NOISE_THRESHOLD = 50;\n\nvar priv = new Map();\n\n// Private methods\nfunction initialize() {\n  var self = this,\n    state = priv.get(this);\n\n  if (typeof this.opts.emitter === \"undefined\") {\n    throw new Error(\"Emitter pin is required\");\n  }\n\n  if (!this.pins || this.pins.length === 0) {\n    throw new Error(\"Pins must be defined\");\n  }\n\n  state.emitter = new Led({\n    board: this.board,\n    pin: this.opts.emitter\n  });\n\n  state.sensorStates = this.pins.map(function(pin) {\n    var sensorState = {\n      sensor: new Sensor({\n        board: this.board,\n        freq: this.freq,\n        pin: pin\n      }),\n      rawValue: 0,\n      dataReceived: false\n    };\n\n\n    sensorState.sensor.on(\"data\", function() {\n      onData.call(self, sensorState, this.value);\n    });\n\n    return sensorState;\n  }, this);\n}\n\nfunction onData(sensorState, value) {\n  var allRead, state = priv.get(this);\n\n  sensorState.dataReceived = true;\n  sensorState.rawValue = value;\n\n  allRead = state.sensorStates.every(function(sensorState) {\n    return sensorState.dataReceived;\n  });\n\n  if (allRead) {\n    this.emit(\"data\", this.raw);\n\n    if (state.autoCalibrate) {\n      setCalibration(state.calibration, this.raw);\n    }\n\n    if (this.isCalibrated) {\n      this.emit(\"calibratedData\", this.values);\n      this.emit(\"line\", this.line);\n    }\n\n    state.sensorStates.forEach(function(sensorState) {\n      sensorState.dataReceived = false;\n    });\n  }\n}\n\nfunction setCalibration(calibration, values) {\n  values.forEach(function(value, i) {\n    if (calibration.min[i] === undefined || value < calibration.min[i]) {\n      calibration.min[i] = value;\n    }\n\n    if (calibration.max[i] === undefined || value > calibration.max[i]) {\n      calibration.max[i] = value;\n    }\n  });\n}\n\nfunction calibrationIsValid(calibration, sensors) {\n  return calibration &&\n    (calibration.max && calibration.max.length === sensors.length) &&\n    (calibration.min && calibration.min.length === sensors.length);\n}\n\n\nfunction calibratedValues() {\n  return this.raw.map(function(value, i) {\n    var max = this.calibration.max[i],\n      min = this.calibration.min[i];\n\n    var scaled = __.scale(value, min, max, CALIBRATED_MIN_VALUE, CALIBRATED_MAX_VALUE);\n    return __.constrain(scaled, CALIBRATED_MIN_VALUE, CALIBRATED_MAX_VALUE);\n  }, this);\n}\n\nfunction maxLineValue() {\n  return (this.sensors.length - 1) * CALIBRATED_MAX_VALUE;\n}\n\n// Returns a value between 0 and (n-1)*1000\n// Given 5 sensors, the value will be between 0 and 4000\nfunction getLine(whiteLine) {\n  var onLine = false;\n  var avg = 0,\n    sum = 0;\n  var state = priv.get(this);\n\n  whiteLine = !!whiteLine;\n\n  this.values.forEach(function(value, i) {\n    value = whiteLine ? (CALIBRATED_MAX_VALUE - value) : value;\n\n    if (value > LINE_ON_THRESHOLD) {\n      onLine = true;\n    }\n\n    if (value > LINE_NOISE_THRESHOLD) {\n      avg += value * i * CALIBRATED_MAX_VALUE;\n      sum += value;\n    }\n  });\n\n  if (!onLine) {\n    var maxPoint = maxLineValue.call(this) + 1;\n    var centerPoint = maxPoint / 2;\n\n    return state.lastLine < centerPoint ? 0 : maxPoint;\n  }\n\n  return state.lastLine = Math.floor(avg / sum);\n}\n\n// Constructor\nfunction ReflectanceArray(opts) {\n\n  if (!(this instanceof ReflectanceArray)) {\n    return new ReflectanceArray(opts);\n  }\n\n  this.opts = Board.Options(opts);\n\n  Board.Component.call(\n    this, this.opts, {\n      requestPin: false\n    }\n  );\n\n  // Read event throttling\n  this.freq = opts.freq || 25;\n\n  // Make private data entry\n  var state = {\n    lastLine: 0,\n    isOn: false,\n    calibration: {\n      min: [],\n      max: []\n    },\n    autoCalibrate: opts.autoCalibrate || false\n  };\n\n  priv.set(this, state);\n\n  initialize.call(this);\n\n  Object.defineProperties(this, {\n    isOn: {\n      get: function() {\n        return state.emitter.isOn;\n      }\n    },\n    isCalibrated: {\n      get: function() {\n        return calibrationIsValid(this.calibration, this.sensors);\n      }\n    },\n    isOnLine: {\n      get: function() {\n        var line = this.line;\n        return line > CALIBRATED_MIN_VALUE && line < maxLineValue.call(this);\n      }\n    },\n    sensors: {\n      get: function() {\n        return state.sensorStates.map(function(sensorState) {\n          return sensorState.sensor;\n        });\n      }\n    },\n    calibration: {\n      get: function() {\n        return state.calibration;\n      }\n    },\n    raw: {\n      get: function() {\n        return state.sensorStates.map(function(sensorState) {\n          return sensorState.rawValue;\n        });\n      }\n    },\n    values: {\n      get: function() {\n        return this.isCalibrated ? calibratedValues.call(this) : this.raw;\n      }\n    },\n    line: {\n      get: function() {\n        return this.isCalibrated ? getLine.call(this) : 0;\n      }\n    }\n  });\n}\n\nutil.inherits(ReflectanceArray, events.EventEmitter);\n\n// Public methods\nReflectanceArray.prototype.enable = function() {\n  var state = priv.get(this);\n\n  state.emitter.on();\n\n  return this;\n};\n\nReflectanceArray.prototype.disable = function() {\n  var state = priv.get(this);\n\n  state.emitter.off();\n\n  return this;\n};\n\n// Calibrate will store the min/max values for this sensor array\n// It should be called many times in order to get a lot of readings\n// on light and dark areas.  See calibrateUntil for a convenience\n// for looping until a condition is met.\nReflectanceArray.prototype.calibrate = function() {\n  var state = priv.get(this);\n\n  this.once(\"data\", function(values) {\n    setCalibration(state.calibration, values);\n\n    this.emit(\"calibrated\");\n  });\n\n  return this;\n};\n\n// This will continue to calibrate until the predicate is true.\n// Allows the user to calibrate n-times, or wait for user input,\n// or base it on calibration heuristics.  However the user wants.\nReflectanceArray.prototype.calibrateUntil = function(predicate) {\n  var loop = function() {\n    this.calibrate();\n    this.once(\"calibrated\", function() {\n      if (!predicate()) {\n        loop();\n      }\n    });\n  }.bind(this);\n\n  loop();\n\n  return this;\n};\n\n// Let the user tell us what the calibration data is\n// This allows the user to save calibration data and\n// reload it without needing to calibrate every time.\nReflectanceArray.prototype.loadCalibration = function(calibration) {\n  var state = priv.get(this);\n\n  if (!calibrationIsValid(calibration, this.sensors)) {\n    throw new Error(\"Calibration data not properly set: {min: [], max: []}\");\n  }\n\n  state.calibration = calibration;\n\n  return this;\n};\n\nmodule.exports = ReflectanceArray;\n\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/reflectancearray.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/relay.js":
/*!***********************************************!*\
  !*** ./node_modules/johnny-five/lib/relay.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\");\nvar Collection = __webpack_require__(/*! ./mixins/collection */ \"./node_modules/johnny-five/lib/mixins/collection.js\");\nvar Pins = Board.Pins;\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\nvar priv = new Map();\n\nfunction Relay(opts) {\n\n  if (!(this instanceof Relay)) {\n    return new Relay(opts);\n  }\n\n  var pinValue = typeof opts === \"object\" ? opts.pin : opts;\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  opts.type = opts.type || \"NO\";\n\n  var state = {\n    isInverted: opts.type === \"NC\",\n    isOn: false,\n    value: null,\n  };\n\n  priv.set(this, state);\n\n  Object.defineProperties(this, {\n    value: {\n      get: function() {\n        return Number(this.isOn);\n      }\n    },\n    type: {\n      get: function() {\n        return state.isInverted ? \"NC\" : \"NO\";\n      }\n    },\n    isOn: {\n      get: function() {\n        return state.isOn;\n      }\n    }\n  });\n\n  if (Pins.isFirmata(this) &&\n      (typeof pinValue === \"string\" && pinValue[0] === \"A\")) {\n    this.pin = this.io.analogPins[+pinValue.slice(1)];\n    this.io.pinMode(this.pin, this.io.MODES.OUTPUT);\n  }\n}\n\n/**\n * on Turn the relay on\n * @return {Relay}\n */\nRelay.prototype.on = function() {\n  var state = priv.get(this);\n\n  this.io.digitalWrite(\n    this.pin, state.isInverted ? this.io.LOW : this.io.HIGH\n  );\n  state.isOn = true;\n\n  return this;\n};\n\nRelay.prototype.close = Relay.prototype.on;\n\n/**\n * off Turn the relay off\n * @return {Relay}\n */\nRelay.prototype.off = function() {\n  var state = priv.get(this);\n\n  this.io.digitalWrite(\n    this.pin, state.isInverted ? this.io.HIGH : this.io.LOW\n  );\n  state.isOn = false;\n\n  return this;\n};\n\nRelay.prototype.open = Relay.prototype.off;\n\n/**\n * toggle Toggle the on/off state of the relay\n * @return {Relay}\n */\nRelay.prototype.toggle = function() {\n  var state = priv.get(this);\n\n  if (state.isOn) {\n    this.off();\n  } else {\n    this.on();\n  }\n\n  return this;\n};\n\n/**\n * Relays()\n * new Relays()\n *\n * Constructs an Array-like instance of all relays\n */\nfunction Relays(numsOrObjects) {\n  if (!(this instanceof Relays)) {\n    return new Relays(numsOrObjects);\n  }\n\n  Object.defineProperty(this, \"type\", {\n    value: Relay\n  });\n\n  Collection.call(this, numsOrObjects);\n}\n\nutil.inherits(Relays, Collection);\n\n/*\n * Relays, on()\n *\n * Turn all relays on\n *\n * eg. collection.on();\n *\n *\n * Relays, off()\n *\n * Turn all relays off\n *\n * eg. collection.off();\n *\n *\n * Relays, open()\n *\n * Open all relays\n *\n * eg. collection.open();\n *\n *\n * Relays, close()\n *\n * Close all relays\n *\n * eg. collection.close();\n *\n *\n * Relays, toggle()\n *\n * Toggle the state of all relays\n *\n * eg. collection.toggle();\n */\n\nCollection.installMethodForwarding(\n  Relays.prototype, Relay.prototype\n);\n\n// Assign Relays Collection class as static \"method\" of Relay.\n// TODO: Eliminate .Array for 1.0.0\nRelay.Array = Relays;\nRelay.Collection = Relays;\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Relay.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = Relay;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/relay.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/repl.js":
/*!**********************************************!*\
  !*** ./node_modules/johnny-five/lib/repl.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var Emitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar repl = __webpack_require__(/*! repl */ \"./src/noop.js\");\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\n\nvar priv = new Map();\n\n// Ported from\n// https://github.com/jgautier/firmata\n\nfunction Repl(opts) {\n  if (!Repl.isActive) {\n    Repl.isActive = true;\n\n    if (!(this instanceof Repl)) {\n      return new Repl(opts);\n    }\n\n    // Store context values in instance property\n    // this will be used for managing scope when\n    // injecting new values into an existing Repl\n    // session.\n    this.context = {};\n    this.ready = false;\n\n    var state = {\n      opts: opts,\n      board: opts.board,\n    };\n\n    priv.set(this, state);\n\n    // Store an accessible copy of the Repl instance\n    // on a static property. This is later used by the\n    // Board constructor to automattically setup Repl\n    // sessions for all programs, which reduces the\n    // boilerplate requirement.\n    Repl.ref = this;\n  } else {\n    return Repl.ref;\n  }\n}\n\n// Inherit event api\nutil.inherits(Repl, Emitter);\n\nRepl.isActive = false;\nRepl.isBlocked = false;\n\n// See Repl.ref notes above.\nRepl.ref = null;\n\nRepl.prototype.initialize = function(callback) {\n  var state = priv.get(this);\n\n  process.stdin.resume();\n  process.stdin.setEncoding(\"utf8\");\n\n  var replDefaults = {\n    prompt: \">> \",\n    useGlobal: false\n  };\n\n  // Call this immediately before repl.start to\n  // avoid crash on Intel Edison\n  state.board.info(\"Repl\", \"Initialized\");\n\n  // Initialize the REPL session with the default\n  // repl settings.\n  // Assign the returned repl instance to \"cmd\"\n  var cmd = repl.start(replDefaults);\n\n  this.ready = true;\n\n  // Assign a reference to the REPL's \"content\" object\n  // This will be use later by the Repl.prototype.inject\n  // method for allowing user programs to inject their\n  // own explicit values and reference\n  this.cmd = cmd;\n  this.context = cmd.context;\n\n  cmd.on(\"exit\", function() {\n    // Time to wait before forcing exit\n    var failExitTimeout = 1000;\n\n    state.board.emit(\"exit\");\n    state.board.warn(\"Board\", \"Closing.\");\n\n    // A fail safe timeout if 1 second to force exit.\n    var timeout = setTimeout(function () {\n      process.reallyExit();\n    }, failExitTimeout);\n\n    var interval = setInterval(function () {\n      var pendingIo = false;\n      // More than one board is attached, wait until everyone has no\n      // io pending before exit.\n      if (state.board.length) {\n        for (let i = 0; i < state.board.length; i++) {\n          if (state.board[i].io.pending) {\n            pendingIo = true;\n            break;\n          }\n        }\n      }\n      // Only one board connected, wait until there is no io pending before exit.\n      else {\n        pendingIo = state.board.io.pending;\n      }\n\n      if (!pendingIo) {\n        clearInterval(interval);\n        clearTimeout(timeout);\n        process.nextTick(process.reallyExit);\n      }\n    }, 1);\n  });\n\n  this.inject(state.opts);\n\n  /* istanbul ignore else */\n  if (callback) {\n    process.nextTick(callback);\n  }\n};\n\nRepl.prototype.close = function() {\n  this.cmd.emit(\"exit\");\n};\n\nRepl.prototype.inject = function(obj) {\n  Object.keys(obj).forEach(function(key) {\n    Object.defineProperty(\n      this.context, key, Object.getOwnPropertyDescriptor(obj, key)\n    );\n  }, this);\n};\n\nmodule.exports = Repl;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/repl.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/sensor.js":
/*!************************************************!*\
  !*** ./node_modules/johnny-five/lib/sensor.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\");\nvar Fn = __webpack_require__(/*! ./fn */ \"./node_modules/johnny-five/lib/fn.js\");\nvar events = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\nvar Collection = __webpack_require__(/*! ./mixins/collection */ \"./node_modules/johnny-five/lib/mixins/collection.js\");\nvar within = __webpack_require__(/*! ./mixins/within */ \"./node_modules/johnny-five/lib/mixins/within.js\");\n\n\n// Sensor instance private data\nvar priv = new Map();\n// var aliases = {\n//   change: [\n//     // Generic sensor value change\n//     \"change\",\n//     // Slider sensors (alias)\n//     \"slide\",\n//     // Soft Potentiometer (alias)\n//     \"touch\",\n//     // Force Sensor (alias)\n//     \"force\",\n//     // Flex Sensor (alias)\n//     \"bend\"\n//   ]\n// };\n\n// To reduce noise in sensor readings, sort collected samples\n// from high to low and select the value in the center.\nfunction median(input) {\n  // faster than default comparitor (even for small n)\n  var sorted = input.sort(function(a, b) {\n    return a - b;\n  });\n  var len = sorted.length;\n  var half = Math.floor(len / 2);\n\n  // If the length is odd, return the midpoint m\n  // If the length is even, return average of m & m + 1\n  return len % 2 ? sorted[half] : (sorted[half - 1] + sorted[half]) / 2;\n}\n\n/**\n * Sensor\n * @constructor\n *\n * @description Generic analog or digital sensor constructor\n *\n * @param {Object} opts Options: pin, freq, range\n */\n\nfunction Sensor(opts) {\n\n  if (!(this instanceof Sensor)) {\n    return new Sensor(opts);\n  }\n\n  // Defaults to 10-bit resolution\n  var resolution = 0x3FF;\n  var raw = null;\n  var last = -1;\n  var samples = [];\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  if (!opts.type) {\n    opts.type = \"analog\";\n  }\n\n  if (this.io.RESOLUTION &&\n      (this.io.RESOLUTION.ADC &&\n        (this.io.RESOLUTION.ADC !== resolution))) {\n    resolution = this.io.RESOLUTION.ADC;\n  }\n\n  // Set the pin to ANALOG (INPUT) mode\n  this.mode = opts.type === \"digital\" ?\n    this.io.MODES.INPUT :\n    this.io.MODES.ANALOG;\n\n  this.io.pinMode(this.pin, this.mode);\n\n  // Create a \"state\" entry for privately\n  // storing the state of the sensor\n  var state = {\n    enabled: typeof opts.enabled === \"undefined\" ? true : opts.enabled,\n    booleanBarrier: opts.type === \"digital\" ? 0 : null,\n    intervalId: null,\n    scale: null,\n    value: 0,\n    median: 0,\n    freq: opts.freq || 25,\n    previousFreq: opts.freq || 25,\n  };\n  // Put a reference where the prototype methods defined in this file have access\n  priv.set(this, state);\n\n  // Sensor instance properties\n  this.range = opts.range || [0, resolution];\n  this.limit = opts.limit || null;\n  this.threshold = opts.threshold === undefined ? 1 : opts.threshold;\n  this.isScaled = false;\n\n  this.io[opts.type + \"Read\"](this.pin, function(data) {\n    raw = data;\n\n    // Only append to the samples when noise filtering can/will be used\n    if (opts.type !== \"digital\") {\n      samples.push(raw);\n    }\n  }.bind(this));\n\n  // Throttle\n  // TODO: The event (interval) processing function should be outside of the Sensor\n  // constructor function (with appropriate passed (and bound?) arguments), to\n  // avoid creating a separate copy (of the function) for each Sensor instance.\n  var eventProcessing = function() {\n    var err, boundary;\n\n    err = null;\n\n    // For digital sensors, skip the analog\n    // noise filtering provided below.\n    if (opts.type === \"digital\") {\n      this.emit(\"data\", raw);\n\n      /* istanbul ignore else */\n      if (last !== raw) {\n        this.emit(\"change\", raw);\n        last = raw;\n      }\n      return;\n    }\n\n    // Keep the previous calculated value if there were no new readings\n    if (samples.length > 0) {\n      // Filter the accumulated sample values to reduce analog reading noise\n      state.median = median(samples);\n    }\n\n    var roundMedian = Math.round(state.median);\n\n    this.emit(\"data\", roundMedian);\n\n    // If the filtered (state.median) value for this interval is at least ± the\n    // configured threshold from last, fire change events\n    if (state.median <= (last - this.threshold) || state.median >= (last + this.threshold)) {\n      this.emit(\"change\", roundMedian);\n      // Update the instance-local `last` value (only) when a new change event\n      // has been emitted.  For comparison in the next interval\n      last = state.median;\n    }\n\n    if (this.limit) {\n      if (state.median <= this.limit[0]) {\n        boundary = \"lower\";\n      }\n      if (state.median >= this.limit[1]) {\n        boundary = \"upper\";\n      }\n\n      if (boundary) {\n        this.emit(\"limit\", {\n          boundary: boundary,\n          value: roundMedian\n        });\n        this.emit(\"limit:\" + boundary, roundMedian);\n      }\n    }\n\n    // Reset samples\n    samples.length = 0;\n  }.bind(this); // ./function eventProcessing()\n\n\n  Object.defineProperties(this, {\n    raw: {\n      get: function() {\n        return raw;\n      }\n    },\n    analog: {\n      get: function() {\n        if (opts.type === \"digital\") {\n          return raw;\n        }\n\n        return raw === null ? 0 :\n          Fn.map(this.raw, 0, resolution, 0, 255) | 0;\n      },\n    },\n    constrained: {\n      get: function() {\n        if (opts.type === \"digital\") {\n          return raw;\n        }\n\n        return raw === null ? 0 :\n          Fn.constrain(this.raw, 0, 255);\n      }\n    },\n    boolean: {\n      get: function() {\n        var state = priv.get(this);\n        var booleanBarrier = state.booleanBarrier;\n        var scale = state.scale || [0, resolution];\n\n        if (booleanBarrier === null) {\n          booleanBarrier = scale[0] + (scale[1] - scale[0]) / 2;\n        }\n\n        return this.value > booleanBarrier;\n      }\n    },\n    scaled: {\n      get: function() {\n        var mapped, constrain;\n\n        if (state.scale && raw !== null) {\n          if (opts.type === \"digital\") {\n            // Value is either 0 or 1, use as an index\n            // to return the scaled value.\n            return state.scale[raw];\n          }\n\n          mapped = Fn.fmap(raw, this.range[0], this.range[1], state.scale[0], state.scale[1]);\n          constrain = Fn.constrain(mapped, state.scale[0], state.scale[1]);\n\n          return constrain;\n        }\n        return this.constrained;\n      }\n    },\n    freq: {\n      get: function() {\n        return state.freq;\n      },\n      set: function(newFreq) {\n        state.freq = newFreq;\n        if (state.intervalId) {\n          clearInterval(state.intervalId);\n        }\n\n        if (state.freq !== null) {\n          state.intervalId = setInterval(eventProcessing, newFreq);\n        }\n      }\n    },\n    value: {\n      get: function() {\n        if (state.scale) {\n          this.isScaled = true;\n          return this.scaled;\n        }\n\n        return raw;\n      }\n    },\n    resolution: {\n      get: function() {\n        return resolution;\n      }\n    }\n  });\n\n  /* istanbul ignore else */\n  if (!!process.env.IS_TEST_MODE) {\n    Object.defineProperties(this, {\n      state: {\n        get: function() {\n          return priv.get(this);\n        }\n      }\n    });\n  }\n\n  // Set the freq property only after the get and set functions are defined\n  // and only if the sensor is not `enabled: false`\n  if (state.enabled) {\n    this.freq = state.freq;\n  }\n}\n\nutil.inherits(Sensor, events.EventEmitter);\n\n/**\n * EXPERIMENTAL\n *\n * within When value is within the provided range, execute callback\n *\n * @param {Number} range Upperbound, converted into an array,\n *                       where 0 is lowerbound\n * @param {Function} callback Callback to execute when value falls inside range\n * @return {Object} instance\n *\n *\n * @param {Array} range Lower to Upper bounds [ low, high ]\n * @param {Function} callback Callback to execute when value falls inside range\n * @return {Object} instance\n *\n */\nObject.assign(Sensor.prototype, within);\n\n/**\n * enable Enable a disabled sensor.\n *\n * @return {Object} instance\n *\n */\nSensor.prototype.enable = function() {\n  var state = priv.get(this);\n\n  /* istanbul ignore else */\n  if (!state.enabled) {\n    this.freq = state.freq || state.previousFreq;\n  }\n\n  return this;\n};\n\n/**\n * disable Disable an enabled sensor.\n *\n * @return {Object} instance\n *\n */\nSensor.prototype.disable = function() {\n  var state = priv.get(this);\n\n  /* istanbul ignore else */\n  if (state.enabled) {\n    state.enabled = false;\n    state.previousFreq = state.freq;\n    this.freq = null;\n  }\n\n  return this;\n};\n\n/**\n * scale/scaleTo Set a value scaling range\n *\n * @param  {Number} low  Lowerbound\n * @param  {Number} high Upperbound\n * @return {Object} instance\n *\n * @param  {Array} [ low, high]  Lowerbound\n * @return {Object} instance\n *\n */\nSensor.prototype.scale = function(low, high) {\n  this.isScaled = true;\n\n  priv.get(this).scale = Array.isArray(low) ?\n    low : [low, high];\n\n  return this;\n};\n\n/**\n * scaleTo Scales value to integer representation\n * @param  {Number} low  An array containing a lower and upper bound\n *\n * @param  {Number} low  A number to use as a lower bound\n * @param  {Number} high A number to use as an upper bound\n * @return {Number}      The scaled value\n */\nSensor.prototype.scaleTo = function(low, high) {\n  var scale = Array.isArray(low) ? low : [low, high];\n  return Fn.map(this.raw, 0, this.resolution, scale[0], scale[1]);\n};\n\n/**\n * fscaleTo Scales value to single precision float representation\n * @param  {Number} low  An array containing a lower and upper bound\n *\n * @param  {Number} low  A number to use as a lower bound\n * @param  {Number} high A number to use as an upper bound\n * @return {Number}      The scaled value\n */\nSensor.prototype.fscaleTo = function(low, high) {\n  var scale = Array.isArray(low) ? low : [low, high];\n  return Fn.fmap(this.raw, 0, this.resolution, scale[0], scale[1]);\n};\n\n/**\n * booleanAt Set a midpoint barrier value used to calculate returned value of\n *           .boolean property.\n *\n * @param  {Number} barrier\n * @return {Object} instance\n *\n */\nSensor.prototype.booleanAt = function(barrier) {\n  priv.get(this).booleanBarrier = barrier;\n  return this;\n};\n\n\n\n/**\n * Sensors()\n * new Sensors()\n *\n * Constructs an Array-like instance of all servos\n */\nfunction Sensors(numsOrObjects) {\n  if (!(this instanceof Sensors)) {\n    return new Sensors(numsOrObjects);\n  }\n\n  Object.defineProperty(this, \"type\", {\n    value: Sensor\n  });\n\n  Collection.Emitter.call(this, numsOrObjects);\n}\n\nutil.inherits(Sensors, Collection.Emitter);\n\n\nCollection.installMethodForwarding(\n  Sensors.prototype, Sensor.prototype\n);\n\n// Assign Sensors Collection class as static \"method\" of Sensor.\nSensor.Collection = Sensors;\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Sensor.purge = function() {\n    priv.clear();\n  };\n}\n\n\nmodule.exports = Sensor;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/sensor.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/servo.js":
/*!***********************************************!*\
  !*** ./node_modules/johnny-five/lib/servo.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\");\nvar Pins = Board.Pins;\nvar Expander = __webpack_require__(/*! ./expander */ \"./node_modules/johnny-five/lib/expander.js\");\nvar Emitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\nvar Collection = __webpack_require__(/*! ./mixins/collection */ \"./node_modules/johnny-five/lib/mixins/collection.js\");\nvar Fn = __webpack_require__(/*! ./fn */ \"./node_modules/johnny-five/lib/fn.js\");\nvar Animation = __webpack_require__(/*! ./animation */ \"./node_modules/johnny-five/lib/animation.js\");\n\n// Servo instance private data\nvar priv = new Map();\n\nvar Controllers = {\n  PCA9685: {\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n\n        this.address = opts.address || 0x40;\n        this.pwmRange = opts.pwmRange || [450, 1850];\n        this.frequency = opts.frequency || 50;\n\n        state.expander = Expander.get({\n          address: this.address,\n          controller: this.controller,\n          bus: this.bus,\n          pwmRange: this.pwmRange,\n          frequency: this.frequency,\n        });\n\n        this.pin = state.expander.normalize(opts.pin);\n      }\n    },\n    update: {\n      writable: true,\n      value: function(microseconds) {\n        var state = priv.get(this);\n        state.expander.servoWrite(this.pin, microseconds);\n      }\n    }\n  },\n  Standard: {\n    initialize: {\n      value: function(opts) {\n\n        // When in debug mode, if pin is not a PWM pin, emit an error\n        if (opts.debug && !this.board.pins.isServo(this.pin)) {\n          Board.Pins.Error({\n            pin: this.pin,\n            type: \"PWM\",\n            via: \"Servo\",\n          });\n        }\n\n        if (Array.isArray(opts.pwmRange)) {\n          this.io.servoConfig(this.pin, opts.pwmRange[0], opts.pwmRange[1]);\n        } else {\n          this.io.pinMode(this.pin, this.mode);\n        }\n      }\n    },\n    update: {\n      writable: true,\n      value: function(degrees) {\n\n        // If same degrees return immediately.\n        if (this.last && this.last.degrees === degrees) {\n          return this;\n        }\n\n        // Map value from degreeRange to pwmRange\n        var microseconds = Fn.map(\n          degrees,\n          this.degreeRange[0], this.degreeRange[1],\n          this.pwmRange[0], this.pwmRange[1]\n        );\n\n        // Restrict values to integers\n        microseconds |= 0;\n\n        this.io.servoWrite(this.pin, microseconds);\n      }\n    }\n  }\n};\n\n/**\n * Servo\n * @constructor\n *\n * @param {Object} opts Options: pin, type, id, range\n */\n\nfunction Servo(opts) {\n\n  if (!(this instanceof Servo)) {\n    return new Servo(opts);\n  }\n\n  var history = [];\n  var pinValue = typeof opts === \"object\" ? opts.pin : opts;\n  var controller = null;\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  this.degreeRange = opts.degreeRange || [0, 180];\n  this.pwmRange = opts.pwmRange || [600, 2400];\n  this.range = opts.range || this.degreeRange;\n  this.deadband = opts.deadband || [90, 90];\n  this.fps = opts.fps || 100;\n  this.offset = opts.offset || 0;\n  this.range = opts.range || [0 - this.offset, 180 - this.offset];\n  this.mode = this.io.MODES.SERVO;\n  this.interval = null;\n  this.value = null;\n\n  // StandardFirmata on Arduino allows controlling\n  // servos from analog pins.\n  // If we're currently operating with an Arduino\n  // and the user has provided an analog pin name\n  // (eg. \"A0\", \"A5\" etc.), parse out the numeric\n  // value and capture the fully qualified analog\n  // pin number.\n  if (typeof opts.controller === \"undefined\" && Pins.isFirmata(this)) {\n    if (typeof pinValue === \"string\" && pinValue[0] === \"A\") {\n      pinValue = this.io.analogPins[+pinValue.slice(1)];\n    }\n\n    pinValue = +pinValue;\n\n    // If the board's default pin normalization\n    // came up with something different, use the\n    // the local value.\n    if (!Number.isNaN(pinValue) && this.pin !== pinValue) {\n      this.pin = pinValue;\n    }\n  }\n\n\n  // The type of servo determines certain alternate\n  // behaviours in the API\n  this.type = opts.type || \"standard\";\n\n  // Invert the value of all servoWrite operations\n  // eg. 80 => 100, 90 => 90, 0 => 180\n  if (opts.isInverted) {\n    console.warn(\"The 'isInverted' property has been renamed 'invert'\");\n  }\n  this.invert = opts.isInverted || opts.invert || false;\n\n\n  // Collect all movement history for this servo\n  // history = [\n  //   {\n  //     timestamp: Date.now(),\n  //     degrees: degrees\n  //   }\n  // ];\n\n  // Allow \"setup\"instructions to come from\n  // constructor options properties\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    controller = Controllers.Standard;\n  }\n\n  priv.set(this, {\n    history: history\n  });\n\n  Board.Controller.call(this, controller, opts);\n\n  Object.defineProperties(this, {\n    history: {\n      get: function() {\n        return history.slice(-5);\n      }\n    },\n    last: {\n      get: function() {\n        return history[history.length - 1];\n      }\n    },\n    position: {\n      get: function() {\n        return history.length ? history[history.length - 1].degrees : -1;\n      }\n    }\n  });\n\n  this.initialize(opts);\n\n  // If \"startAt\" is defined and center is falsy\n  // set servo to min or max degrees\n  if (typeof opts.startAt !== \"undefined\") {\n    this.startAt = opts.startAt;\n    this.to(opts.startAt);\n  } else {\n    this.startAt = (this.degreeRange[1] - this.degreeRange[0]) / 2 + this.degreeRange[0];\n  }\n\n  // If \"center\" true set servo to 90deg\n  if (opts.center) {\n    this.center();\n  }\n\n  if (opts.type === \"continuous\") {\n    this.stop();\n  }\n}\n\nutil.inherits(Servo, Emitter);\n\n\n/**\n * to\n *\n * Set the servo horn's position to given degree over time.\n *\n * @param  {Number} degrees   Degrees to turn servo to.\n * @param  {Number} time      Time to spend in motion.\n * @param  {Number} rate      The rate of the motion transiton\n *\n * - or -\n *\n * @param {Object} an Animation() segment config object\n *\n * @return {Servo} instance\n */\n\nServo.prototype.to = function(degrees, time, rate) {\n\n  var state = priv.get(this);\n  var options = {};\n\n  if (typeof degrees === \"object\") {\n\n    Object.assign(options, degrees);\n\n    options.duration = degrees.duration || degrees.interval || 1000;\n    options.cuePoints = degrees.cuePoints || [0, 1.0];\n    options.keyFrames = degrees.keyFrames || [\n      null,\n      {\n        value: typeof degrees.degrees === \"number\" ? degrees.degrees : this.startAt\n      }\n    ];\n\n    options.oncomplete = function() {\n      // Enforce async execution for user \"oncomplete\"\n      process.nextTick(function() {\n        if (typeof degrees.oncomplete === \"function\") {\n          degrees.oncomplete();\n        }\n        this.emit(\"move:complete\");\n      }.bind(this));\n    }.bind(this);\n\n\n    state.isRunning = true;\n    state.animation = state.animation || new Animation(this);\n    state.animation.enqueue(options);\n\n  } else {\n\n    var target = degrees;\n\n    // Enforce limited range of motion\n    degrees = Fn.constrain(degrees, this.range[0], this.range[1]);\n\n    if (typeof time !== \"undefined\") {\n\n      options.duration = time;\n      options.keyFrames = [null, {\n        degrees: degrees\n      }];\n      options.fps = rate || this.fps;\n\n      this.to(options);\n\n    } else {\n\n      this.value = degrees;\n\n      degrees += this.offset;\n\n      if (this.invert) {\n        degrees = Fn.map(\n          degrees,\n          this.degreeRange[0], this.degreeRange[1],\n          this.degreeRange[1], this.degreeRange[0]\n        );\n      }\n\n      this.update(degrees);\n\n      if (state.history.length > 5) {\n        state.history.shift();\n      }\n\n      state.history.push({\n        timestamp: Date.now(),\n        degrees: degrees,\n        target: target\n      });\n    }\n  }\n\n  // return this instance\n  return this;\n};\n\n\n/**\n * Animation.normalize\n *\n * @param [number || object] keyFrames An array of step values or a keyFrame objects\n */\n\nServo.prototype[Animation.normalize] = function(keyFrames) {\n\n  var last = this.last ? this.last.target : this.startAt;\n\n  // If user passes null as the first element in keyFrames use current position\n  if (keyFrames[0] === null) {\n    keyFrames[0] = {\n      value: last\n    };\n  }\n\n  // If user passes a step as the first element in keyFrames use current position + step\n  if (typeof keyFrames[0] === \"number\") {\n    keyFrames[0] = {\n      value: last + keyFrames[0]\n    };\n  }\n\n  return keyFrames.map(function(frame) {\n    var value = frame;\n\n    /* istanbul ignore else */\n    if (frame !== null) {\n      // frames that are just numbers represent _step_\n      if (typeof frame === \"number\") {\n        frame = {\n          step: value,\n        };\n      } else {\n        if (typeof frame.degrees === \"number\") {\n          frame.value = frame.degrees;\n          delete frame.degrees;\n        }\n        if (typeof frame.copyDegrees === \"number\") {\n          frame.copyValue = frame.copyDegrees;\n          delete frame.copyDegrees;\n        }\n      }\n\n      /* istanbul ignore else */\n      if (!frame.easing) {\n        frame.easing = \"linear\";\n      }\n    }\n    return frame;\n  });\n};\n\n/**\n * Animation.render\n *\n * @position [number] value to set the servo to\n */\nServo.prototype[Animation.render] = function(position) {\n  return this.to(position[0]);\n};\n\n/**\n * step\n *\n * Update the servo horn's position by specified degrees (over time)\n *\n * @param  {Number} degrees   Degrees to turn servo to.\n * @param  {Number} time      Time to spend in motion.\n *\n * @return {Servo} instance\n */\n\nServo.prototype.step = function(degrees, time) {\n  return this.to(this.last.target + degrees, time);\n};\n\n/**\n * move Alias for Servo.prototype.to\n */\nServo.prototype.move = function(degrees, time) {\n  console.warn(\"Servo.prototype.move has been renamed to Servo.prototype.to\");\n\n  return this.to(degrees, time);\n};\n\n/**\n * min Set Servo to minimum degrees, defaults to 0deg\n * @param  {Number} time      Time to spend in motion.\n * @param  {Number} rate      The rate of the motion transiton\n * @return {Object} instance\n */\n\nServo.prototype.min = function(time, rate) {\n  return this.to(this.range[0], time, rate);\n};\n\n/**\n * max Set Servo to maximum degrees, defaults to 180deg\n * @param  {Number} time      Time to spend in motion.\n * @param  {Number} rate      The rate of the motion transiton\n * @return {[type]} [description]\n */\nServo.prototype.max = function(time, rate) {\n  return this.to(this.range[1], time, rate);\n};\n\n/**\n * center Set Servo to centerpoint, defaults to 90deg\n * @param  {Number} time      Time to spend in motion.\n * @param  {Number} rate      The rate of the motion transiton\n * @return {[type]} [description]\n */\nServo.prototype.center = function(time, rate) {\n  return this.to(Math.abs((this.range[0] + this.range[1]) / 2), time, rate);\n};\n\n/**\n * home Return Servo to startAt position\n */\nServo.prototype.home = function() {\n  return this.to(this.startAt);\n};\n\n/**\n * sweep Sweep the servo between min and max or provided range\n * @param  {Array} range constrain sweep to range\n *\n * @param {Object} options Set range or interval.\n *\n * @return {[type]} [description]\n */\nServo.prototype.sweep = function(opts) {\n\n  var options = {\n    keyFrames: [{\n      value: this.range[0]\n    }, {\n      value: this.range[1]\n    }],\n    metronomic: true,\n    loop: true,\n    easing: \"inOutSine\"\n  };\n\n  // If opts is an array, then assume a range was passed\n  if (Array.isArray(opts)) {\n    options.keyFrames = rangeToKeyFrames(opts);\n  } else {\n    if (typeof opts === \"object\" && opts !== null) {\n      Object.assign(options, opts);\n      /* istanbul ignore else */\n      if (Array.isArray(options.range)) {\n        options.keyFrames = rangeToKeyFrames(options.range);\n      }\n    }\n  }\n\n  return this.to(options);\n};\n\nfunction rangeToKeyFrames(range) {\n  return range.map(function(value) {\n    return { value: value };\n  });\n}\n\n/**\n * stop Stop a moving servo\n * @return {[type]} [description]\n */\nServo.prototype.stop = function() {\n  var state = priv.get(this);\n\n  if (state.animation) {\n    state.animation.stop();\n  }\n\n  if (this.type === \"continuous\") {\n    this.to(\n      this.deadband.reduce(function(a, b) {\n        return Math.round((a + b) / 2);\n      })\n    );\n  } else {\n    clearInterval(this.interval);\n  }\n\n  return this;\n};\n\n//\n[\"clockWise\", \"cw\", \"counterClockwise\", \"ccw\"].forEach(function(api) {\n  Servo.prototype[api] = function(rate) {\n    var range;\n    rate = rate === undefined ? 1 : rate;\n    /* istanbul ignore if */\n    if (this.type !== \"continuous\") {\n      this.board.error(\n        \"Servo\",\n        \"Servo.prototype.\" + api + \" is only available for continuous servos\"\n      );\n    }\n    if (api === \"cw\" || api === \"clockWise\") {\n      range = [rate, 0, 1, this.deadband[1] + 1, this.range[1]];\n    } else {\n      range = [rate, 0, 1, this.deadband[0] - 1, this.range[0]];\n    }\n    return this.to(Fn.scale.apply(null, range) | 0);\n  };\n});\n\n\n/**\n *\n * Static API\n *\n *\n */\n\nServo.Continuous = function(pinOrOpts) {\n  var opts = {};\n\n  if (typeof pinOrOpts === \"object\") {\n    Object.assign(opts, pinOrOpts);\n  } else {\n    opts.pin = pinOrOpts;\n  }\n\n  opts.type = \"continuous\";\n  return new Servo(opts);\n};\n\nServo.Continuous.speeds = {\n  // seconds to travel 60 degrees\n  \"@4.8V\": 0.23,\n  \"@5.0V\": 0.17,\n  \"@6.0V\": 0.18\n};\n\n/**\n * Servos()\n * new Servos()\n */\nfunction Servos(numsOrObjects) {\n  if (!(this instanceof Servos)) {\n    return new Servos(numsOrObjects);\n  }\n\n  Object.defineProperty(this, \"type\", {\n    value: Servo\n  });\n\n  Collection.call(this, numsOrObjects);\n}\n\nutil.inherits(Servos, Collection);\n\n/*\n * Servos, center()\n *\n * centers all servos to 90deg\n *\n * eg. array.center();\n\n * Servos, min()\n *\n * set all servos to the minimum degrees\n * defaults to 0\n *\n * eg. array.min();\n\n * Servos, max()\n *\n * set all servos to the maximum degrees\n * defaults to 180\n *\n * eg. array.max();\n\n * Servos, stop()\n *\n * stop all servos\n *\n * eg. array.stop();\n */\n\nCollection.installMethodForwarding(\n  Servos.prototype, Servo.prototype\n);\n\n\n/**\n * Animation.normalize\n *\n * @param [number || object] keyFrames An array of step values or a keyFrame objects\n */\nServos.prototype[Animation.normalize] = function(keyFrameSet) {\n  return keyFrameSet.map(function(keyFrames, index) {\n    if (keyFrames !== null) {\n      var servo = this[index];\n\n      // If servo is a servoArray then user servo[0] for default values\n      if (servo instanceof Servos) {\n        servo = servo[0];\n      }\n\n      var last = servo.last ? servo.last.target : servo.startAt;\n\n      // If the first keyFrameSet is null use the current position\n      if (keyFrames[0] === null) {\n        keyFrames[0] = {\n          value: last\n        };\n      }\n\n      if (Array.isArray(keyFrames)) {\n        if (keyFrames[0] === null) {\n          keyFrameSet[index][0] = {\n            value: last\n          };\n        }\n      }\n\n      return this[index][Animation.normalize](keyFrames);\n    }\n    return keyFrames;\n  }, this);\n};\n\n/**\n * Animation.render\n *\n * @position [number] array of values to set the servos to\n */\nServos.prototype[Animation.render] = function(position) {\n  return this.each(function(servo, i) {\n    servo.to(position[i]);\n  });\n};\n\n\n// Assign Servos Collection class as static \"method\" of Servo.\n// TODO: Eliminate .Array for 1.0.0\nServo.Array = Servos;\nServo.Collection = Servos;\n\n// Alias\n// TODO: Deprecate and REMOVE\nServo.prototype.write = Servo.prototype.move;\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Servo.Controllers = Controllers;\n  Servo.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = Servo;\n// References\n//\n// http://www.societyofrobots.com/actuators_servos.shtml\n// http://www.parallax.com/Portals/0/Downloads/docs/prod/motors/900-00008-CRServo-v2.2.pdf\n// http://arduino.cc/en/Tutorial/SecretsOfArduinoPWM\n// http://servocity.com/html/hs-7980th_servo.html\n// http://mbed.org/cookbook/Servo\n\n// Further API info:\n// http://www.tinkerforge.com/doc/Software/Bricks/Servo_Brick_Python.html#servo-brick-python-api\n// http://www.tinkerforge.com/doc/Software/Bricks/Servo_Brick_Java.html#servo-brick-java-api\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/servo.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/shiftregister.js":
/*!*******************************************************!*\
  !*** ./node_modules/johnny-five/lib/shiftregister.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\");\nvar Collection = __webpack_require__(/*! ./mixins/collection */ \"./node_modules/johnny-five/lib/mixins/collection.js\");\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\nvar priv = new Map();\n\nfunction ShiftRegister(opts) {\n  if (!(this instanceof ShiftRegister)) {\n    return new ShiftRegister(opts);\n  }\n\n  if (Array.isArray(opts)) {\n    // [Data, Clock, Latch, Reset]\n    opts = {\n      pins: {\n        data: opts[0],\n        clock: opts[1],\n        latch: opts[2],\n        reset: opts.length === 4 ? opts[3] : null,\n      }\n    };\n  } else if (typeof opts.pins === \"object\" && Array.isArray(opts.pins)) {\n    opts.pins = {\n      data: opts.pins[0],\n      clock: opts.pins[1],\n      latch: opts.pins[2],\n      reset: opts.pins.length === 4 ? opts.pins[3] : null,\n    };\n  }\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  this.size = opts.size || 1;\n  this.pins.reset = typeof opts.pins.reset !== \"undefined\" ? opts.pins.reset : null;\n\n  var isAnode = typeof opts.isAnode !== \"undefined\" ? opts.isAnode : false;\n  var clear = isAnode ? 255 : 0;\n  var state = {\n    isAnode: isAnode,\n    value: new Array(this.size).fill(clear),\n    encoded: encoded[isAnode ? \"anode\" : \"cathode\"],\n    clear: clear,\n  };\n\n  priv.set(this, state);\n\n  Object.defineProperties(this, {\n    isAnode: {\n      get: function() {\n        return isAnode;\n      }\n    },\n    value: {\n      get: function() {\n        return state.value;\n      }\n    },\n  });\n}\n\nvar encoded = {\n  cathode: [63, 6, 91, 79, 102, 109, 125, 7, 127, 103],\n  anode: [64, 121, 36, 48, 25, 18, 2, 120, 0, 24],\n};\n\n/**\n * Print a digit on a seven segment display, or several\n * digits across several displays.\n */\nShiftRegister.prototype.display = function(value) {\n  var state = priv.get(this);\n  var chars;\n\n  if (typeof value === \"number\") {\n    // 1, 20, etc.\n    return this.display(String(value));\n  }\n\n  if (typeof value === \"string\") {\n    var matches = value.match(/([0-9]{1}\\.*)/g);\n\n    if (matches && matches.length) {\n      chars = matches.map(function(char) {\n        // \"1\"\n        if (char.length === 1) {\n          return state.encoded[char] | (1 << 7);\n        }\n        // \"1.?.?\"\n        return state.encoded[char[0]];\n      });\n    }\n  }\n\n  this.send(chars);\n\n  state.value = chars;\n\n  return this;\n};\n\n/**\n * Send one or more values to the shift register.\n * @param {...number} value Value to send\n * @returns {ShiftRegister}\n */\nShiftRegister.prototype.send = function(value) {\n  var state = priv.get(this);\n  var args = Array.from(arguments);\n\n  if (args.length === 1) {\n    args = [value];\n  }\n\n  if (Array.isArray(value)) {\n    args = value;\n  }\n\n  // open latch to fill register with data\n  this.io.digitalWrite(this.pins.latch, this.io.LOW);\n\n  args.forEach(function(arg) {\n    if (typeof arg === \"string\") {\n      arg = arg.charCodeAt(0);\n    }\n    if (this.isAnode &&\n      (arg !== 255 && !state.encoded.includes(arg) && !state.encoded.includes(arg & ~(1 << 7)))) {\n\n      var index = encoded.anode.findIndex(function(value) {\n        return value === arg;\n      });\n\n      if (index !== -1) {\n        arg = encoded.cathode[index];\n      }\n    }\n    this.board.shiftOut(this.pins.data, this.pins.clock, true, arg);\n  }, this);\n\n  // close latch to commit bits into register.\n  this.io.digitalWrite(this.pins.latch, this.io.HIGH);\n\n  state.value = args;\n\n  return this;\n};\n\n/**\n * Clear the shift register by replacing each value with a 0.\n * @type {ShiftRegister}\n */\nShiftRegister.prototype.clear = function() {\n  var state = priv.get(this);\n  return this.send(Array(this.size).fill(state.clear));\n};\n\nShiftRegister.prototype.reset = function() {\n  if (this.pins.reset === null) {\n    throw new Error(\"ShiftRegister was not initialized with a reset pin\");\n  }\n  this.io.digitalWrite(this.pins.clock, this.io.LOW);\n  this.io.digitalWrite(this.pins.reset, this.io.LOW);\n  this.io.digitalWrite(this.pins.clock, this.io.HIGH);\n  this.io.digitalWrite(this.pins.reset, this.io.HIGH);\n\n  return this;\n};\n\n\n\n\n/**\n * ShiftRegisters()\n * new ShiftRegisters()\n */\nfunction ShiftRegisters(numsOrObjects) {\n  if (!(this instanceof ShiftRegisters)) {\n    return new ShiftRegisters(numsOrObjects);\n  }\n\n  Object.defineProperty(this, \"type\", {\n    value: ShiftRegister\n  });\n\n  Collection.call(this, numsOrObjects);\n}\n\nutil.inherits(ShiftRegisters, Collection);\n\n\n/*\n * ShiftRegisters, display(...)\n *\n * eg. array.display(...);\n\n * ShiftRegisters, send(...)\n *\n * eg. array.send(...);\n\n * ShiftRegisters, clear()\n *\n * eg. array.clear();\n\n * ShiftRegisters, reset()\n *\n * eg. array.reset();\n */\n\nCollection.installMethodForwarding(\n  ShiftRegisters.prototype, ShiftRegister.prototype\n);\n\n// Assign ShiftRegisters Collection class as static \"method\" of ShiftRegister.\nShiftRegister.Collection = ShiftRegisters;\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  ShiftRegister.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = ShiftRegister;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/shiftregister.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/sleep.js":
/*!***********************************************!*\
  !*** ./node_modules/johnny-five/lib/sleep.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {module.exports = {\n  nano: function(ns) {\n    var start = process.hrtime();\n    while (process.hrtime() < start + ns) {}\n  }\n};\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/sleep.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/sonar.js":
/*!***********************************************!*\
  !*** ./node_modules/johnny-five/lib/sonar.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\"),\n  events = __webpack_require__(/*! events */ \"./node_modules/events/events.js\"),\n  util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\"),\n  within = __webpack_require__(/*! ./mixins/within */ \"./node_modules/johnny-five/lib/mixins/within.js\");\n\nvar priv = new Map();\nvar Devices;\n\n/**\n * Sonar\n * @constructor\n *\n * @param {Object} opts Options: pin (analog)\n */\n\nfunction Sonar(opts) {\n\n  if (!(this instanceof Sonar)) {\n    return new Sonar(opts);\n  }\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  var device, state;\n\n  // Sonar instance properties\n  this.freq = opts.freq || 100;\n  this.value = null;\n\n  state = {\n    last: 0,\n    median: 0,\n    samples: []\n  };\n\n  priv.set(this, state);\n\n  if (typeof opts.device === \"string\") {\n    device = Devices[opts.device];\n  } else {\n    device = opts.device;\n  }\n\n  if (typeof device === \"undefined\") {\n    device = Devices.DEFAULT;\n  }\n\n  device.initialize.call(this, opts);\n\n  if (!device.descriptor.inches) {\n    device.descriptor.inches = {\n      get: function() {\n        return +(this.cm * 0.39).toFixed(2);\n      }\n    };\n  }\n\n  device.descriptor.in = device.descriptor.inches;\n\n  Object.defineProperties(this, device.descriptor);\n\n  // Throttle\n  setInterval(function() {\n    // Nothing read since previous interval\n    if (state.samples.length === 0) {\n      return;\n    }\n\n    state.median = state.samples.sort()[Math.floor(state.samples.length / 2)];\n    this.value = state.median;\n\n    this.emit(\"data\", state.median);\n\n    // If the state.median value for this interval is not the same as the\n    // state.median value in the last interval, fire a \"change\" event.\n    //\n    if (state.last && state.median &&\n      (state.median.toFixed(1) !== state.last.toFixed(1))) {\n      this.emit(\"change\", state.median);\n    }\n\n    // Store this media value for comparison\n    // in next interval\n    state.last = state.median;\n\n    // Reset state.samples;\n    state.samples.length = 0;\n  }.bind(this), this.freq);\n}\n\nutil.inherits(Sonar, events.EventEmitter);\nObject.assign(Sonar.prototype, within);\n\nDevices = {\n  SRF10: {\n    initialize: function(opts) {\n\n      var samples = priv.get(this).samples;\n      var address = 0x70;\n      var delay = 65;\n\n      // Set up I2C data connection\n      this.io.i2cConfig(opts);\n\n      // Startup parameter\n      this.io.i2cWrite(address, [0x01, 16]);\n      this.io.i2cWrite(address, [0x02, 255]);\n\n      this.io.setMaxListeners(100);\n\n      function read() {\n        this.io.i2cWrite(address, [0x02]);\n        this.io.i2cReadOnce(address, 2, function(data) {\n          samples.push((data[0] << 8) | data[1]);\n        }.bind(this));\n\n        prime.call(this);\n      }\n\n      function prime() {\n        // 0x52 result in us (microseconds)\n        this.io.i2cWrite(address, [0x00, 0x52]);\n\n        setTimeout(read.bind(this), delay);\n      }\n\n      prime.call(this);\n    },\n    descriptor: {\n      cm: {\n        get: function() {\n          var median = priv.get(this).median;\n          return +((((median / 2) * 343.2) / 10) / 1000).toFixed(1);\n        }\n      }\n    }\n  },\n\n  DEFAULT: {\n    initialize: function() {\n      var samples = priv.get(this).samples;\n\n      // Set the pin to ANALOG mode\n      this.mode = this.io.MODES.ANALOG;\n      this.io.pinMode(this.pin, this.mode);\n\n      this.io.analogRead(this.pin, function(data) {\n        samples.push(data);\n      }.bind(this));\n    },\n    descriptor: {\n      cm: {\n        get: function() {\n          var median = priv.get(this).median;\n          return +((median / 2) * 2.54).toFixed(1);\n        }\n      }\n    }\n  }\n};\n\nDevices.SRF02 = Devices.SRF08 = Devices.SRF10;\n\nmodule.exports = Sonar;\n\n// Reference\n//\n// http://www.maxbotix.com/tutorials.htm#Code_example_for_the_BasicX_BX24p\n// http://www.electrojoystick.com/tutorial/?page_id=285\n\n// Tutorials\n//\n// http://www.sensorpedia.com/blog/how-to-interface-an-ultrasonic-rangefinder-with-sensorpedia-via-twitter-guide-2/\n\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/sonar.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/stepper.js":
/*!*************************************************!*\
  !*** ./node_modules/johnny-five/lib/stepper.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\");\nvar Fn = __webpack_require__(/*! ./fn */ \"./node_modules/johnny-five/lib/fn.js\");\nvar priv = new Map();\nvar steppers = new Map();\nvar TAU = Fn.TAU;\n\nvar MAXSTEPPERS = 6; // correlates with MAXSTEPPERS in firmware\n\n\nfunction Step(stepper) {\n  this.rpm = 180;\n  this.direction = -1;\n  this.speed = 0;\n  this.accel = 0;\n  this.decel = 0;\n\n  this.stepper = stepper;\n}\n\nStep.PROPERTIES = [\"rpm\", \"direction\", \"speed\", \"accel\", \"decel\"];\nStep.DEFAULTS = [180, -1, 0, 0, 0];\n\n\nfunction MotorPins(pins) {\n  var k = 0;\n  pins = pins.slice();\n  while (pins.length) {\n    this[\"motor\" + (++k)] = pins.shift();\n  }\n}\n\nfunction isSupported(io) {\n  return io.pins.some(function(pin) {\n    return pin.supportedModes.includes(io.MODES.STEPPER);\n  });\n}\n\n/**\n * Stepper\n *\n * Class for handling steppers using AdvancedFirmata support for asynchronous stepper control\n *\n *\n * five.Stepper({\n *  type: constant,     // io.STEPPER.TYPE.*\n *  stepsPerRev: number,  // steps to make on revolution of stepper\n *  pins: {\n *    step: number,   // pin attached to step pin on driver (used for type DRIVER)\n *    dir: number,    // pin attached to direction pin on driver (used for type DRIVER)\n *    motor1: number, // (used for type TWO_WIRE and FOUR_WIRE)\n *    motor2: number, // (used for type TWO_WIRE and FOUR_WIRE)\n *    motor3: number, // (used for type FOUR_WIRE)\n *    motor4: number, // (used for type FOUR_WIRE)\n *  }\n * });\n *\n *\n * five.Stepper({\n *  type: five.Stepper.TYPE.DRIVER,\n *  stepsPerRev: number,\n *  pins: {\n *    step: number,\n *    dir: number\n *  }\n * });\n *\n * five.Stepper({\n *  type: five.Stepper.TYPE.DRIVER,\n *  stepsPerRev: number,\n *  pins: [ step, dir ]\n * });\n *\n * five.Stepper({\n *  type: five.Stepper.TYPE.TWO_WIRE,\n *  stepsPerRev: number,\n *  pins: {\n *    motor1: number,\n *    motor2: number\n *  }\n * });\n *\n * five.Stepper({\n *  type: five.Stepper.TYPE.TWO_WIRE,\n *  stepsPerRev: number,\n *  pins: [ motor1, motor2 ]\n * });\n *\n * five.Stepper({\n *  type: five.Stepper.TYPE.FOUR_WIRE,\n *  stepsPerRev: number,\n *  pins: {\n *    motor1: number,\n *    motor2: number,\n *    motor3: number,\n *    motor4: number\n *  }\n * });\n *\n * five.Stepper({\n *  type: five.Stepper.TYPE.FOUR_WIRE,\n *  stepsPerRev: number,\n *  pins: [ motor1, motor2, motor3, motor4 ]\n * });\n *\n *\n * @param {Object} opts\n *\n */\n\nfunction Stepper(opts) {\n  var state, params = [];\n\n  if (!(this instanceof Stepper)) {\n    return new Stepper(opts);\n  }\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  if (!isSupported(this.io)) {\n    throw new Error(\n      \"Stepper is not supported\"\n    );\n  }\n\n  if (!opts.pins) {\n    throw new Error(\n      \"Stepper requires a `pins` object or array\"\n    );\n  }\n\n  if (!opts.stepsPerRev) {\n    throw new Error(\n      \"Stepper requires a `stepsPerRev` number value\"\n    );\n  }\n\n  steppers.set(this.board, steppers.get(this.board) || []);\n  this.id = steppers.get(this.board).length;\n\n  if (this.id >= MAXSTEPPERS) {\n    throw new Error(\n      \"Stepper cannot exceed max steppers (\" + MAXSTEPPERS + \")\"\n    );\n  }\n\n  // Convert an array of pins to the appropriate named pin\n  if (Array.isArray(this.pins)) {\n    if (this.pins.length === 2) {\n      // Using an array of 2 pins requres a TYPE\n      // to disambiguate DRIVER and TWO_WIRE\n      if (!opts.type) {\n        throw new Error(\n          \"Stepper requires a `type` number value (DRIVER, TWO_WIRE)\"\n        );\n      }\n    }\n\n    if (opts.type === Stepper.TYPE.DRIVER) {\n      this.pins = {\n        step: this.pins[0],\n        dir: this.pins[1]\n      };\n    } else {\n      this.pins = new MotorPins(this.pins);\n    }\n  }\n\n  // Attempt to guess the type if none is provided\n  if (!opts.type) {\n    if (this.pins.dir) {\n      opts.type = Stepper.TYPE.DRIVER;\n    } else {\n      if (this.pins.motor3) {\n        opts.type = Stepper.TYPE.FOUR_WIRE;\n      } else {\n        opts.type = Stepper.TYPE.TWO_WIRE;\n      }\n    }\n  }\n\n\n  // Initial Stepper config params (same for all 3 types)\n  params.push(this.id, opts.type, opts.stepsPerRev);\n\n\n  if (opts.type === Stepper.TYPE.DRIVER) {\n    if (typeof this.pins.dir === \"undefined\" ||\n        typeof this.pins.step === \"undefined\") {\n      throw new Error(\n        \"Stepper.TYPE.DRIVER expects: `pins.dir`, `pins.step`\"\n      );\n    }\n\n    params.push(\n      this.pins.dir, this.pins.step\n    );\n  }\n\n  if (opts.type === Stepper.TYPE.TWO_WIRE) {\n    if (typeof this.pins.motor1 === \"undefined\" ||\n        typeof this.pins.motor2 === \"undefined\") {\n      throw new Error(\n        \"Stepper.TYPE.TWO_WIRE expects: `pins.motor1`, `pins.motor2`\"\n      );\n    }\n\n    params.push(\n      this.pins.motor1, this.pins.motor2\n    );\n  }\n\n  if (opts.type === Stepper.TYPE.FOUR_WIRE) {\n    if (typeof this.pins.motor1 === \"undefined\" ||\n        typeof this.pins.motor2 === \"undefined\" ||\n        typeof this.pins.motor3 === \"undefined\" ||\n        typeof this.pins.motor4 === \"undefined\") {\n      throw new Error(\n        \"Stepper.TYPE.FOUR_WIRE expects: `pins.motor1`, `pins.motor2`, `pins.motor3`, `pins.motor4`\"\n      );\n    }\n\n    params.push(\n      this.pins.motor1, this.pins.motor2, this.pins.motor3, this.pins.motor4\n    );\n  }\n\n  // Iterate the params and set each pin's mode to MODES.STEPPER\n  // Params:\n  // [deviceNum, type, stepsPerRev, dirOrMotor1Pin, stepOrMotor2Pin, motor3Pin, motor4Pin]\n  // The first 3 are required, the remaining 2-4 will be pins\n  params.slice(3).forEach(function(pin) {\n    this.io.pinMode(pin, this.io.MODES.STEPPER);\n  }, this);\n\n  this.io.stepperConfig.apply(this.io, params);\n\n  steppers.get(this.board).push(this);\n\n  state = Step.PROPERTIES.reduce(function(state, key, i) {\n    return (state[key] = typeof opts[key] !== \"undefined\" ? opts[key] : Step.DEFAULTS[i], state);\n  }, {\n    isRunning: false,\n    type: opts.type,\n    pins: this.pins\n  });\n\n  priv.set(this, state);\n\n  Object.defineProperties(this, {\n    type: {\n      get: function() {\n        return state.type;\n      }\n    },\n\n    pins: {\n      get: function() {\n        return state.pins;\n      }\n    }\n  });\n}\n\nObject.defineProperties(Stepper, {\n  TYPE: {\n    value: Object.freeze({\n      DRIVER: 1,\n      TWO_WIRE: 2,\n      FOUR_WIRE: 4\n    })\n  },\n  RUNSTATE: {\n    value: Object.freeze({\n      STOP: 0,\n      ACCEL: 1,\n      DECEL: 2,\n      RUN: 3\n    })\n  },\n  DIRECTION: {\n    value: Object.freeze({\n      CCW: 0,\n      CW: 1\n    })\n  }\n});\n\n/**\n * rpm\n *\n * Gets the rpm value or sets the rpm in revs per minute\n * making an internal conversion to speed in `0.01 * rad/s`\n *\n * @param {Number} rpm Revs per minute\n *\n * NOTE: *rpm* is optional, if missing\n * the method will behave like a getter\n *\n * @return {Stepper} this Chainable method when used as a setter\n */\nStepper.prototype.rpm = function(rpm) {\n  var state = priv.get(this);\n\n  if (typeof rpm === \"undefined\") {\n    return state.rpm;\n  }\n  state.rpm = rpm;\n  state.speed = Math.round(rpm * TAU * 100 / 60);\n  return this;\n};\n\n/**\n * speed\n *\n * Gets the speed value or sets the speed in `0.01 * rad/s`\n * making an internal conversion to rpm\n *\n * @param {Number} speed Speed given in 0.01 * rad/s\n *\n * NOTE: *speed* is optional, if missing\n * the method will behave like a getter\n *\n * @return {Stepper} this Chainable method when used as a setter\n */\nStepper.prototype.speed = function(speed) {\n  var state = priv.get(this);\n\n  if (typeof speed === \"undefined\") {\n    return state.speed;\n  }\n  state.speed = speed;\n  state.rpm = Math.round(speed / TAU / 100 * 60);\n  return this;\n};\n\n[\"direction\", \"accel\", \"decel\"].forEach(function(prop) {\n  Stepper.prototype[prop] = function(value) {\n    var state = priv.get(this);\n\n    if (typeof value === \"undefined\") {\n      return state[prop];\n    }\n    state[prop] = value;\n    return this;\n  };\n});\n\nStepper.prototype.ccw = function() {\n  return this.direction(0);\n};\n\nStepper.prototype.cw = function() {\n  return this.direction(1);\n};\n\n/**\n * step\n *\n * Move stepper motor a number of steps and call the callback on completion\n *\n * @param {Number} stepsOrOpts Steps to move using current settings for speed, accel, etc.\n * @param {Object} stepsOrOpts Options object containing any of the following:\n *    stepsOrOpts = {\n *      steps:\n *      rpm:\n *      speed:\n *      direction:\n *      accel:\n *      decel:\n *    }\n *\n * NOTE: *steps* is required.\n *\n * @param {Function} callback function(err, complete)\n */\nStepper.prototype.step = function(stepsOrOpts, callback) {\n  var steps, step, state, params, isValidStep;\n\n  steps = typeof stepsOrOpts === \"object\" ?\n    (stepsOrOpts.steps || 0) : Math.floor(stepsOrOpts);\n\n  step = new Step(this);\n\n  state = priv.get(this);\n\n  params = [];\n\n  isValidStep = true;\n\n  function failback(error) {\n    isValidStep = false;\n    if (callback) {\n      callback(error);\n    }\n  }\n\n  params.push(steps);\n\n  if (typeof stepsOrOpts === \"object\") {\n    // If an object of property values has been provided,\n    // call the correlating method with the value argument.\n    Step.PROPERTIES.forEach(function(key) {\n      if (typeof stepsOrOpts[key] !== \"undefined\") {\n        this[key](stepsOrOpts[key]);\n      }\n    }, this);\n  }\n\n  if (!state.speed) {\n    this.rpm(state.rpm);\n    step.speed = this.speed();\n  }\n\n\n  // Ensure that the property params are set in the\n  // correct order, but without rpm\n  Step.PROPERTIES.slice(1).forEach(function(key) {\n    params.push(step[key] = this[key]());\n  }, this);\n\n\n  if (steps === 0) {\n    failback(\n      new Error(\n        \"Must set a number of steps when calling `step()`\"\n      )\n    );\n  }\n\n  if (step.direction < 0) {\n    failback(\n      new Error(\n        \"Must set a direction before calling `step()`\"\n      )\n    );\n  }\n\n  if (isValidStep) {\n    state.isRunning = true;\n\n    params.push(function(complete) {\n      state.isRunning = false;\n      callback(null, complete);\n    });\n\n    step.move.apply(step, params);\n  }\n\n  return this;\n};\n\nStep.prototype.move = function(steps, dir, speed, accel, decel, callback) {\n  // Restore the param order... (steps, dir => dir, steps)\n  this.stepper.io.stepperStep.apply(\n    this.stepper.io, [this.stepper.id, dir, steps, speed, accel, decel, callback]\n  );\n};\n\nmodule.exports = Stepper;\n\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/stepper.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/switch.js":
/*!************************************************!*\
  !*** ./node_modules/johnny-five/lib/switch.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\");\nvar Collection = __webpack_require__(/*! ./mixins/collection */ \"./node_modules/johnny-five/lib/mixins/collection.js\");\nvar Emitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar Fn = __webpack_require__(/*! ./fn */ \"./node_modules/johnny-five/lib/fn.js\");\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\n\nvar aliases = {\n  close: [\"close\", \"closed\", \"on\"],\n  open: [\"open\", \"off\"]\n};\n\n\n/**\n * Switch\n * @constructor\n *\n * five.Switch();\n *\n * five.Switch({\n *   pin: 10\n * });\n *\n *\n * @param {Object} opts [description]\n *\n */\n\nfunction Switch(opts) {\n\n  if (!(this instanceof Switch)) {\n    return new Switch(opts);\n  }\n\n  // Create a 5 ms debounce boundary on event triggers\n  // this avoids button events firing on\n  // press noise and false positives\n  var trigger = Fn.debounce(function(key) {\n    aliases[key].forEach(function(type) {\n      this.emit(type, null);\n    }, this);\n  }, 5);\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n  \n  // Resolve the default type to Normally Open\n  opts.type = opts.type || \"NO\";\n\n  // Is this instance Normally Open?\n  var isNormallyOpen = opts.type === \"NO\";\n  var raw = null;\n  var invert = typeof opts.invert !== \"undefined\" ?\n    opts.invert : (isNormallyOpen || false);\n\n  // Logical Defaults\n  var closeValue = 1;\n  var openValue = 0;\n\n  if (invert) {\n    closeValue ^= 1;\n    openValue ^= 1;\n  }\n\n  this.io.pinMode(this.pin, this.io.MODES.INPUT);\n\n  if (isNormallyOpen) {\n    this.io.digitalWrite(this.pin, this.io.HIGH);\n  }\n\n  this.io.digitalRead(this.pin, function(data) {\n    raw = data;\n\n    trigger.call(this, this.isOpen ? \"open\" : \"close\");\n  }.bind(this));\n\n  Object.defineProperties(this, {\n    value: {\n      get: function() {\n        return Number(this.isOpen);\n      }\n    },\n    invert: {\n      get: function() {\n        return invert;\n      },\n      set: function(value) {\n        invert = value;\n        closeValue = invert ? 0 : 1;\n        openValue = invert ? 1 : 0;\n      }\n    },\n    closeValue: {\n      get: function() {\n        return closeValue;\n      },\n      set: function(value) {\n        closeValue = value;\n        openValue = value ^ 1;\n      }\n    },\n    openValue: {\n      get: function() {\n        return openValue;\n      },\n      set: function(value) {\n        openValue = value;\n        closeValue = value ^ 1;\n      }\n    },\n    isOpen: {\n      get: function() {\n        return raw === openValue;\n      }\n    },\n    isClosed: {\n      get: function() {\n        return raw === closeValue;\n      }\n    },\n  });\n}\n\nutil.inherits(Switch, Emitter);\n\n\n/**\n * Fired when the Switch is close\n *\n * @event\n * @name close\n * @memberOf Switch\n */\n\n\n/**\n * Fired when the Switch is opened\n *\n * @event\n * @name open\n * @memberOf Switch\n */\n\n\n/**\n * Switches()\n * new Switches()\n *\n * Constructs an Array-like instance of all servos\n */\n\nfunction Switches(numsOrObjects) {\n  if (!(this instanceof Switches)) {\n    return new Switches(numsOrObjects);\n  }\n\n  Object.defineProperty(this, \"type\", {\n    value: Switch\n  });\n\n  Collection.Emitter.call(this, numsOrObjects);\n}\n\nutil.inherits(Switches, Collection.Emitter);\n\nCollection.installMethodForwarding(\n  Switches.prototype, Switch.prototype\n);\n\n// Assign Switches Collection class as static \"method\" of Switch.\nSwitch.Collection = Switches;\n\n\n\nmodule.exports = Switch;\n\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/switch.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/thermometer.js":
/*!*****************************************************!*\
  !*** ./node_modules/johnny-five/lib/thermometer.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var Emitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\n\nvar Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\");\nvar Fn = __webpack_require__(/*! ./fn */ \"./node_modules/johnny-five/lib/fn.js\");\n\nvar toFixed = Fn.toFixed;\n\nvar CELSIUS_TO_KELVIN = 273.15;\n\nfunction analogHandler(opts, dataHandler) {\n  var pin = opts.pin;\n\n  this.io.pinMode(pin, this.io.MODES.ANALOG);\n  this.io.analogRead(pin, function(data) {\n    dataHandler.call(this, data);\n  }.bind(this));\n}\n\nvar activeDrivers = new Map();\n\nvar Drivers = {\n  MAX31850K: {\n    initialize: {\n      value: function(board, opts) {\n        var CONSTANTS = {\n            TEMPERATURE_FAMILY: 0x3B,\n            CONVERT_TEMPERATURE_COMMAND: 0x44,\n            READ_SCRATCHPAD_COMMAND: 0xBE,\n            READ_COUNT: 9\n          },\n          pin = opts.pin,\n          freq = opts.freq || 100,\n          getAddress, readTemperature, isConversionAvailable, getAddresses, readOne;\n\n        getAddress = function(device) {\n          // 64-bit device code\n          // device[0]    => Family Code\n          // device[1..6] => Serial Number (device[1] is LSB)\n          // device[7]    => CRC\n          var i, result = 0;\n          for (i = 6; i > 0; i--) {\n            result = result * 256 + device[i];\n          }\n          return result;\n        };\n\n        board.io.sendOneWireConfig(pin, true);\n        board.io.sendOneWireSearch(pin, function(err, devices) {\n          if (err) {\n            this.emit(\"error\", err);\n            return;\n          }\n\n          this.devices = devices.filter(function(device) {\n            return device[0] === CONSTANTS.TEMPERATURE_FAMILY;\n          }, this);\n\n          if (devices.length === 0) {\n            this.emit(\"error\", new Error(\"FAILED TO FIND TEMPERATURE DEVICE\"));\n            return;\n          }\n\n          this.devices.forEach(function(device) {\n            this.emit(\"initialized\", getAddress(device));\n          }.bind(this));\n\n          getAddresses = function() {\n            if (this.addresses) {\n              return this.devices.filter(function(device) {\n                var address = getAddress(device);\n                return this.addresses.includes(address);\n              }, this);\n            } else {\n              return [this.devices[0]];\n            }\n          }.bind(this);\n\n          readTemperature = function() {\n            var devicesToWait, devicesToRead, result;\n\n            // request tempeature conversion\n            devicesToWait = getAddresses();\n            devicesToRead = getAddresses();\n\n            devicesToRead.forEach(function(device) {\n              board.io.sendOneWireReset(pin);\n              board.io.sendOneWireWrite(pin, device, CONSTANTS.CONVERT_TEMPERATURE_COMMAND);\n            });\n\n            isConversionAvailable = function(done) {\n              var nextDevice;\n\n              if (devicesToWait.length === 0) {\n                return done();\n              }\n\n              nextDevice = devicesToWait.pop();\n\n              board.io.sendOneWireReset(pin);\n\n              board.io.sendOneWireWriteAndRead(pin, nextDevice, CONSTANTS.READ_SCRATCHPAD_COMMAND, CONSTANTS.READ_COUNT, function(err, data) {\n                if (!data[0]) {\n                  devicesToWait.push(nextDevice);\n\n                  if (data[1] !== 0) { //*****checks if second data bit is 0, if not its an error and gets thrown out\n                    return done();\n                  }\n                }\n\n                isConversionAvailable(done);\n              });\n            }.bind(this);\n\n            readOne = function() {\n              var device;\n\n              if (devicesToRead.length === 0) {\n                setTimeout(readTemperature, freq);\n                return;\n              }\n\n              device = devicesToRead.pop();\n              // read from the scratchpad\n              board.io.sendOneWireReset(pin);\n\n              board.io.sendOneWireWriteAndRead(pin, device, CONSTANTS.READ_SCRATCHPAD_COMMAND, CONSTANTS.READ_COUNT, function(err, data) {\n                if (err) {\n                  this.emit(\"error\", err);\n                  return;\n                }\n\n                result = (data[1] << 8) | data[0];\n                this.emit(\"data\", getAddress(device), result);\n\n                readOne();\n              }.bind(this));\n            }.bind(this);\n\n            isConversionAvailable(readOne);\n          }.bind(this);\n\n          readTemperature();\n        }.bind(this));\n      }\n    },\n    register: {\n      value: function(address) {\n        if (!this.addresses) {\n          this.addresses = [];\n        }\n\n        this.addresses.push(address);\n      }\n    }\n  },\n  DS18B20: {\n    initialize: {\n      value: function(board, opts) {\n        var CONSTANTS = {\n            TEMPERATURE_FAMILY: 0x28,\n            CONVERT_TEMPERATURE_COMMAND: 0x44,\n            READ_SCRATCHPAD_COMMAND: 0xBE,\n            READ_COUNT: 2\n          },\n          pin = opts.pin,\n          freq = opts.freq || 100,\n          getAddress, readThermometer, readOne;\n\n        getAddress = function(device) {\n          // 64-bit device code\n          // device[0]    => Family Code\n          // device[1..6] => Serial Number (device[1] is LSB)\n          // device[7]    => CRC\n          var i, result = 0;\n          for (i = 6; i > 0; i--) {\n            result = result * 256 + device[i];\n          }\n          return result;\n        };\n\n        board.io.sendOneWireConfig(pin, true);\n        board.io.sendOneWireSearch(pin, function(err, devices) {\n          if (err) {\n            this.emit(\"error\", err);\n            return;\n          }\n\n          this.devices = devices.filter(function(device) {\n            return device[0] === CONSTANTS.TEMPERATURE_FAMILY;\n          }, this);\n\n          if (devices.length === 0) {\n            this.emit(\"error\", new Error(\"FAILED TO FIND TEMPERATURE DEVICE\"));\n            return;\n          }\n\n          this.devices.forEach(function(device) {\n            this.emit(\"initialized\", getAddress(device));\n          }.bind(this));\n\n          readThermometer = function() {\n            var devicesToRead, result;\n\n            // request tempeature conversion\n            if (this.addresses) {\n              devicesToRead = this.devices.filter(function(device) {\n                var address = getAddress(device);\n                return this.addresses.includes(address);\n              }, this);\n            } else {\n              devicesToRead = [this.devices[0]];\n            }\n\n            devicesToRead.forEach(function(device) {\n              board.io.sendOneWireReset(pin);\n              board.io.sendOneWireWrite(pin, device, CONSTANTS.CONVERT_TEMPERATURE_COMMAND);\n            });\n\n            // the delay gives the sensor time to do the calculation\n            board.io.sendOneWireDelay(pin, 1);\n\n            readOne = function() {\n              var device;\n\n              if (devicesToRead.length === 0) {\n                setTimeout(readThermometer, freq);\n                return;\n              }\n\n              device = devicesToRead.pop();\n              // read from the scratchpad\n              board.io.sendOneWireReset(pin);\n\n              board.io.sendOneWireWriteAndRead(pin, device, CONSTANTS.READ_SCRATCHPAD_COMMAND, CONSTANTS.READ_COUNT, function(err, data) {\n                if (err) {\n                  this.emit(\"error\", err);\n                  return;\n                }\n\n                result = (data[1] << 8) | data[0];\n                this.emit(\"data\", getAddress(device), result);\n\n                readOne();\n              }.bind(this));\n            }.bind(this);\n\n            readOne();\n          }.bind(this);\n\n          readThermometer();\n        }.bind(this));\n      }\n    },\n    register: {\n      value: function(address) {\n        if (!this.addresses) {\n          this.addresses = [];\n        }\n\n        this.addresses.push(address);\n      }\n    }\n  }\n};\n\nDrivers.get = function(board, driverName, opts) {\n  var drivers, driver;\n\n  if (!activeDrivers.has(board)) {\n    activeDrivers.set(board, {});\n  }\n\n  drivers = activeDrivers.get(board);\n\n  var key = driverName + \"_\" + opts.pin;\n\n  if (!drivers[key]) {\n    driver = new Emitter();\n    Object.defineProperties(driver, Drivers[driverName]);\n    driver.initialize(board, opts);\n    drivers[key] = driver;\n  }\n\n  return drivers[key];\n};\n\nDrivers.clear = function() {\n  activeDrivers.clear();\n};\n\n// References\n//\nvar Controllers = {\n  // Generic thermistors. See datasheet for each device.\n  ANALOG: {\n    initialize: {\n      value: analogHandler\n    }\n  },\n\n  LM35: {\n    initialize: {\n      value: analogHandler\n    },\n    toCelsius: {\n      value: function(raw) {\n        // VOUT = 1500 mV at 150°C\n        // VOUT = 250 mV at 25°C\n        // VOUT = –550 mV at –55°C\n\n        var mV = this.aref * 1000 * raw / 1023;\n\n        // 10mV = 1°C\n        //\n        // Page 1\n        return Math.round(mV / 10);\n      }\n    }\n  },\n\n  LM335: {\n    initialize: {\n      value: analogHandler\n    },\n    toCelsius: {\n      value: function(raw) {\n        // OUTPUT 10mV/°K\n\n        var mV = this.aref * 1000 * raw / 1023;\n\n        // Page 1\n        return Math.round((mV / 10) - CELSIUS_TO_KELVIN);\n      }\n    }\n  },\n\n  TMP36: {\n    initialize: {\n      value: analogHandler\n    },\n    toCelsius: {\n      value: function(raw) {\n        // Analog Reference Voltage\n        var mV = this.aref * 1000 * raw / 1023;\n\n        // tempC = (mV / 10) - 50\n        //\n        // Page 3\n        // Table 1\n        // Accuracy 1°C\n        return Math.round((mV / 10) - 50);\n      }\n    }\n  },\n\n  TMP102: {\n    ADDRESSES: {\n      value: [0x48]\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var address = opts.address || this.ADDRESSES[0];\n\n        opts.address = address;\n\n        this.io.i2cConfig(opts);\n\n        // Addressing is unclear.\n\n        this.io.i2cRead(address, 0x00, 2, function(data) {\n          // Based on the example code from https://www.sparkfun.com/products/11931\n          var raw = ((data[0] << 8) | data[1]) >> 4;\n\n          // The tmp102 does twos compliment but has the negative bit in the wrong spot, so test for it and correct if needed\n          if (raw & (1 << 11)) {\n            raw |= 0xF800; // Set bits 11 to 15 to 1s to get this reading into real twos compliment\n          }\n\n          // twos compliment\n          raw = raw >> 15 ? ((raw ^ 0xFFFF) + 1) * -1 : raw;\n\n          dataHandler(raw);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // 6.5 Electrical Characteristics\n        // –25°C to 85°C ±0.5\n        return toFixed(raw / 16, 1);\n      }\n    },\n  },\n\n  MAX31850K: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this),\n          address = opts.address,\n          driver = Drivers.get(this.board, \"MAX31850K\", opts);\n\n        if (address) {\n          state.address = address;\n          driver.register(address);\n        } else {\n          if (driver.addressless) {\n            this.emit(\"error\", \"You cannot have more than one MAX31850K without an address\");\n          }\n          driver.addressless = true;\n        }\n\n        driver.once(\"initialized\", function(dataAddress) {\n          if (!state.address) {\n            state.address = dataAddress;\n          }\n        });\n\n        driver.on(\"data\", function(dataAddress, data) {\n          if (!address || dataAddress === address) {\n            dataHandler(data);\n          }\n        }.bind(this));\n      }\n    },\n    toCelsius: {\n      // Page 4\n      // Thermocouple Temperature Data Resolution\n      value: function(raw) {\n        return toFixed(raw / 16, 2);\n      }\n    },\n    address: {\n      get: function() {\n        return priv.get(this).address || 0x00;\n      }\n    }\n  },\n\n  // Based on code from Westin Pigott:\n  //    https://github.com/westinpigott/one-wire-temps\n  // And the datasheet:\n  // OneWire protocol.  The device needs to be issued a \"Convert Temperature\"\n  // command which can take up to 10 microseconds to compute, so we need\n  // tell the board to delay 1 millisecond before issuing the \"Read Scratchpad\" command\n  //\n  // This device requires the OneWire support enabled via ConfigurableFirmata\n  DS18B20: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this),\n          address = opts.address,\n          driver = Drivers.get(this.board, \"DS18B20\", opts);\n\n        if (address) {\n          state.address = address;\n          driver.register(address);\n        } else {\n          if (driver.addressless) {\n            this.emit(\"error\", \"You cannot have more than one DS18B20 without an address\");\n          }\n          driver.addressless = true;\n        }\n\n        driver.once(\"initialized\", function(dataAddress) {\n          if (!state.address) {\n            state.address = dataAddress;\n          }\n        });\n\n        driver.on(\"data\", function(dataAddress, data) {\n          if (!address || dataAddress === address) {\n            dataHandler(data);\n          }\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // ±0.5°C accuracy from -10°C to +85°C\n        //\n        // Temp resolution is as follows:\n        // 9b,    10b     11b,     12b\n        // 0.5°C, 0.25°C, 0.125°C, 0.0625°C\n        //\n        // I'm not sure which we're reading, so default to 4\n        // fractional digits until we can verify\n        return toFixed(raw / 16, 4);\n      }\n    },\n    address: {\n      get: function() {\n        return priv.get(this).address || 0x00;\n      }\n    }\n  },\n\n\n  SHT31D: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = Multi.Drivers.get(this.board, \"SHT31D\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.temperature);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // Page 4, Table 1.2 Temperature Sensor Performance\n        // Resolution: 0.015\n        //\n        // Page 14\n        // 4.13 Conversion of Signal Output\n        // T[C] = -45 + 175 * (St / ((2 ** 26) - 1))\n        // St = Sensor raw temperature\n        return toFixed((175 * raw / 65535) - 45, 3);\n      }\n    }\n  },\n\n  HTU21D: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = Multi.Drivers.get(this.board, \"HTU21D\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.temperature);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // Page 5\n        // Digital Relative Humidity sensor with Temperature output\n        // Resolution shows 0.01-0.04\n        //\n        // Page 15\n        // CONVERSION OF SIGNAL OUTPUTS\n        // T = -46.85 + 175.72 * (Stemp / (2 ** 16))\n        // Stemp = Sensor raw temperature\n        return toFixed((175.72 * raw / 65536) - 46.85, 2);\n      }\n    }\n  },\n  HIH6130: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = Multi.Drivers.get(this.board, \"HIH6130\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.temperature);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // Page 3\n        // 5.0 Calculation of Optional Temperature\n        // from the Digital Output\n        //\n        // -40 C = 0\n        // 125 C = 2 ** 14 - 1\n        return Math.round(raw / 1000);\n      }\n    }\n  },\n\n  DHT_I2C_NANO_BACKPACK: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = Multi.Drivers.get(this.board, \"DHT_I2C_NANO_BACKPACK\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.temperature);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // Page 2\n        // 5. Product parameters\n        // Range: ... ±2°C\n        return Math.round(raw / 100);\n      }\n    }\n  },\n\n  TH02: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = Multi.Drivers.get(this.board, \"TH02\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.temperature);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // Page 8, Table 5\n        // Temperature Sensor\n        // Accuracy Typical at 25 °C — ±0.5 ±1.0 °C\n        return toFixed(raw, 1);\n      }\n    }\n  },\n\n  MPU6050: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var IMU = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = IMU.Drivers.get(this.board, \"MPU6050\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.temperature);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // No sub-degree/fractional parts illustrated in datasheet\n        return Math.round((raw / 340.00) + 36.53);\n      }\n    }\n  },\n\n  BNO055: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var IMU = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = IMU.Drivers.get(this.board, \"BNO055\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.temperature);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // Page 37, Table 3-37\n        // Temperature data representation\n        // 1°C = 1 LSB\n        // raw is already C\n        return Math.trunc(raw);\n      }\n    }\n  },\n\n  MPL115A2: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = Multi.Drivers.get(this.board, \"MPL115A2\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.temperature);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // No description, so removing fractional parts\n        return Math.trunc((raw - 498) / -5.35 + 25);\n      }\n    }\n  },\n\n  MPL3115A2: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = Multi.Drivers.get(this.board, \"MPL3115A2\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.temperature);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // Page 5\n        // Table 2 Mechanical Characteristics\n        // Accuracy @ 25 °C ±1°C\n        return Math.round(raw / 16);\n      }\n    }\n  },\n\n  MS5611: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = Multi.Drivers.get(this.board, \"MS5611\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.temperature);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // Page 1\n        // TECHNICAL DATA\n        // Resolution <0.01 °C\n        return toFixed(raw, 2);\n      }\n    }\n  },\n\n  GROVE: {\n    initialize: {\n      value: analogHandler\n    },\n    toCelsius: {\n      value: function(raw) {\n        // http://www.seeedstudio.com/wiki/Grove_-_Temperature_Sensor\n        var adcres = 1023;\n        // Beta parameter\n        var beta = 3975;\n        // 10 kOhm (sensor resistance)\n        var rb = 10000;\n        // Ginf = 1/Rinf\n        // var ginf = 120.6685;\n        // Reference Temperature 25°C\n        var tempr = 298.15;\n\n        var rthermistor = (adcres - raw) * rb / raw;\n        var tempc = 1 / (Math.log(rthermistor / rb) / beta + 1 / tempr) - CELSIUS_TO_KELVIN;\n\n        return Math.round(tempc);\n      }\n    }\n  },\n\n  // MF52A103J3470\n  TINKERKIT: {\n    initialize: {\n      value: analogHandler\n    },\n    toCelsius: {\n      value: function(raw) {\n        var adcres = 1023;\n        var beta = 3950;\n        var rb = 10000; // 10 kOhm\n        var ginf = 120.6685; // Ginf = 1/Rinf\n\n        var rthermistor = rb * (adcres / raw - 1);\n        var tempc = beta / (Math.log(rthermistor * ginf));\n\n        return Math.round(tempc - CELSIUS_TO_KELVIN);\n      }\n    }\n  },\n\n  BMP180: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = Multi.Drivers.get(this.board, \"BMP180\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.temperature);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // Page 6, Table 1\n        // Operating conditions, output signal and mechanical characteristics\n        //\n        // Resolution of output data\n        // pressure 0.01 hPa\n        // temperature 0.1 °C\n        return toFixed(raw, 1);\n      }\n    }\n  },\n\n  BMP280: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = Multi.Drivers.get(this.board, \"BMP280\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.temperature);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // Page 8\n        //\n        // Resolution of output data in ultra high resolution mode*\n        // Pressure 0.0016 hPa\n        // Temperature 0.01 °C\n        //\n        // * resolution mode is currently not configurable.\n        //\n        return toFixed(raw, 2);\n      }\n    }\n  },\n\n  BME280: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = Multi.Drivers.get(this.board, \"BME280\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.temperature);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // Page 23\n        // Resolution is 0.01 DegC.\n        return toFixed(raw, 2);\n      }\n    }\n  },\n\n  SI7020: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = Multi.Drivers.get(this.board, \"SI7020\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.temperature);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // Page 9, Table 5. Temperature Sensor\n        // Accuracy1 –10 °C< tA < 85 °C — ±0.3 ±0.4 °C\n        //\n        // Page 23\n        // (See temperature conversion expression)\n        return toFixed((175.72 * raw / 65536) - 46.85, 1);\n      }\n    }\n  },\n\n  MCP9808: {\n    ADDRESSES: {\n      value: [0x18]\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var address = opts.address || this.ADDRESSES[0];\n\n        opts.address = address;\n\n        this.io.i2cConfig(opts);\n        // Page 17\n        // Register 0x05 = Ta (Temp, Ambient)\n        this.io.i2cRead(address, 0x05, 2, function(data) {\n          // Page 24\n          // 5.1.3 AMBIENT TEMPERATURE REGISTER (TA)\n          var raw = (data[0] << 8) | data[1];\n\n          // Page 25\n          raw = (raw & 0x0FFF) / 16;\n\n          if (raw & 0x1000) {\n            raw -= 256;\n          }\n          dataHandler(raw);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // Page 1\n        // Microchip Technology Inc.s MCP9808 digital\n        // temperature sensor converts temperatures between\n        // -20°C and +100°C to a digital word with\n        // ±0.25°C/±0.5°C (typical/maximum) accuracy.\n        return toFixed(raw, 2);\n      }\n    },\n  },\n\n  LSM303C: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = __webpack_require__(/*! ./imu */ \"./node_modules/johnny-five/lib/imu.js\");\n        var driver = Multi.Drivers.get(this.board, \"LSM303C\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.temperature);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // int16 resolution, 8 bits per C, 0 = 25 C\n        return toFixed((raw / 8) + 25, 1);\n      }\n    }\n  },\n};\n\nControllers.BMP085 = Controllers.BMP180;\nControllers.GY521 = Controllers.MPU6050;\nControllers.SI7021 = Controllers.SI7020;\nControllers.DHT11_I2C_NANO_BACKPACK = Controllers.DHT_I2C_NANO_BACKPACK;\nControllers.DHT21_I2C_NANO_BACKPACK = Controllers.DHT_I2C_NANO_BACKPACK;\nControllers.DHT22_I2C_NANO_BACKPACK = Controllers.DHT_I2C_NANO_BACKPACK;\n\n\nvar priv = new Map();\n\nfunction Thermometer(opts) {\n\n  if (!(this instanceof Thermometer)) {\n    return new Thermometer(opts);\n  }\n\n  var controller = null;\n  var last = null;\n  var raw = null;\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  // Analog Reference Voltage (default to board.io.aref || 5)\n  this.aref = opts.aref || this.io.aref || 5;\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    controller = Controllers.ANALOG;\n  }\n\n  var state = {\n    enabled: typeof opts.enabled === \"undefined\" ? true : opts.enabled,\n    intervalId: null,\n    freq: opts.freq || 25,\n    previousFreq: opts.freq || 25,\n  };\n  priv.set(this, state);\n\n  Board.Controller.call(this, controller, opts);\n\n  if (!this.toCelsius) {\n    this.toCelsius = opts.toCelsius || function(x) {\n      return x;\n    };\n  }\n\n  // TODO: Move this out of the constructor\n  var eventProcessing = function() {\n    if (raw == null) {\n      return;\n    }\n\n    var data = {};\n    data.C = data.celsius = this.celsius;\n    data.F = data.fahrenheit = this.fahrenheit;\n    data.K = data.kelvin = this.kelvin;\n\n    this.emit(\"data\", data);\n\n    if (this.celsius !== last) {\n      last = this.celsius;\n      this.emit(\"change\", data);\n    }\n  }.bind(this);\n\n  var descriptors = {\n    celsius: {\n      get: function() {\n        return this.toCelsius(raw);\n      }\n    },\n    fahrenheit: {\n      get: function() {\n        return toFixed((this.celsius * 9 / 5) + 32, 2);\n      }\n    },\n    kelvin: {\n      get: function() {\n        return toFixed(this.celsius + CELSIUS_TO_KELVIN, 2);\n      }\n    },\n    freq: {\n      get: function() {\n        return state.freq;\n      },\n      set: function(newFreq) {\n        state.freq = newFreq;\n        if (state.intervalId) {\n          clearInterval(state.intervalId);\n        }\n\n        if (state.freq !== null) {\n          state.intervalId = setInterval(eventProcessing, newFreq);\n        }\n      }\n    },\n  };\n  // Convenience aliases\n  descriptors.C = descriptors.celsius;\n  descriptors.F = descriptors.fahrenheit;\n  descriptors.K = descriptors.kelvin;\n\n  Object.defineProperties(this, descriptors);\n\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts, function(data) {\n      raw = data;\n    });\n  }\n\n  // Set the freq property only after the get and set functions are defined\n  // and only if the sensor is not `enabled: false`\n  if (state.enabled) {\n    this.freq = state.freq;\n  }\n}\n\nutil.inherits(Thermometer, Emitter);\n\n/**\n * enable Enable a disabled thermometer.\n *\n * @return {Object} instance\n *\n */\nThermometer.prototype.enable = function() {\n  var state = priv.get(this);\n\n  /* istanbul ignore else */\n  if (!state.enabled) {\n    this.freq = state.freq || state.previousFreq;\n  }\n\n  return this;\n};\n\n/**\n * disable Disable an enabled thermometer.\n *\n * @return {Object} instance\n *\n */\nThermometer.prototype.disable = function() {\n  var state = priv.get(this);\n\n  /* istanbul ignore else */\n  if (state.enabled) {\n    state.enabled = false;\n    state.previousFreq = state.freq;\n    this.freq = null;\n  }\n\n  return this;\n};\n\nThermometer.Drivers = Drivers;\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Thermometer.Controllers = Controllers;\n  Thermometer.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = Thermometer;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/thermometer.js?");

/***/ }),

/***/ "./node_modules/johnny-five/lib/wii.js":
/*!*********************************************!*\
  !*** ./node_modules/johnny-five/lib/wii.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Board = __webpack_require__(/*! ./board */ \"./node_modules/johnny-five/lib/board.js\"),\n  events = __webpack_require__(/*! events */ \"./node_modules/events/events.js\"),\n  util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\n\nvar Devices, Change, Update;\n\n// Event type alias map\nvar aliases = {\n  down: [\"down\", \"press\", \"tap\", \"impact\", \"hit\"],\n  up: [\"up\", \"release\"],\n  hold: [\"hold\"]\n};\n\n// all private instances\nvar priv = new Map();\n\n// hold time out for buttons.\nvar holdTimeout = new Map();\n\n// keeps data between cycles and fires change event\n// if data changes\nvar last = new Map();\n\n\n\n\n/**\n * Wii\n * @constructor\n *\n * five.Wii({\n *   device: \"RVL-004\",\n *   holdtime: ms before firing a hold event on a button,\n *   freq: ms to throttle the read data loop\n *   threshold: difference of change to qualify for a change event\n *  });\n *\n * Available events:\n *    \"data\" - firehose.\n *    \"down\", \"press\", \"tap\", \"impact\", \"hit\" - button press\n *    \"up\", \"release\" - button release\n *    \"hold\" - button hold\n *\n * @param {Object} opts [description]\n *\n */\n\nfunction Wii(opts) {\n  /* istanbul ignore if */\n  if (!(this instanceof Wii)) {\n    return new Wii(opts);\n  }\n\n  Board.Component.call(this, opts);\n\n  // Derive device definition from Devices\n  var device = Devices[opts.device];\n  var address = device.address;\n  var bytes = device.bytes;\n  var delay = device.delay;\n  var data = device.data.bind(this);\n  var setup = device.setup;\n  var preread = device.preread;\n\n  // Wii controller instance properties\n  this.freq = opts.freq || 100;\n\n  // Button instance properties\n  this.holdtime = opts.holdtime || 500;\n  this.threshold = opts.threshold || 10;\n\n  // Initialize components\n  device.initialize.call(this);\n\n  // Set initial \"last data\" byte array\n  last.set(this, [0, 0, 0, 0, 0, 0, 0]);\n\n  // Set up I2C data connection\n  this.io.i2cConfig(opts);\n\n  // Iterate and write each set of setup instructions\n  setup.forEach(function(bytes) {\n    this.io.i2cWrite(address, bytes);\n  }, this);\n\n  // Unthrottled i2c read request loop\n  setInterval(function() {\n\n    // Send this command to get all sensor data and store into\n    // the 6-byte register within Wii controller.\n    // This must be execute before reading data from the Wii.\n\n    // Iterate and write each set of setup instructions\n    preread.forEach(function(bytes) {\n      this.io.i2cWrite(address, bytes);\n    }, this);\n\n\n    // Request six bytes of data from the controller\n    this.io.i2cReadOnce(address, bytes, data);\n\n    // Use the high-frequency data read loop as the change event\n    // emitting loop. This drastically improves change event\n    // frequency and sensitivity\n    //\n    // Emit change events if any delta is greater than\n    // the threshold\n\n    // RVL-005 does not have a read method at this time.\n    /* istanbul ignore else */\n    if (typeof device.read !== \"undefined\") {\n      device.read.call(this);\n    }\n  }.bind(this), delay || this.freq);\n\n  // Throttled \"read\" event loop\n  setInterval(function() {\n    var event = new Board.Event({\n      target: this\n    });\n\n    this.emit(\"data\", event);\n\n  }.bind(this), this.freq);\n}\n\nWii.Components = {};\n\n// A nunchuck button (c or z.)\nWii.Components.Button = function(which, controller) {\n  /* istanbul ignore if */\n  if (!(this instanceof Wii.Components.Button)) {\n    return new Wii.Components.Button(which, controller);\n  }\n\n  // c or z.\n  this.which = which;\n\n  // reference to parent controller\n  this.controller = controller;\n\n  // Set initial values for state tracking\n  var state = {\n    isDown: false\n  };\n  priv.set(this, state);\n\n  Object.defineProperties(this, {\n    // is the button up (not pressed)?\n    isUp: {\n      get: function() {\n        return !state.isDown;\n      }\n    },\n\n    // is the button pressed?\n    isDown: {\n      get: function() {\n        return state.isDown;\n      }\n    }\n  });\n};\n\nWii.Components.Joystick = function(controller) {\n  /* istanbul ignore if */\n  if (!(this instanceof Wii.Components.Joystick)) {\n    return new Wii.Components.Joystick(controller);\n  }\n\n  this.controller = controller;\n\n  var state, accessors;\n\n  // Initialize empty state object\n  state = {};\n\n  // Initialize empty accessors object\n  accessors = {};\n\n  // Enumerate Joystick properties\n  [\"x\", \"y\", \"dx\", \"dy\"].forEach(function(key) {\n\n    state[key] = 0;\n\n    // Define accessors for each property in Joystick list\n    accessors[key] = {\n      get: function() {\n        return state[key];\n      }\n    };\n  }, this);\n\n  // Store private state cache\n  priv.set(this, state);\n\n  // Register newly defined accessors\n  Object.defineProperties(this, accessors);\n};\n\nWii.Components.Accelerometer = function(controller) {\n  /* istanbul ignore if */\n  if (!(this instanceof Wii.Components.Accelerometer)) {\n    return new Wii.Components.Accelerometer(controller);\n  }\n\n  this.controller = controller;\n\n  var state, accessors;\n\n  // Initialize empty state object\n  state = {};\n\n  // Initialize empty accessors object\n  accessors = {};\n\n  // Enumerate Joystick properties\n  [\"x\", \"y\", \"z\", \"dx\", \"dy\", \"dz\"].forEach(function(key) {\n\n    state[key] = 0;\n\n    // Define accessors for each property in Joystick list\n    accessors[key] = {\n      get: function() {\n        return state[key];\n      }\n    };\n  }, this);\n\n  // Store private state cache\n  priv.set(this, state);\n\n  // Register newly defined accessors\n  Object.defineProperties(this, accessors);\n};\n\nutil.inherits(Wii, events.EventEmitter);\nutil.inherits(Wii.Components.Button, events.EventEmitter);\nutil.inherits(Wii.Components.Joystick, events.EventEmitter);\nutil.inherits(Wii.Components.Accelerometer, events.EventEmitter);\n\n\n// Regular Wiimote driver bytes will be encoded 0x17\n\nfunction decodeByte(x) {\n  return (x ^ 0x17) + 0x17;\n}\n\n// Change handlers for disparate controller event types\n//\n// Note: Change.* methods are |this| sensitive,\n// therefore, call sites must use:\n//\n//    Change.button.call( instance, data );\n//\n//    Change.component.call( instance, data );\n//\n//\nChange = {\n\n  // Fire a \"down\", \"up\" or \"hold\" (and aliases) event\n  // for a button context\n  button: function(key) {\n    // |this| is button context set by calling as:\n    // Change.button.call( button instance, event key );\n    //\n\n    // Enumerate all button event aliases,\n    // fire matching types\n    aliases[key].forEach(function(type) {\n      var event = new Board.Event({\n        // |this| value is a button instance\n        target: this,\n        type: type\n      });\n\n      // fire button event on the button itself\n      this.emit(type, event);\n\n      // fire button event on the controller\n      this.controller.emit(type, event);\n    }, this);\n  },\n\n  // Fire a \"change\" event on a component context\n  component: function(coordinate) {\n    // |this| is component context set by calling as:\n    // Change.component.call( component instance, coordinate, val );\n    //\n\n    [\"axischange\", \"change\"].forEach(function(type) {\n      var event;\n\n      if (this._events && this._events[type]) {\n        event = new Board.Event({\n          // |this| value is a button instance\n          target: this,\n          type: type,\n          axis: coordinate,\n          // Check dx/dy/dz change to determine direction\n          direction: this[\"d\" + coordinate] < 0 ? -1 : 1\n        });\n\n        // Fire change event on actual component\n        this.emit(type, event);\n\n        // Fire change on controller\n        this.controller.emit(type, event);\n      }\n    }, this);\n  }\n};\n\n// Update handlers for disparate controller event types\n//\n// Note: Update.* methods are |this| sensitive,\n// therefore, call sites must use:\n//\n//    Update.button.call( button instance, boolean down );\n//\n//    Update.component.call( component instance, coordinate, val );\n//\n//\n\nUpdate = {\n  // Set \"down\" state for button context.\n  button: function(isDown) {\n    // |this| is button context set by calling as:\n    // Update.button.call( button instance, boolean down );\n    //\n\n    var state, isFireable;\n\n    // Derive state from private cache\n    state = priv.get(this);\n\n    // if this is a state change, mark this\n    // change as fireable.\n    isFireable = false;\n\n    if (isDown !== state.isDown) {\n      isFireable = true;\n    }\n\n    state.isDown = isDown;\n\n    if (isFireable) {\n      // start hold timeout for broadcasting hold.\n      holdTimeout.set(this, setTimeout(function() {\n        if (state.isDown) {\n          Change.button.call(this, \"hold\");\n        }\n      }.bind(this), this.controller.holdtime));\n\n      Change.button.call(this, isDown ? \"down\" : \"up\");\n    }\n  },\n\n  // Set \"coordinate value\" state for component context.\n  component: function(coordinate, val) {\n    // |this| is component context set by calling as:\n    // Update.component.call( component instance, coordinate, val );\n    //\n\n    var state = priv.get(this);\n    state[\"d\" + coordinate] = val - state[coordinate];\n    state[coordinate] = val;\n  }\n};\n\n\nDevices = {\n\n  // Nunchuk\n  \"RVL-004\": {\n    address: 0x52,\n    bytes: 6,\n    delay: 100,\n    setup: [\n      [0x40, 0x00]\n    ],\n    preread: [\n      [0x00]\n    ],\n    // device.read.call(this);\n    read: function() {\n      var axes = [\"x\", \"y\", \"z\"];\n\n      [\n        this.joystick,\n        this.accelerometer\n      ].forEach(function(component) {\n        axes.forEach(function(axis) {\n          var delta = \"d\" + axis;\n          if (typeof component[delta] !== \"undefined\") {\n            if (Math.abs(component[delta]) > this.threshold) {\n              Change.component.call(component, axis);\n            }\n          }\n        }, this);\n      }, this);\n    },\n    // Call as:\n    // device.initialize.call(this);\n    initialize: function() {\n      this.joystick = new Wii.Components.Joystick(this);\n      this.accelerometer = new Wii.Components.Accelerometer(this);\n      this.c = new Wii.Components.Button(\"c\", this);\n      this.z = new Wii.Components.Button(\"z\", this);\n    },\n    data: function(data) {\n      // TODO: Shift state management to weakmap, this\n      //       should only update an entry in the map\n      //\n\n      if (data[0] !== 254 && data[1] !== 254 && data[2] !== 254) {\n\n        // Byte 0x00 :  X-axis data of the joystick\n        Update.component.call(\n          this.joystick,\n          \"x\", decodeByte(data[0]) << 2\n        );\n\n        // Byte 0x01 :  Y-axis data of the joystick\n        Update.component.call(\n          this.joystick,\n          \"y\", decodeByte(data[1]) << 2\n        );\n\n        // Byte 0x02 :  X-axis data of the accellerometer sensor\n        Update.component.call(\n          this.accelerometer,\n          \"x\", decodeByte(data[2]) << 2\n        );\n\n        // Byte 0x03 :  Y-axis data of the accellerometer sensor\n        Update.component.call(\n          this.accelerometer,\n          \"y\", decodeByte(data[3]) << 2\n        );\n\n        // Byte 0x04 :  Z-axis data of the accellerometer sensor\n        Update.component.call(\n          this.accelerometer,\n          \"z\", decodeByte(data[4]) << 2\n        );\n\n        // Update Z button\n        // Grab the first bit of the sixth byte\n        Update.button.call(\n          this.z, (decodeByte(data[5]) & 0x01) === 0\n        );\n\n        // Update C button\n        // Grab the second bit of the sixth byte\n        Update.button.call(\n          this.c, (decodeByte(data[5]) & 0x02) === 0\n        );\n\n        // Update last data array cache\n        last.set(this, data);\n      }\n    }\n  },\n\n  // Classic Controller\n  \"RVL-005\": {\n    address: 0x52,\n    bytes: 6,\n    delay: 100,\n    setup: [\n      [0x40, 0x00]\n    ],\n    preread: [\n      [0x00]\n    ],\n\n    // read: function( this ) {\n    //   var axes = [ \"x\", \"y\", \"z\" ];\n\n    //   [ this.joystick.left, this.joystick.right ].forEach(function( component ) {\n    //     axes.forEach( function( axis ) {\n    //       var delta = \"d\" + axis;\n    //       if ( typeof component[ delta ] !== \"undefined\" ) {\n    //         if ( Math.abs( component[ delta ] ) > this.threshold ) {\n    //           Change.component.call( component, axis );\n    //         }\n    //       }\n    //     }, this );\n    //   }, this );\n    // },\n    initialize: function() {\n\n      this.joystick = {\n        left: new Wii.Components.Joystick(this),\n        right: new Wii.Components.Joystick(this)\n      };\n\n      // obj.direction_pad = new Wii.DirectionPad( obj );\n      [\n        \"y\", \"x\", \"up\", \"down\", \"left\", \"right\",\n        \"a\", \"b\", \"l\", \"r\", \"zl\", \"zr\", \"start\", \"home\", \"select\"\n      ].forEach(function(id) {\n\n        this[id] = new Wii.Components.Button(id, this);\n\n      }, this);\n    },\n    data: function(data) {\n      // TODO: Shift state management to weakmap, this\n      //       should only update an entry in the map\n      if (data[0] !== 254 && data[1] !== 254 && data[2] !== 254) {\n\n        // LEFT/RIGHT\n        Update.button.call(\n          this.l, (decodeByte(data[4]) & 0x20) === 0\n        );\n\n        Update.button.call(\n          this.r, (decodeByte(data[4]) & 0x02) === 0\n        );\n\n        // Direction\n        Update.button.call(\n          this.up, (decodeByte(data[5]) & 0x01) === 0\n        );\n\n        Update.button.call(\n          this.left, (decodeByte(data[5]) & 0x02) === 0\n        );\n\n        Update.button.call(\n          this.down, (decodeByte(data[4]) & 0x40) === 0\n        );\n\n        Update.button.call(\n          this.right, (decodeByte(data[4]) & 0x80) === 0\n        );\n\n        // Z*\n        Update.button.call(\n          this.zr, (decodeByte(data[5]) & 0x04) === 0\n        );\n\n        Update.button.call(\n          this.zl, (decodeByte(data[5]) & 0x80) === 0\n        );\n\n        // X/Y\n        Update.button.call(\n          this.x, (decodeByte(data[5]) & 0x08) === 0\n        );\n\n        Update.button.call(\n          this.y, (decodeByte(data[5]) & 0x20) === 0\n        );\n\n        // A/B\n        Update.button.call(\n          this.a, (decodeByte(data[5]) & 0x10) === 0\n        );\n\n        Update.button.call(\n          this.b, (decodeByte(data[5]) & 0x40) === 0\n        );\n\n        // MENU\n        Update.button.call(\n          this.select, (decodeByte(data[4]) & 0x10) === 0\n        );\n\n        Update.button.call(\n          this.start, (decodeByte(data[4]) & 0x04) === 0\n        );\n\n        Update.button.call(\n          this.home, (decodeByte(data[4]) & 0x08) === 0\n        );\n\n\n        Update.component.call(\n          this.joystick.left,\n          \"x\", decodeByte(data[0]) & 0x3f\n        );\n\n        // Byte 0x01 :  Y-axis data of the joystick\n        Update.component.call(\n          this.joystick.left,\n          \"y\", decodeByte(data[0]) & 0x3f\n        );\n\n        Update.component.call(\n          this.joystick.right,\n          \"x\", ((data[0] & 0xc0) >> 3) + ((data[1] & 0xc0) >> 5) + ((data[2] & 0x80) >> 7)\n        );\n\n        Update.component.call(\n          this.joystick.right,\n          \"y\", data[2] & 0x1f\n        );\n\n        // Update last data array cache\n        last.set(this, data);\n      }\n    }\n  }\n};\n\n\nWii.Nunchuk = function(opts) {\n  opts = opts || {};\n  opts.device = \"RVL-004\";\n\n  return new Wii(opts);\n};\n\nWii.Classic = function(opts) {\n  opts = opts || {};\n  opts.device = \"RVL-005\";\n\n  return new Wii(opts);\n};\n\nmodule.exports = Wii;\n\n\n//# sourceURL=webpack:///./node_modules/johnny-five/lib/wii.js?");

/***/ }),

/***/ "./node_modules/johnny-five/node_modules/firmata/lib/com.js":
/*!******************************************************************!*\
  !*** ./node_modules/johnny-five/node_modules/firmata/lib/com.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Buffer, process) {\n\nconst Emitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\n\nfunction Mock(path, options, openCallback) {\n  this.isOpen = true;\n  this.baudRate = 0;\n  this.path = path;\n}\n\nMock.prototype = Object.create(Emitter.prototype, {\n  constructor: {\n    value: Mock\n  }\n});\n\nMock.prototype.write = function (buffer) {\n  // Tests are written to work with arrays not buffers\n  // this shouldn't impact the data, just the container\n  // This also should be changed in future test rewrites\n  if (Buffer.isBuffer(buffer)) {\n    buffer = Array.from(buffer);\n  }\n\n  this.lastWrite = buffer;\n  this.emit(\"write\", buffer);\n};\n\nlet com;\nlet sp;\nlet stub = {\n  SerialPort: Mock,\n  list() {\n    return Promise.resolve([]);\n  },\n};\n\ntry {\n  /* istanbul ignore if */\n  if (process.browser || parseFloat(process.versions.nw) >= 0.13) {\n    com = __webpack_require__(/*! browser-serialport */ \"./node_modules/browser-serialport/index.js\");\n  } else {\n    /* istanbul ignore else */\n    if (process.env.IS_TEST_MODE) {\n      com = stub;\n    } else {\n      sp = __webpack_require__(/*! serialport */ \"./src/noop.js\");\n      com = {\n        SerialPort: sp,\n        list: sp.list,\n      };\n    }\n  }\n} catch (err) {}\n\n\n/* istanbul ignore if */\nif (com == null) {\n  if (process.env.IS_TEST_MODE) {\n    com = stub;\n  } else {\n    console.log(\"It looks like serialport didn't compile properly. This is a common problem and its fix is well documented here https://github.com/voodootikigod/node-serialport#to-install\");\n    console.log(\"The result of requiring the package is: \", sp);\n    throw \"Missing serialport dependency\";\n  }\n}\n\nmodule.exports = com;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer, __webpack_require__(/*! ./../../../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/node_modules/firmata/lib/com.js?");

/***/ }),

/***/ "./node_modules/johnny-five/node_modules/firmata/lib/encoder7bit.js":
/*!**************************************************************************!*\
  !*** ./node_modules/johnny-five/node_modules/firmata/lib/encoder7bit.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * \"Inspired\" by Encoder7Bit.h/Encoder7Bit.cpp in the\n * Firmata source code.\n */\nmodule.exports = {\n  to7BitArray(data) {\n    let shift = 0;\n    let previous = 0;\n    const output = [];\n\n    data.forEach(byte => {\n      if (shift === 0) {\n        output.push(byte & 0x7f);\n        shift++;\n        previous = byte >> 7;\n      } else {\n        output.push(((byte << shift) & 0x7f) | previous);\n        if (shift === 6) {\n          output.push(byte >> 1);\n          shift = 0;\n        } else {\n          shift++;\n          previous = byte >> (8 - shift);\n        }\n      }\n    });\n\n    if (shift > 0) {\n      output.push(previous);\n    }\n\n    return output;\n  },\n  from7BitArray(encoded) {\n    const expectedBytes = (encoded.length) * 7 >> 3;\n    const decoded = [];\n\n    for (let i = 0; i < expectedBytes; i++) {\n      const j = i << 3;\n      const pos = parseInt(j / 7, 10);\n      const shift = j % 7;\n      decoded[i] = (encoded[pos] >> shift) | ((encoded[pos + 1] << (7 - shift)) & 0xFF);\n    }\n\n    return decoded;\n  }\n};\n\n\n//# sourceURL=webpack:///./node_modules/johnny-five/node_modules/firmata/lib/encoder7bit.js?");

/***/ }),

/***/ "./node_modules/johnny-five/node_modules/firmata/lib/firmata.js":
/*!**********************************************************************!*\
  !*** ./node_modules/johnny-five/node_modules/firmata/lib/firmata.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Buffer, process) {\n\n// Built-in Dependencies\nconst Emitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\n\n// Internal Dependencies\nvar Encoder7Bit = __webpack_require__(/*! ./encoder7bit */ \"./node_modules/johnny-five/node_modules/firmata/lib/encoder7bit.js\");\nvar OneWireUtils = __webpack_require__(/*! ./onewireutils */ \"./node_modules/johnny-five/node_modules/firmata/lib/onewireutils.js\");\nvar com = __webpack_require__(/*! ./com */ \"./node_modules/johnny-five/node_modules/firmata/lib/com.js\");\n\n// Program specifics\nvar i2cActive = new Map();\n\n/**\n * constants\n */\n\nvar ANALOG_MAPPING_QUERY = 0x69;\nvar ANALOG_MAPPING_RESPONSE = 0x6A;\nvar ANALOG_MESSAGE = 0xE0;\nvar CAPABILITY_QUERY = 0x6B;\nvar CAPABILITY_RESPONSE = 0x6C;\nvar DIGITAL_MESSAGE = 0x90;\nvar END_SYSEX = 0xF7;\nvar EXTENDED_ANALOG = 0x6F;\nvar I2C_CONFIG = 0x78;\nvar I2C_REPLY = 0x77;\nvar I2C_REQUEST = 0x76;\nvar I2C_READ_MASK = 0x18;   // 0b00011000\nvar I2C_END_TX_MASK = 0x40; // 0b01000000\nvar ONEWIRE_CONFIG_REQUEST = 0x41;\nvar ONEWIRE_DATA = 0x73;\nvar ONEWIRE_DELAY_REQUEST_BIT = 0x10;\nvar ONEWIRE_READ_REPLY = 0x43;\nvar ONEWIRE_READ_REQUEST_BIT = 0x08;\nvar ONEWIRE_RESET_REQUEST_BIT = 0x01;\nvar ONEWIRE_SEARCH_ALARMS_REPLY = 0x45;\nvar ONEWIRE_SEARCH_ALARMS_REQUEST = 0x44;\nvar ONEWIRE_SEARCH_REPLY = 0x42;\nvar ONEWIRE_SEARCH_REQUEST = 0x40;\nvar ONEWIRE_WITHDATA_REQUEST_BITS = 0x3C;\nvar ONEWIRE_WRITE_REQUEST_BIT = 0x20;\nvar PIN_MODE = 0xF4;\nvar PIN_STATE_QUERY = 0x6D;\nvar PIN_STATE_RESPONSE = 0x6E;\nvar PING_READ = 0x75;\nvar PULSE_IN = 0x74;\nvar PULSE_OUT = 0x73;\nvar QUERY_FIRMWARE = 0x79;\nvar REPORT_ANALOG = 0xC0;\nvar REPORT_DIGITAL = 0xD0;\nvar REPORT_VERSION = 0xF9;\nvar SAMPLING_INTERVAL = 0x7A;\nvar SERVO_CONFIG = 0x70;\nvar SERIAL_MESSAGE = 0x60;\nvar SERIAL_CONFIG = 0x10;\nvar SERIAL_WRITE = 0x20;\nvar SERIAL_READ = 0x30;\nvar SERIAL_REPLY = 0x40;\nvar SERIAL_CLOSE = 0x50;\nvar SERIAL_FLUSH = 0x60;\nvar SERIAL_LISTEN = 0x70;\nvar START_SYSEX = 0xF0;\nvar STEPPER = 0x72;\nvar ACCELSTEPPER = 0x62;\nvar STRING_DATA = 0x71;\nvar SYSTEM_RESET = 0xFF;\n\nvar MAX_PIN_COUNT = 128;\n\n/**\n * MIDI_RESPONSE contains functions to be called when we receive a MIDI message from the arduino.\n * used as a switch object as seen here http://james.padolsey.com/javascript/how-to-avoid-switch-case-syndrome/\n * @private\n */\n\nvar MIDI_RESPONSE = {};\n\n/**\n * Handles a REPORT_VERSION response and emits the reportversion event.\n * @private\n * @param {Board} board the current arduino board we are working with.\n */\n\nMIDI_RESPONSE[REPORT_VERSION] = function(board) {\n  board.version.major = board.currentBuffer[1];\n  board.version.minor = board.currentBuffer[2];\n  board.emit(\"reportversion\");\n};\n\n/**\n * Handles a ANALOG_MESSAGE response and emits \"analog-read\" and \"analog-read-\"+n events where n is the pin number.\n * @private\n * @param {Board} board the current arduino board we are working with.\n */\n\nMIDI_RESPONSE[ANALOG_MESSAGE] = function(board) {\n  var pin = board.currentBuffer[0] & 0x0F;\n  var value = board.currentBuffer[1] | (board.currentBuffer[2] << 7);\n\n  /* istanbul ignore else */\n  if (board.pins[board.analogPins[pin]]) {\n    board.pins[board.analogPins[pin]].value = value;\n  }\n\n  board.emit(\"analog-read-\" + pin, value);\n  board.emit(\"analog-read\", {\n    pin: pin,\n    value: value,\n  });\n};\n\n/**\n * Handles a DIGITAL_MESSAGE response and emits:\n * \"digital-read\"\n * \"digital-read-\"+n\n *\n * Where n is the pin number.\n *\n * @private\n * @param {Board} board the current arduino board we are working with.\n */\n\nMIDI_RESPONSE[DIGITAL_MESSAGE] = function(board) {\n  var port = (board.currentBuffer[0] & 0x0F);\n  var portValue = board.currentBuffer[1] | (board.currentBuffer[2] << 7);\n\n  for (var i = 0; i < 8; i++) {\n    var pinNumber = 8 * port + i;\n    var pin = board.pins[pinNumber];\n    var bit = 1 << i;\n\n    if (pin && (pin.mode === board.MODES.INPUT || pin.mode === board.MODES.PULLUP)) {\n      pin.value = (portValue >> (i & 0x07)) & 0x01;\n\n      if (pin.value) {\n        board.ports[port] |= bit;\n      } else {\n        board.ports[port] &= ~bit;\n      }\n\n      board.emit(\"digital-read-\" + pinNumber, pin.value);\n      board.emit(\"digital-read\", {\n        pin: pinNumber,\n        value: pin.value,\n      });\n    }\n  }\n};\n\n/**\n * SYSEX_RESPONSE contains functions to be called when we receive a SYSEX message from the arduino.\n * used as a switch object as seen here http://james.padolsey.com/javascript/how-to-avoid-switch-case-syndrome/\n * @private\n */\n\nvar SYSEX_RESPONSE = {};\n\n/**\n * Handles a QUERY_FIRMWARE response and emits the \"queryfirmware\" event\n * @private\n * @param {Board} board the current arduino board we are working with.\n */\n\nSYSEX_RESPONSE[QUERY_FIRMWARE] = function(board) {\n  var length = board.currentBuffer.length - 2;\n  var buffer = new Buffer(Math.round((length - 4) / 2));\n  var byte = 0;\n  var offset = 0;\n\n  for (var i = 4; i < length; i += 2) {\n    byte = ((board.currentBuffer[i] & 0x7F) | ((board.currentBuffer[i + 1] & 0x7F) << 7)) & 0xFF;\n    buffer.writeUInt8(byte, offset++);\n  }\n\n  board.firmware = {\n    name: buffer.toString(),\n    version: {\n      major: board.currentBuffer[2],\n      minor: board.currentBuffer[3],\n    },\n  };\n\n  board.emit(\"queryfirmware\");\n};\n\n/**\n * Handles a CAPABILITY_RESPONSE response and emits the \"capability-query\" event\n * @private\n * @param {Board} board the current arduino board we are working with.\n */\n\nSYSEX_RESPONSE[CAPABILITY_RESPONSE] = function(board) {\n  var mode, resolution;\n  var modes = Object.keys(board.MODES).map(function(key) {\n    return board.MODES[key];\n  });\n  var capability = 0;\n\n  function supportedModes(capability) {\n    return modes.reduce(function(accum, mode, index) {\n      if (capability & (1 << mode)) {\n        accum.push(mode);\n      }\n      return accum;\n    }, []);\n  }\n\n  // Only create pins if none have been previously created on the instance.\n  if (!board.pins.length) {\n    for (var i = 2, n = 0; i < board.currentBuffer.length - 1; i++) {\n      if (board.currentBuffer[i] === 127) {\n        board.pins.push({\n          supportedModes: supportedModes(capability),\n          mode: undefined,\n          value: 0,\n          report: 1,\n        });\n        capability = 0;\n        n = 0;\n        continue;\n      }\n      if (n === 0) {\n        mode = board.currentBuffer[i];\n        resolution = (1 << board.currentBuffer[i + 1]) - 1;\n        capability |= (1 << mode);\n\n        // ADC Resolution of Analog Inputs\n        if (mode === board.MODES.ANALOG && board.RESOLUTION.ADC === null) {\n          board.RESOLUTION.ADC = resolution;\n        }\n\n        // PWM Resolution of PWM Outputs\n        if (mode === board.MODES.PWM && board.RESOLUTION.PWM === null) {\n          board.RESOLUTION.PWM = resolution;\n        }\n\n        // DAC Resolution of DAC Outputs\n        // if (mode === board.MODES.DAC && board.RESOLUTION.DAC === null) {\n        //   board.RESOLUTION.DAC = resolution;\n        // }\n      }\n      n ^= 1;\n    }\n  }\n\n  board.emit(\"capability-query\");\n};\n\n/**\n * Handles a PIN_STATE response and emits the 'pin-state-'+n event where n is the pin number.\n *\n * Note about pin state: For output modes, the state is any value that has been\n * previously written to the pin. For input modes, the state is the status of\n * the pullup resistor.\n * @private\n * @param {Board} board the current arduino board we are working with.\n */\n\nSYSEX_RESPONSE[PIN_STATE_RESPONSE] = function (board) {\n  var pin = board.currentBuffer[2];\n  board.pins[pin].mode = board.currentBuffer[3];\n  board.pins[pin].state = board.currentBuffer[4];\n  if (board.currentBuffer.length > 6) {\n    board.pins[pin].state |= (board.currentBuffer[5] << 7);\n  }\n  if (board.currentBuffer.length > 7) {\n    board.pins[pin].state |= (board.currentBuffer[6] << 14);\n  }\n  board.emit(\"pin-state-\" + pin);\n};\n\n/**\n * Handles a ANALOG_MAPPING_RESPONSE response and emits the \"analog-mapping-query\" event.\n * @private\n * @param {Board} board the current arduino board we are working with.\n */\n\nSYSEX_RESPONSE[ANALOG_MAPPING_RESPONSE] = function(board) {\n  var pin = 0;\n  var currentValue;\n  for (var i = 2; i < board.currentBuffer.length - 1; i++) {\n    currentValue = board.currentBuffer[i];\n    board.pins[pin].analogChannel = currentValue;\n    if (currentValue !== 127) {\n      board.analogPins.push(pin);\n    }\n    pin++;\n  }\n  board.emit(\"analog-mapping-query\");\n};\n\n/**\n * Handles a I2C_REPLY response and emits the \"I2C-reply-\"+n event where n is the slave address of the I2C device.\n * The event is passed the buffer of data sent from the I2C Device\n * @private\n * @param {Board} board the current arduino board we are working with.\n */\n\nSYSEX_RESPONSE[I2C_REPLY] = function(board) {\n  var reply = [];\n  var address = (board.currentBuffer[2] & 0x7F) | ((board.currentBuffer[3] & 0x7F) << 7);\n  var register = (board.currentBuffer[4] & 0x7F) | ((board.currentBuffer[5] & 0x7F) << 7);\n\n  for (var i = 6, length = board.currentBuffer.length - 1; i < length; i += 2) {\n    reply.push(board.currentBuffer[i] | (board.currentBuffer[i + 1] << 7));\n  }\n\n  board.emit(\"I2C-reply-\" + address + \"-\" + register, reply);\n};\n\nSYSEX_RESPONSE[ONEWIRE_DATA] = function(board) {\n  var subCommand = board.currentBuffer[2];\n\n  if (!SYSEX_RESPONSE[subCommand]) {\n    return;\n  }\n\n  SYSEX_RESPONSE[subCommand](board);\n};\n\nSYSEX_RESPONSE[ONEWIRE_SEARCH_REPLY] = function(board) {\n  var pin = board.currentBuffer[3];\n  var replyBuffer = board.currentBuffer.slice(4, board.currentBuffer.length - 1);\n\n  board.emit(\"1-wire-search-reply-\" + pin, OneWireUtils.readDevices(replyBuffer));\n};\n\nSYSEX_RESPONSE[ONEWIRE_SEARCH_ALARMS_REPLY] = function(board) {\n  var pin = board.currentBuffer[3];\n  var replyBuffer = board.currentBuffer.slice(4, board.currentBuffer.length - 1);\n\n  board.emit(\"1-wire-search-alarms-reply-\" + pin, OneWireUtils.readDevices(replyBuffer));\n};\n\nSYSEX_RESPONSE[ONEWIRE_READ_REPLY] = function(board) {\n  var encoded = board.currentBuffer.slice(4, board.currentBuffer.length - 1);\n  var decoded = Encoder7Bit.from7BitArray(encoded);\n  var correlationId = (decoded[1] << 8) | decoded[0];\n\n  board.emit(\"1-wire-read-reply-\" + correlationId, decoded.slice(2));\n};\n\n/**\n * Handles a STRING_DATA response and logs the string to the console.\n * @private\n * @param {Board} board the current arduino board we are working with.\n */\n\nSYSEX_RESPONSE[STRING_DATA] = function(board) {\n  var string = new Buffer(board.currentBuffer.slice(2, -1)).toString(\"utf8\").replace(/\\0/g, \"\");\n  board.emit(\"string\", string);\n};\n\n/**\n * Response from pingRead\n */\n\nSYSEX_RESPONSE[PING_READ] = function(board) {\n  var pin = (board.currentBuffer[2] & 0x7F) | ((board.currentBuffer[3] & 0x7F) << 7);\n  var durationBuffer = [\n    (board.currentBuffer[4] & 0x7F) | ((board.currentBuffer[5] & 0x7F) << 7),\n    (board.currentBuffer[6] & 0x7F) | ((board.currentBuffer[7] & 0x7F) << 7),\n    (board.currentBuffer[8] & 0x7F) | ((board.currentBuffer[9] & 0x7F) << 7),\n    (board.currentBuffer[10] & 0x7F) | ((board.currentBuffer[11] & 0x7F) << 7),\n  ];\n  var duration = ((durationBuffer[0] << 24) +\n    (durationBuffer[1] << 16) +\n    (durationBuffer[2] << 8) +\n    (durationBuffer[3]));\n  board.emit(\"ping-read-\" + pin, duration);\n};\n\n/**\n * Handles the message from a stepper completing move\n * @param {Board} board\n */\n\nSYSEX_RESPONSE[STEPPER] = function(board) {\n  var deviceNum = board.currentBuffer[2];\n  board.emit(\"stepper-done-\" + deviceNum, true);\n};\n\n/**\n * Handles the message from a stepper or group of steppers completing move\n * @param {Board} board\n */\n\nSYSEX_RESPONSE[ACCELSTEPPER] = function(board) {\n  var command = board.currentBuffer[2];\n  var deviceNum = board.currentBuffer[3];\n  var value;\n\n  if (command === 0x06) {\n    value = decode32BitSignedInteger(board.currentBuffer.slice(4, 9));\n    board.emit(\"stepper-position-\" + deviceNum, value);\n  }\n  if (command === 0x0A) {\n    value = decode32BitSignedInteger(board.currentBuffer.slice(4, 9));\n    board.emit(\"stepper-done-\" + deviceNum, value);\n  }\n  if (command === 0x24) {\n    board.emit(\"multi-stepper-done-\" + deviceNum);\n  }\n};\n\n/**\n * Handles a SERIAL_REPLY response and emits the \"serial-data-\"+n event where n is the id of the\n * serial port.\n * The event is passed the buffer of data sent from the serial device\n * @private\n * @param {Board} board the current arduino board we are working with.\n */\n\nSYSEX_RESPONSE[SERIAL_MESSAGE] = function(board) {\n  var command = board.currentBuffer[2] & 0xF0;\n  var portId = board.currentBuffer[2] & 0x0F;\n  var reply = [];\n\n  /* istanbul ignore else */\n  if (command === SERIAL_REPLY) {\n    for (var i = 3, len = board.currentBuffer.length; i < len - 1; i += 2) {\n      reply.push((board.currentBuffer[i + 1] << 7) | board.currentBuffer[i]);\n    }\n    board.emit(\"serial-data-\" + portId, reply);\n  }\n};\n\n/**\n * @class The Board object represents an arduino board.\n * @augments EventEmitter\n * @param {String} port This is the serial port the arduino is connected to.\n * @param {function} function A function to be called when the arduino is ready to communicate.\n * @property MODES All the modes available for pins on this arduino board.\n * @property I2C_MODES All the I2C modes available.\n * @property SERIAL_MODES All the Serial modes available.\n * @property SERIAL_PORT_ID ID values to pass as the portId parameter when calling serialConfig.\n * @property HIGH A constant to set a pins value to HIGH when the pin is set to an output.\n * @property LOW A constant to set a pins value to LOW when the pin is set to an output.\n * @property pins An array of pin object literals.\n * @property analogPins An array of analog pins and their corresponding indexes in the pins array.\n * @property version An object indicating the major and minor version of the firmware currently running.\n * @property firmware An object indicating the name, major and minor version of the firmware currently running.\n * @property currentBuffer An array holding the current bytes received from the arduino.\n * @property {SerialPort} sp The serial port object used to communicate with the arduino.\n */\n\nfunction Board(port, options, callback) {\n  if (typeof options === \"function\" || typeof options === \"undefined\") {\n    callback = options;\n    options = {};\n  }\n\n  if (!(this instanceof Board)) {\n    return new Board(port, options, callback);\n  }\n\n  Emitter.call(this);\n\n  var board = this;\n  var defaults = {\n    reportVersionTimeout: 5000,\n    samplingInterval: 19,\n    serialport: {\n      baudRate: 57600,\n      // https://github.com/node-serialport/node-serialport/blob/5.0.0/UPGRADE_GUIDE.md#open-options\n      highWaterMark: 256,\n    },\n  };\n\n  if (options.bufferSize) {\n    options.highWaterMark = options.bufferSize;\n  }\n\n  var settings = Object.assign({}, defaults, options);\n\n  this.isReady = false;\n\n  this.MODES = {\n    INPUT: 0x00,\n    OUTPUT: 0x01,\n    ANALOG: 0x02,\n    PWM: 0x03,\n    SERVO: 0x04,\n    SHIFT: 0x05,\n    I2C: 0x06,\n    ONEWIRE: 0x07,\n    STEPPER: 0x08,\n    SERIAL: 0x0A,\n    PULLUP: 0x0B,\n    IGNORE: 0x7F,\n    PING_READ: 0x75,\n    UNKOWN: 0x10,\n  };\n\n  this.I2C_MODES = {\n    WRITE: 0,\n    READ: 1,\n    CONTINUOUS_READ: 2,\n    STOP_READING: 3,\n  };\n\n  this.STEPPER = {\n    TYPE: {\n      DRIVER: 1,\n      TWO_WIRE: 2,\n      THREE_WIRE: 3,\n      FOUR_WIRE: 4,\n    },\n    STEP_SIZE: {\n      WHOLE: 0,\n      HALF: 1\n    },\n    RUN_STATE: {\n      STOP: 0,\n      ACCEL: 1,\n      DECEL: 2,\n      RUN: 3,\n    },\n    DIRECTION: {\n      CCW: 0,\n      CW: 1,\n    },\n  };\n\n  this.SERIAL_MODES = {\n    CONTINUOUS_READ: 0x00,\n    STOP_READING: 0x01,\n  };\n\n  // ids for hardware and software serial ports on the board\n  this.SERIAL_PORT_IDs = {\n    HW_SERIAL0: 0x00,\n    HW_SERIAL1: 0x01,\n    HW_SERIAL2: 0x02,\n    HW_SERIAL3: 0x03,\n    SW_SERIAL0: 0x08,\n    SW_SERIAL1: 0x09,\n    SW_SERIAL2: 0x10,\n    SW_SERIAL3: 0x11,\n\n    // Default can be used by dependant libraries to key on a\n    // single property name when negotiating ports.\n    //\n    // Firmata elects SW_SERIAL0: 0x08 as its DEFAULT\n    DEFAULT: 0x08,\n  };\n\n  // map to the pin resolution value in the capability query response\n  this.SERIAL_PIN_TYPES = {\n    RES_RX0: 0x00,\n    RES_TX0: 0x01,\n    RES_RX1: 0x02,\n    RES_TX1: 0x03,\n    RES_RX2: 0x04,\n    RES_TX2: 0x05,\n    RES_RX3: 0x06,\n    RES_TX3: 0x07,\n  };\n\n  this.RESOLUTION = {\n    ADC: null,\n    DAC: null,\n    PWM: null,\n  };\n\n  this.HIGH = 1;\n  this.LOW = 0;\n  this.pins = [];\n  this.ports = Array(16).fill(0);\n  this.analogPins = [];\n  this.version = {};\n  this.firmware = {};\n  this.currentBuffer = [];\n  this.versionReceived = false;\n  this.name = \"Firmata\";\n  this.settings = settings;\n  this.pending = 0;\n\n  if (typeof port === \"object\") {\n    this.transport = port;\n  } else {\n    this.transport = new com.SerialPort(port, settings.serialport);\n  }\n\n  // For backward compat\n  this.sp = this.transport;\n\n  this.transport.on(\"close\", function(event) {\n\n    // https://github.com/node-serialport/node-serialport/blob/5.0.0/UPGRADE_GUIDE.md#opening-and-closing\n    if (event && event.disconnect && event.disconnected) {\n      this.emit(\"disconnect\");\n      return;\n    }\n\n    this.emit(\"close\");\n  }.bind(this));\n\n  this.transport.on(\"open\", function(event) {\n    this.emit(\"open\", event);\n    // Legacy\n    this.emit(\"connect\", event);\n  }.bind(this));\n\n  this.transport.on(\"error\", function(error) {\n    if (!this.isReady && typeof callback === \"function\") {\n      callback(error);\n    } else {\n      this.emit(\"error\", error);\n    }\n  }.bind(this));\n\n  this.transport.on(\"data\", function(data) {\n    var byte, currByte, response, first, last, handler;\n\n    for (var i = 0; i < data.length; i++) {\n      byte = data[i];\n      // we dont want to push 0 as the first byte on our buffer\n      if (this.currentBuffer.length === 0 && byte === 0) {\n        continue;\n      } else {\n        this.currentBuffer.push(byte);\n\n        first = this.currentBuffer[0];\n        last = this.currentBuffer[this.currentBuffer.length - 1];\n\n        // [START_SYSEX, ... END_SYSEX]\n        if (first === START_SYSEX && last === END_SYSEX) {\n\n          handler = SYSEX_RESPONSE[this.currentBuffer[1]];\n\n          // Ensure a valid SYSEX_RESPONSE handler exists\n          // Only process these AFTER the REPORT_VERSION\n          // message has been received and processed.\n          if (handler && this.versionReceived) {\n            handler(this);\n          }\n\n          // It is possible for the board to have\n          // existing activity from a previous run\n          // that will leave any of the following\n          // active:\n          //\n          //    - ANALOG_MESSAGE\n          //    - SERIAL_READ\n          //    - I2C_REQUEST, CONTINUOUS_READ\n          //\n          // This means that we will receive these\n          // messages on transport \"open\", before any\n          // handshake can occur. We MUST assert\n          // that we will only process this buffer\n          // AFTER the REPORT_VERSION message has\n          // been received. Not doing so will result\n          // in the appearance of the program \"hanging\".\n          //\n          // Since we cannot do anything with this data\n          // until _after_ REPORT_VERSION, discard it.\n          //\n          this.currentBuffer.length = 0;\n\n        } else if (first === START_SYSEX && (this.currentBuffer.length > 0)) {\n          // we have a new command after an incomplete sysex command\n          currByte = data[i];\n          if (currByte > 0x7F) {\n            this.currentBuffer.length = 0;\n            this.currentBuffer.push(currByte);\n          }\n        } else {\n          /* istanbul ignore else */\n          if (first !== START_SYSEX) {\n            // Check if data gets out of sync: first byte in buffer\n            // must be a valid response if not START_SYSEX\n            // Identify response on first byte\n            response = first < START_SYSEX ? (first & START_SYSEX) : first;\n\n            // Check if the first byte is possibly\n            // a valid MIDI_RESPONSE (handler)\n            /* istanbul ignore else */\n            if (response !== REPORT_VERSION &&\n                response !== ANALOG_MESSAGE &&\n                response !== DIGITAL_MESSAGE) {\n              // If not valid, then we received garbage and can discard\n              // whatever bytes have been been queued.\n              this.currentBuffer.length = 0;\n            }\n          }\n        }\n\n        // There are 3 bytes in the buffer and the first is not START_SYSEX:\n        // Might have a MIDI Command\n        if (this.currentBuffer.length === 3 && first !== START_SYSEX) {\n          // response bytes under 0xF0 we have a multi byte operation\n          response = first < START_SYSEX ? (first & START_SYSEX) : first;\n\n          /* istanbul ignore else */\n          if (MIDI_RESPONSE[response]) {\n            // It's ok that this.versionReceived will be set to\n            // true every time a valid MIDI_RESPONSE is received.\n            // This condition is necessary to ensure that REPORT_VERSION\n            // is called first.\n            if (this.versionReceived || first === REPORT_VERSION) {\n              this.versionReceived = true;\n              MIDI_RESPONSE[response](this);\n            }\n            this.currentBuffer.length = 0;\n          } else {\n            // A bad serial read must have happened.\n            // Reseting the buffer will allow recovery.\n            this.currentBuffer.length = 0;\n          }\n        }\n      }\n    }\n  }.bind(this));\n\n  // if we have not received the version within the allotted\n  // time specified by the reportVersionTimeout (user or default),\n  // then send an explicit request for it.\n  this.reportVersionTimeoutId = setTimeout(function() {\n    /* istanbul ignore else */\n    if (this.versionReceived === false) {\n      this.reportVersion(function() {});\n      this.queryFirmware(function() {});\n    }\n  }.bind(this), settings.reportVersionTimeout);\n\n  function ready() {\n    board.isReady = true;\n    board.emit(\"ready\");\n    /* istanbul ignore else */\n    if (typeof callback === \"function\") {\n      callback();\n    }\n  }\n\n  // Await the reported version.\n  this.once(\"reportversion\", function() {\n    clearTimeout(this.reportVersionTimeoutId);\n    this.versionReceived = true;\n    this.once(\"queryfirmware\", function() {\n\n      // Only preemptively set the sampling interval if `samplingInterval`\n      // property was _explicitly_ set as a constructor option.\n      if (options.samplingInterval !== undefined) {\n        this.setSamplingInterval(options.samplingInterval);\n      }\n      if (settings.skipCapabilities) {\n        this.analogPins = settings.analogPins || this.analogPins;\n        this.pins = settings.pins || this.pins;\n        /* istanbul ignore else */\n        if (!this.pins.length) {\n          for (var i = 0; i < (settings.pinCount || MAX_PIN_COUNT); i++) {\n            var analogChannel = this.analogPins.indexOf(i);\n            if (analogChannel < 0) {\n              analogChannel = 127;\n            }\n            this.pins.push({supportedModes: [], analogChannel: analogChannel});\n          }\n        }\n\n        // If the capabilities query is skipped,\n        // default resolution values will be used.\n        //\n        // Based on ATmega328/P\n        //\n        this.RESOLUTION.ADC = 0x3FF;\n        this.RESOLUTION.PWM = 0x0FF;\n\n        ready();\n      } else {\n        this.queryCapabilities(function() {\n          this.queryAnalogMapping(ready);\n        });\n      }\n    });\n  });\n}\n\nBoard.prototype = Object.create(Emitter.prototype, {\n  constructor: {\n    value: Board,\n  },\n});\n\n/**\n * writeToTransport Due to the non-blocking behaviour of transport write\n *                   operations, dependent programs need a way to know\n *                   when all writes are complete. Every write increments\n *                   a `pending` value, when the write operation has\n *                   completed, the `pending` value is decremented.\n *\n * @param  {Board} board An active Board instance\n * @param  {Array} data  An array of 8 and 7 bit values that will be\n *                       wrapped in a Buffer and written to the transport.\n */\nfunction writeToTransport(board, data) {\n  board.pending++;\n  board.transport.write(new Buffer(data), function() {\n    board.pending--;\n  });\n}\n\n/**\n * Asks the arduino to tell us its version.\n * @param {function} callback A function to be called when the arduino has reported its version.\n */\n\nBoard.prototype.reportVersion = function(callback) {\n  this.once(\"reportversion\", callback);\n  writeToTransport(this, [REPORT_VERSION]);\n};\n\n/**\n * Asks the arduino to tell us its firmware version.\n * @param {function} callback A function to be called when the arduino has reported its firmware version.\n */\n\nBoard.prototype.queryFirmware = function(callback) {\n  this.once(\"queryfirmware\", callback);\n  writeToTransport(this, [START_SYSEX, QUERY_FIRMWARE, END_SYSEX]);\n};\n\n/**\n * Asks the arduino to read analog data. Turn on reporting for this pin.\n * @param {number} pin The pin to read analog data\n * @param {function} callback A function to call when we have the analag data.\n */\n\nBoard.prototype.analogRead = function(pin, callback) {\n  this.reportAnalogPin(pin, 1);\n  this.addListener(\"analog-read-\" + pin, callback);\n};\n\n/**\n * Write a PWM value Asks the arduino to write an analog message.\n * @param {number} pin The pin to write analog data to.\n * @param {number} value The data to write to the pin between 0 and this.RESOLUTION.PWM.\n */\n\nBoard.prototype.pwmWrite = function(pin, value) {\n  var data = [];\n\n  this.pins[pin].value = value;\n\n  if (pin > 15) {\n    data[0] = START_SYSEX;\n    data[1] = EXTENDED_ANALOG;\n    data[2] = pin;\n    data[3] = value & 0x7F;\n    data[4] = (value >> 7) & 0x7F;\n\n    if (value > 0x00004000) {\n      data[data.length] = (value >> 14) & 0x7F;\n    }\n\n    if (value > 0x00200000) {\n      data[data.length] = (value >> 21) & 0x7F;\n    }\n\n    if (value > 0x10000000) {\n      data[data.length] = (value >> 28) & 0x7F;\n    }\n\n    data[data.length] = END_SYSEX;\n  } else {\n    data.push(ANALOG_MESSAGE | pin, value & 0x7F, (value >> 7) & 0x7F);\n  }\n\n  writeToTransport(this, data);\n};\n\nBoard.prototype.analogWrite = Board.prototype.pwmWrite;\n\n/**\n * Set a pin to SERVO mode with an explicit PWM range.\n *\n * @param {number} pin The pin the servo is connected to\n * @param {number} min A 14-bit signed int.\n * @param {number} max A 14-bit signed int.\n */\n\nBoard.prototype.servoConfig = function(pin, min, max) {\n  var temp;\n\n  if (typeof pin === \"object\" && pin !== null) {\n    temp = pin;\n    pin = temp.pin;\n    min = temp.min;\n    max = temp.max;\n  }\n\n  if (typeof pin === \"undefined\") {\n    throw new Error(\"servoConfig: pin must be specified\");\n  }\n\n  if (typeof min === \"undefined\") {\n    throw new Error(\"servoConfig: min must be specified\");\n  }\n\n  if (typeof max === \"undefined\") {\n    throw new Error(\"servoConfig: max must be specified\");\n  }\n\n  // [0]  START_SYSEX  (0xF0)\n  // [1]  SERVO_CONFIG (0x70)\n  // [2]  pin number   (0-127)\n  // [3]  minPulse LSB (0-6)\n  // [4]  minPulse MSB (7-13)\n  // [5]  maxPulse LSB (0-6)\n  // [6]  maxPulse MSB (7-13)\n  // [7]  END_SYSEX    (0xF7)\n\n  this.pins[pin].mode = this.MODES.SERVO;\n\n  writeToTransport(this, [\n    START_SYSEX,\n    SERVO_CONFIG,\n    pin,\n    min & 0x7F,\n    (min >> 7) & 0x7F,\n    max & 0x7F,\n    (max >> 7) & 0x7F,\n    END_SYSEX,\n  ]);\n};\n\n/**\n * Asks the arduino to move a servo\n * @param {number} pin The pin the servo is connected to\n * @param {number} value The degrees to move the servo to.\n */\n\nBoard.prototype.servoWrite = function(pin, value) {\n  // Values less than 544 will be treated as angles in degrees\n  // (valid values in microseconds are handled as microseconds)\n  this.analogWrite.apply(this, arguments);\n};\n\n/**\n * Asks the arduino to set the pin to a certain mode.\n * @param {number} pin The pin you want to change the mode of.\n * @param {number} mode The mode you want to set. Must be one of board.MODES\n */\n\nBoard.prototype.pinMode = function(pin, mode) {\n  this.pins[pin].mode = mode;\n  writeToTransport(this, [PIN_MODE, pin, mode]);\n};\n\n/**\n * Asks the arduino to write a value to a digital pin\n * @param {number} pin The pin you want to write a value to.\n * @param {number} value The value you want to write. Must be board.HIGH or board.LOW\n */\n\nBoard.prototype.digitalWrite = function(pin, value) {\n  var port = pin >> 3;\n  var bit = 1 << (pin & 0x07);\n\n  this.pins[pin].value = value;\n\n  if (value) {\n    this.ports[port] |= bit;\n  } else {\n    this.ports[port] &= ~bit;\n  }\n\n  writeToTransport(this, [\n    DIGITAL_MESSAGE | port,\n    this.ports[port] & 0x7F,\n    (this.ports[port] >> 7) & 0x7F\n  ]);\n};\n\n/**\n * Asks the arduino to read digital data. Turn on reporting for this pin's port.\n *\n * @param {number} pin The pin to read data from\n * @param {function} callback The function to call when data has been received\n */\n\nBoard.prototype.digitalRead = function(pin, callback) {\n  this.reportDigitalPin(pin, 1);\n  this.addListener(\"digital-read-\" + pin, callback);\n};\n\n/**\n * Asks the arduino to tell us its capabilities\n * @param {function} callback A function to call when we receive the capabilities\n */\n\nBoard.prototype.queryCapabilities = function(callback) {\n  this.once(\"capability-query\", callback);\n  writeToTransport(this, [START_SYSEX, CAPABILITY_QUERY, END_SYSEX]);\n};\n\n/**\n * Asks the arduino to tell us its analog pin mapping\n * @param {function} callback A function to call when we receive the pin mappings.\n */\n\nBoard.prototype.queryAnalogMapping = function(callback) {\n  this.once(\"analog-mapping-query\", callback);\n  writeToTransport(this, [START_SYSEX, ANALOG_MAPPING_QUERY, END_SYSEX]);\n};\n\n/**\n * Asks the arduino to tell us the current state of a pin\n * @param {number} pin The pin we want to the know the state of\n * @param {function} callback A function to call when we receive the pin state.\n */\n\nBoard.prototype.queryPinState = function(pin, callback) {\n  this.once(\"pin-state-\" + pin, callback);\n  writeToTransport(this, [START_SYSEX, PIN_STATE_QUERY, pin, END_SYSEX]);\n};\n\n/**\n * Sends a string to the arduino\n * @param {String} string to send to the device\n */\n\nBoard.prototype.sendString = function(string) {\n  var bytes = new Buffer(string + \"\\0\", \"utf8\");\n  var data = [];\n  data.push(START_SYSEX);\n  data.push(STRING_DATA);\n  for (var i = 0, length = bytes.length; i < length; i++) {\n    data.push(bytes[i] & 0x7F);\n    data.push((bytes[i] >> 7) & 0x7F);\n  }\n  data.push(END_SYSEX);\n\n  writeToTransport(this, data);\n};\n\nfunction i2cRequest(board, bytes) {\n  var active = i2cActive.get(board);\n\n  if (!active) {\n    throw new Error(\"I2C is not enabled for this board. To enable, call the i2cConfig() method.\");\n  }\n\n  // Do not tamper with I2C_CONFIG messages\n  if (bytes[1] === I2C_REQUEST) {\n    var address = bytes[2];\n\n    // If no peripheral settings exist, make them.\n    if (!active[address]) {\n      active[address] = {\n        stopTX: true,\n      };\n    }\n\n    // READ (8) or CONTINUOUS_READ (16)\n    // value & 0b00011000\n    if (bytes[3] & I2C_READ_MASK) {\n      // Invert logic to accomodate default = true,\n      // which is actually stopTX = 0\n      bytes[3] |= Number(!active[address].stopTX) << 6;\n    }\n  }\n\n  writeToTransport(board, bytes);\n}\n\n/**\n * Sends a I2C config request to the arduino board with an optional\n * value in microseconds to delay an I2C Read.  Must be called before\n * an I2C Read or Write\n * @param {number} delay in microseconds to set for I2C Read\n */\n\nBoard.prototype.sendI2CConfig = function(delay) {\n  return this.i2cConfig(delay);\n};\n\n/**\n * Enable I2C with an optional read delay. Must be called before\n * an I2C Read or Write\n *\n * Supersedes sendI2CConfig\n *\n * @param {number} delay in microseconds to set for I2C Read\n *\n * or\n *\n * @param {object} with a single property `delay`\n */\n\nBoard.prototype.i2cConfig = function(options) {\n  var settings = i2cActive.get(this);\n  var delay;\n\n  if (!settings) {\n    settings = {\n      /*\n        Keys will be I2C peripheral addresses\n       */\n    };\n    i2cActive.set(this, settings);\n  }\n\n  if (typeof options === \"number\") {\n    delay = options;\n  } else {\n    if (typeof options === \"object\" && options !== null) {\n      delay = Number(options.delay);\n\n      // When an address was explicitly specified, there may also be\n      // peripheral specific instructions in the config.\n      if (typeof options.address !== \"undefined\") {\n        if (!settings[options.address]) {\n          settings[options.address] = {\n            stopTX: true,\n          };\n        }\n      }\n\n      // When settings have been explicitly provided, just bulk assign\n      // them to the existing settings, even if that's empty. This\n      // allows for reconfiguration as needed.\n      if (typeof options.settings !== \"undefined\") {\n        Object.assign(settings[options.address], options.settings);\n        /*\n          - stopTX: true | false\n              Set `stopTX` to `false` if this peripheral\n              expects Wire to keep the transmission connection alive between\n              setting a register and requesting bytes.\n\n              Defaults to `true`.\n         */\n      }\n    }\n  }\n\n  settings.delay = delay = delay || 0;\n\n  i2cRequest(this, [\n    START_SYSEX,\n    I2C_CONFIG,\n    delay & 0xFF, (delay >> 8) & 0xFF,\n    END_SYSEX,\n  ]);\n\n  return this;\n};\n\n/**\n * Asks the arduino to send an I2C request to a device\n * @param {number} slaveAddress The address of the I2C device\n * @param {Array} bytes The bytes to send to the device\n */\n\nBoard.prototype.sendI2CWriteRequest = function(slaveAddress, bytes) {\n  var data = [];\n  /* istanbul ignore next */\n  bytes = bytes || [];\n\n  data.push(\n    START_SYSEX,\n    I2C_REQUEST,\n    slaveAddress,\n    this.I2C_MODES.WRITE << 3\n  );\n\n  for (var i = 0, length = bytes.length; i < length; i++) {\n    data.push(\n      bytes[i] & 0x7F, (bytes[i] >> 7) & 0x7F\n    );\n  }\n\n  data.push(END_SYSEX);\n\n  i2cRequest(this, data);\n};\n\n/**\n * Write data to a register\n *\n * @param {number} address      The address of the I2C device.\n * @param {Array} cmdRegOrData  An array of bytes\n *\n * Write a command to a register\n *\n * @param {number} address      The address of the I2C device.\n * @param {number} cmdRegOrData The register\n * @param {Array} inBytes       An array of bytes\n *\n */\n\nBoard.prototype.i2cWrite = function(address, registerOrData, inBytes) {\n  /**\n   * registerOrData:\n   * [... arbitrary bytes]\n   *\n   * or\n   *\n   * registerOrData, inBytes:\n   * command [, ...]\n   *\n   */\n  var bytes;\n  var data = [\n    START_SYSEX,\n    I2C_REQUEST,\n    address,\n    this.I2C_MODES.WRITE << 3\n  ];\n\n  // If i2cWrite was used for an i2cWriteReg call...\n  if (arguments.length === 3 &&\n      !Array.isArray(registerOrData) &&\n      !Array.isArray(inBytes)) {\n\n    return this.i2cWriteReg(address, registerOrData, inBytes);\n  }\n\n  // Fix arguments if called with Firmata.js API\n  if (arguments.length === 2) {\n    if (Array.isArray(registerOrData)) {\n      inBytes = registerOrData.slice();\n      registerOrData = inBytes.shift();\n    } else {\n      inBytes = [];\n    }\n  }\n\n  bytes = new Buffer([registerOrData].concat(inBytes));\n\n  for (var i = 0, length = bytes.length; i < length; i++) {\n    data.push(\n      bytes[i] & 0x7F, (bytes[i] >> 7) & 0x7F\n    );\n  }\n\n  data.push(END_SYSEX);\n\n  i2cRequest(this, data);\n\n  return this;\n};\n\n/**\n * Write data to a register\n *\n * @param {number} address    The address of the I2C device.\n * @param {number} register   The register.\n * @param {number} byte       The byte value to write.\n *\n */\n\nBoard.prototype.i2cWriteReg = function(address, register, byte) {\n  i2cRequest(this, [\n    START_SYSEX,\n    I2C_REQUEST,\n    address,\n    this.I2C_MODES.WRITE << 3,\n    // register\n    register & 0x7F, (register >> 7) & 0x7F,\n    // byte\n    byte & 0x7F, (byte >> 7) & 0x7F,\n    END_SYSEX,\n  ]);\n\n  return this;\n};\n\n\n/**\n * Asks the arduino to request bytes from an I2C device\n * @param {number} slaveAddress The address of the I2C device\n * @param {number} numBytes The number of bytes to receive.\n * @param {function} callback A function to call when we have received the bytes.\n */\n\nBoard.prototype.sendI2CReadRequest = function(address, numBytes, callback) {\n  i2cRequest(this, [\n    START_SYSEX,\n    I2C_REQUEST,\n    address,\n    this.I2C_MODES.READ << 3,\n    numBytes & 0x7F, (numBytes >> 7) & 0x7F,\n    END_SYSEX,\n  ]);\n  this.once(\"I2C-reply-\" + address + \"-0\" , callback);\n};\n\n// TODO: Refactor i2cRead and i2cReadOnce\n//      to share most operations.\n\n/**\n * Initialize a continuous I2C read.\n *\n * @param {number} address    The address of the I2C device\n * @param {number} register   Optionally set the register to read from.\n * @param {number} numBytes   The number of bytes to receive.\n * @param {function} callback A function to call when we have received the bytes.\n */\n\nBoard.prototype.i2cRead = function(address, register, bytesToRead, callback) {\n\n  if (arguments.length === 3 &&\n      typeof register === \"number\" &&\n      typeof bytesToRead === \"function\") {\n    callback = bytesToRead;\n    bytesToRead = register;\n    register = null;\n  }\n\n  var event = \"I2C-reply-\" + address + \"-\";\n  var data = [\n    START_SYSEX,\n    I2C_REQUEST,\n    address,\n    this.I2C_MODES.CONTINUOUS_READ << 3,\n  ];\n\n  if (register !== null) {\n    data.push(\n      register & 0x7F, (register >> 7) & 0x7F\n    );\n  } else {\n    register = 0;\n  }\n\n  event += register;\n\n  data.push(\n    bytesToRead & 0x7F, (bytesToRead >> 7) & 0x7F,\n    END_SYSEX\n  );\n\n  this.on(event, callback);\n\n  i2cRequest(this, data);\n\n  return this;\n};\n\n/**\n * Stop continuous reading of the specified I2C address or register.\n *\n * @param {object} options Options:\n *   bus {number} The I2C bus (on supported platforms)\n *   address {number} The I2C peripheral address to stop reading.\n *\n * @param {number} address The I2C peripheral address to stop reading.\n */\n\nBoard.prototype.i2cStop = function(options) {\n  // There may be more values in the future\n  // var options = {};\n\n  // null or undefined? Do nothing.\n  if (options == null) {\n    return;\n  }\n\n  if (typeof options === \"number\") {\n    options = {\n      address: options\n    };\n  }\n\n  writeToTransport(this, [\n    START_SYSEX,\n    I2C_REQUEST,\n    options.address,\n    this.I2C_MODES.STOP_READING << 3,\n    END_SYSEX,\n  ]);\n\n  Object.keys(this._events).forEach(function(event) {\n    if (event.startsWith(\"I2C-reply-\" + options.address)) {\n      this.removeAllListeners(event);\n    }\n  }, this);\n};\n\n\n/**\n * Perform a single I2C read\n *\n * Supersedes sendI2CReadRequest\n *\n * Read bytes from address\n *\n * @param {number} address    The address of the I2C device\n * @param {number} register   Optionally set the register to read from.\n * @param {number} numBytes   The number of bytes to receive.\n * @param {function} callback A function to call when we have received the bytes.\n *\n */\n\n\nBoard.prototype.i2cReadOnce = function(address, register, bytesToRead, callback) {\n\n  if (arguments.length === 3 &&\n      typeof register === \"number\" &&\n      typeof bytesToRead === \"function\") {\n    callback = bytesToRead;\n    bytesToRead = register;\n    register = null;\n  }\n\n  var event = \"I2C-reply-\" + address + \"-\";\n  var data = [\n    START_SYSEX,\n    I2C_REQUEST,\n    address,\n    this.I2C_MODES.READ << 3,\n  ];\n\n  if (register !== null) {\n    data.push(\n      register & 0x7F, (register >> 7) & 0x7F\n    );\n  } else {\n    register = 0;\n  }\n\n  event += register;\n\n  data.push(\n    bytesToRead & 0x7F, (bytesToRead >> 7) & 0x7F,\n    END_SYSEX\n  );\n\n  this.once(event, callback);\n\n  i2cRequest(this, data);\n\n  return this;\n};\n\n// CONTINUOUS_READ\n\n/**\n * Configure the passed pin as the controller in a 1-wire bus.\n * Pass as enableParasiticPower true if you want the data pin to power the bus.\n * @param pin\n * @param enableParasiticPower\n */\n\nBoard.prototype.sendOneWireConfig = function(pin, enableParasiticPower) {\n  writeToTransport(this, [\n    START_SYSEX,\n    ONEWIRE_DATA,\n    ONEWIRE_CONFIG_REQUEST,\n    pin,\n    enableParasiticPower ? 0x01 : 0x00,\n    END_SYSEX\n  ]);\n};\n\n/**\n * Searches for 1-wire devices on the bus.  The passed callback should accept\n * and error argument and an array of device identifiers.\n * @param pin\n * @param callback\n */\n\nBoard.prototype.sendOneWireSearch = function(pin, callback) {\n  this._sendOneWireSearch(ONEWIRE_SEARCH_REQUEST, \"1-wire-search-reply-\" + pin, pin, callback);\n};\n\n/**\n * Searches for 1-wire devices on the bus in an alarmed state.  The passed callback\n * should accept and error argument and an array of device identifiers.\n * @param pin\n * @param callback\n */\n\nBoard.prototype.sendOneWireAlarmsSearch = function(pin, callback) {\n  this._sendOneWireSearch(ONEWIRE_SEARCH_ALARMS_REQUEST, \"1-wire-search-alarms-reply-\" + pin, pin, callback);\n};\n\nBoard.prototype._sendOneWireSearch = function(type, event, pin, callback) {\n  writeToTransport(this, [START_SYSEX, ONEWIRE_DATA, type, pin, END_SYSEX]);\n\n  var searchTimeout = setTimeout(function() {\n    /* istanbul ignore next */\n    callback(new Error(\"1-Wire device search timeout - are you running ConfigurableFirmata?\"));\n  }, 5000);\n  this.once(event, function(devices) {\n    clearTimeout(searchTimeout);\n    callback(null, devices);\n  });\n};\n\n/**\n * Reads data from a device on the bus and invokes the passed callback.\n *\n * N.b. ConfigurableFirmata will issue the 1-wire select command internally.\n * @param pin\n * @param device\n * @param numBytesToRead\n * @param callback\n */\n\nBoard.prototype.sendOneWireRead = function(pin, device, numBytesToRead, callback) {\n  var correlationId = Math.floor(Math.random() * 255);\n  /* istanbul ignore next */\n  var readTimeout = setTimeout(function() {\n    /* istanbul ignore next */\n    callback(new Error(\"1-Wire device read timeout - are you running ConfigurableFirmata?\"));\n  }, 5000);\n  this._sendOneWireRequest(pin, ONEWIRE_READ_REQUEST_BIT, device, numBytesToRead, correlationId, null, null, \"1-wire-read-reply-\" + correlationId, function(data) {\n    clearTimeout(readTimeout);\n    callback(null, data);\n  });\n};\n\n/**\n * Resets all devices on the bus.\n * @param pin\n */\n\nBoard.prototype.sendOneWireReset = function(pin) {\n  this._sendOneWireRequest(pin, ONEWIRE_RESET_REQUEST_BIT);\n};\n\n/**\n * Writes data to the bus to be received by the passed device.  The device\n * should be obtained from a previous call to sendOneWireSearch.\n *\n * N.b. ConfigurableFirmata will issue the 1-wire select command internally.\n * @param pin\n * @param device\n * @param data\n */\n\nBoard.prototype.sendOneWireWrite = function(pin, device, data) {\n  this._sendOneWireRequest(pin, ONEWIRE_WRITE_REQUEST_BIT, device, null, null, null, Array.isArray(data) ? data : [data]);\n};\n\n/**\n * Tells firmata to not do anything for the passed amount of ms.  For when you\n * need to give a device attached to the bus time to do a calculation.\n * @param pin\n */\n\nBoard.prototype.sendOneWireDelay = function(pin, delay) {\n  this._sendOneWireRequest(pin, ONEWIRE_DELAY_REQUEST_BIT, null, null, null, delay);\n};\n\n/**\n * Sends the passed data to the passed device on the bus, reads the specified\n * number of bytes and invokes the passed callback.\n *\n * N.b. ConfigurableFirmata will issue the 1-wire select command internally.\n * @param pin\n * @param device\n * @param data\n * @param numBytesToRead\n * @param callback\n */\n\nBoard.prototype.sendOneWireWriteAndRead = function(pin, device, data, numBytesToRead, callback) {\n  var correlationId = Math.floor(Math.random() * 255);\n  /* istanbul ignore next */\n  var readTimeout = setTimeout(function() {\n    /* istanbul ignore next */\n    callback(new Error(\"1-Wire device read timeout - are you running ConfigurableFirmata?\"));\n  }, 5000);\n  this._sendOneWireRequest(pin, ONEWIRE_WRITE_REQUEST_BIT | ONEWIRE_READ_REQUEST_BIT, device, numBytesToRead, correlationId, null, Array.isArray(data) ? data : [data], \"1-wire-read-reply-\" + correlationId, function(data) {\n    clearTimeout(readTimeout);\n\n    callback(null, data);\n  });\n};\n\n// see http://firmata.org/wiki/Proposals#OneWire_Proposal\nBoard.prototype._sendOneWireRequest = function(pin, subcommand, device, numBytesToRead, correlationId, delay, dataToWrite, event, callback) {\n  var bytes = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n  if (device || numBytesToRead || correlationId || delay || dataToWrite) {\n    subcommand = subcommand | ONEWIRE_WITHDATA_REQUEST_BITS;\n  }\n\n  if (device) {\n    bytes.splice.apply(bytes, [0, 8].concat(device));\n  }\n\n  if (numBytesToRead) {\n    bytes[8] = numBytesToRead & 0xFF;\n    bytes[9] = (numBytesToRead >> 8) & 0xFF;\n  }\n\n  if (correlationId) {\n    bytes[10] = correlationId & 0xFF;\n    bytes[11] = (correlationId >> 8) & 0xFF;\n  }\n\n  if (delay) {\n    bytes[12] = delay & 0xFF;\n    bytes[13] = (delay >> 8) & 0xFF;\n    bytes[14] = (delay >> 16) & 0xFF;\n    bytes[15] = (delay >> 24) & 0xFF;\n  }\n\n  if (dataToWrite) {\n    dataToWrite.forEach(function(byte) {\n      bytes.push(byte);\n    });\n  }\n\n  var output = [START_SYSEX, ONEWIRE_DATA, subcommand, pin];\n  output = output.concat(Encoder7Bit.to7BitArray(bytes));\n  output.push(END_SYSEX);\n\n  writeToTransport(this, output);\n\n  if (event && callback) {\n    this.once(event, callback);\n  }\n};\n\n/**\n * Set sampling interval in millis. Default is 19 ms\n * @param {number} interval The sampling interval in ms > 10\n */\n\nBoard.prototype.setSamplingInterval = function(interval) {\n  var safeint = interval < 10 ? 10 : (interval > 65535 ? 65535 : interval);\n  this.settings.samplingInterval = safeint;\n  writeToTransport(this, [\n    START_SYSEX,\n    SAMPLING_INTERVAL,\n    (safeint & 0x7F),\n    ((safeint >> 7) & 0x7F),\n    END_SYSEX\n  ]);\n};\n\n/**\n * Get sampling interval in millis. Default is 19 ms\n *\n * @return {number} samplingInterval\n */\n\nBoard.prototype.getSamplingInterval = function() {\n  return this.settings.samplingInterval;\n};\n\n/**\n * Set reporting on pin\n * @param {number} pin The pin to turn on/off reporting\n * @param {number} value Binary value to turn reporting on/off\n */\n\nBoard.prototype.reportAnalogPin = function(pin, value) {\n  /* istanbul ignore else */\n  if (value === 0 || value === 1) {\n    this.pins[this.analogPins[pin]].report = value;\n    writeToTransport(this, [REPORT_ANALOG | pin, value]);\n  }\n};\n\n/**\n * Set reporting on pin\n * @param {number} pin The pin to turn on/off reporting\n * @param {number} value Binary value to turn reporting on/off\n */\n\nBoard.prototype.reportDigitalPin = function(pin, value) {\n  var port = pin >> 3;\n  /* istanbul ignore else */\n  if (value === 0 || value === 1) {\n    this.pins[pin].report = value;\n    writeToTransport(this, [REPORT_DIGITAL | port, value]);\n  }\n};\n\n/**\n *\n *\n */\n\nBoard.prototype.pingRead = function(opts, callback) {\n\n  if (this.pins[opts.pin].supportedModes.indexOf(PING_READ) === -1) {\n    throw new Error(\"Please upload PingFirmata to the board\");\n  }\n\n  var pin = opts.pin;\n  var value = opts.value;\n  var pulseOut = opts.pulseOut || 0;\n  var timeout = opts.timeout || 1000000;\n  var pulseOutArray = [\n    (pulseOut >> 24) & 0xFF,\n    (pulseOut >> 16) & 0xFF,\n    (pulseOut >> 8) & 0XFF,\n    (pulseOut & 0xFF),\n  ];\n  var timeoutArray = [\n    (timeout >> 24) & 0xFF,\n    (timeout >> 16) & 0xFF,\n    (timeout >> 8) & 0XFF,\n    (timeout & 0xFF),\n  ];\n\n  writeToTransport(this, [\n    START_SYSEX,\n    PING_READ,\n    pin,\n    value,\n    pulseOutArray[0] & 0x7F, (pulseOutArray[0] >> 7) & 0x7F,\n    pulseOutArray[1] & 0x7F, (pulseOutArray[1] >> 7) & 0x7F,\n    pulseOutArray[2] & 0x7F, (pulseOutArray[2] >> 7) & 0x7F,\n    pulseOutArray[3] & 0x7F, (pulseOutArray[3] >> 7) & 0x7F,\n    timeoutArray[0] & 0x7F, (timeoutArray[0] >> 7) & 0x7F,\n    timeoutArray[1] & 0x7F, (timeoutArray[1] >> 7) & 0x7F,\n    timeoutArray[2] & 0x7F, (timeoutArray[2] >> 7) & 0x7F,\n    timeoutArray[3] & 0x7F, (timeoutArray[3] >> 7) & 0x7F,\n    END_SYSEX,\n  ]);\n\n  this.once(\"ping-read-\" + pin, callback);\n};\n\n/**\n * Stepper functions to support version 2 of ConfigurableFirmata's asynchronous control of stepper motors\n * https://github.com/soundanalogous/ConfigurableFirmata\n */\n\n/**\n * Asks the arduino to configure a stepper motor with the given config to allow asynchronous control of the stepper\n * @param {object} opts Options:\n *    {number} deviceNum: Device number for the stepper (range 0-9)\n *    {number} type: One of this.STEPPER.TYPE.*\n *    {number} stepSize: One of this.STEPPER.STEP_SIZE.*\n *    {number} stepPin: Only used if STEPPER.TYPE.DRIVER\n *    {number} directionPin: Only used if STEPPER.TYPE.DRIVER\n *    {number} motorPin1: motor pin 1\n *    {number} motorPin2:  motor pin 2\n *    {number} [motorPin3]: Only required if type == this.STEPPER.TYPE.THREE_WIRE || this.STEPPER.TYPE.FOUR_WIRE\n *    {number} [motorPin4]: Only required if type == this.STEPPER.TYPE.FOUR_WIRE\n *    {number} [enablePin]: Enable pin\n *    {array} [invertPins]: Array of pins to invert\n */\n\nBoard.prototype.accelStepperConfig = function(opts) {\n\n  var iface, pinsToInvert = 0x00;\n  var data = [\n    START_SYSEX,\n    ACCELSTEPPER,\n    0x00, // STEPPER_CONFIG from firmware\n    opts.deviceNum\n  ];\n\n  if (typeof opts.type === \"undefined\") {\n    opts.type = this.STEPPER.TYPE.FOUR_WIRE;\n  }\n\n  if (typeof opts.stepSize === \"undefined\") {\n    opts.stepSize = this.STEPPER.STEP_SIZE.WHOLE;\n  }\n\n  iface = ((opts.type & 0x07) << 4) | ((opts.stepSize & 0x07) << 1);\n\n  if (typeof opts.enablePin !== \"undefined\") {\n    iface = iface | 0x01;\n  }\n\n  data.push(iface);\n\n  [\"stepPin\", \"motorPin1\", \"directionPin\", \"motorPin2\", \"motorPin3\", \"motorPin4\", \"enablePin\"].forEach(function(pin) {\n    if (typeof opts[pin] !== \"undefined\") {\n      data.push(opts[pin]);\n    }\n  });\n\n  if (Array.isArray(opts.invertPins)) {\n    if (opts.invertPins.indexOf(opts.motorPin1) !== -1) {\n      pinsToInvert |= 0x01;\n    }\n    if (opts.invertPins.indexOf(opts.motorPin2) !== -1) {\n      pinsToInvert |= 0x02;\n    }\n    if (opts.invertPins.indexOf(opts.motorPin3) !== -1) {\n      pinsToInvert |= 0x04;\n    }\n    if (opts.invertPins.indexOf(opts.motorPin4) !== -1) {\n      pinsToInvert |= 0x08;\n    }\n    if (opts.invertPins.indexOf(opts.enablePin) !== -1) {\n      pinsToInvert |= 0x10;\n    }\n  }\n\n  data.push(\n    pinsToInvert,\n    END_SYSEX\n  );\n\n  writeToTransport(this, data);\n};\n\n/**\n * Asks the arduino to set the stepper position to 0\n * Note: This is not a move. We are setting the current position equal to zero\n * @param {number} deviceNum Device number for the stepper (range 0-9)\n */\n\nBoard.prototype.accelStepperZero = function(deviceNum) {\n\n  var data = [\n    START_SYSEX,\n    ACCELSTEPPER,\n    0x01, // STEPPER_ZERO from firmware\n    deviceNum,\n    END_SYSEX\n  ];\n\n  writeToTransport(this, data);\n};\n\n/**\n * Asks the arduino to move a stepper a number of steps\n * (and optionally with and acceleration and deceleration)\n * speed is in units of steps/sec\n * @param {number} deviceNum Device number for the stepper (range 0-5)\n * @param {number} steps Number of steps to make\n */\nBoard.prototype.accelStepperStep = function(deviceNum, steps, callback) {\n\n  var data = [\n    START_SYSEX,\n    ACCELSTEPPER,\n    0x02, // STEPPER_STEP from firmware\n    deviceNum\n  ];\n\n  Array.prototype.push.apply(data, encode32BitSignedInteger(steps));\n\n  data.push(END_SYSEX);\n\n  writeToTransport(this, data);\n\n  if (callback) {\n    this.once(\"stepper-done-\" + deviceNum, callback);\n  }\n};\n\n/**\n * Asks the arduino to move a stepper to a specific location\n * @param {number} deviceNum Device number for the stepper (range 0-5)\n * @param {number} position Desired position\n */\nBoard.prototype.accelStepperTo = function(deviceNum, position, callback) {\n\n  var data = [\n    START_SYSEX,\n    ACCELSTEPPER,\n    0x03, // STEPPER_TO from firmware\n    deviceNum\n  ];\n\n  Array.prototype.push.apply(data, encode32BitSignedInteger(position));\n  data.push(END_SYSEX);\n\n  writeToTransport(this, data);\n\n  if (callback) {\n    this.once(\"stepper-done-\" + deviceNum, callback);\n  }\n\n};\n\n/**\n * Asks the arduino to enable/disable a stepper\n * @param {number} deviceNum Device number for the stepper (range 0-9)\n * @param {boolean} [enabled]\n */\n\nBoard.prototype.accelStepperEnable = function(deviceNum, enabled) {\n\n  if (typeof enabled === \"undefined\") {\n    enabled = true;\n  }\n\n  var data = [\n    START_SYSEX,\n    ACCELSTEPPER,\n    0x04, // ENABLE from firmware\n    deviceNum,\n    enabled & 0x01,\n    END_SYSEX\n  ];\n\n  writeToTransport(this, data);\n};\n\n/**\n * Asks the arduino to stop a stepper\n * @param {number} deviceNum Device number for the stepper (range 0-9)\n */\n\nBoard.prototype.accelStepperStop = function(deviceNum) {\n\n  var data = [\n    START_SYSEX,\n    ACCELSTEPPER,\n    0x05, // STEPPER_STOP from firmware\n    deviceNum,\n    END_SYSEX\n  ];\n\n  writeToTransport(this, data);\n\n};\n\n/**\n * Asks the arduino to report the position of a stepper\n * @param {number} deviceNum Device number for the stepper (range 0-9)\n */\n\nBoard.prototype.accelStepperReportPosition = function(deviceNum, callback) {\n\n  var data = [\n    START_SYSEX,\n    ACCELSTEPPER,\n    0x06, // STEPPER_REPORT_POSITION from firmware\n    deviceNum,\n    END_SYSEX\n  ];\n\n  writeToTransport(this, data);\n\n  if (callback) {\n    this.once(\"stepper-position-\" + deviceNum, callback);\n  }\n\n};\n\n/**\n * Asks the arduino to set the acceleration for a stepper\n * @param {number} deviceNum Device number for the stepper (range 0-9)\n * @param {number} acceleration Desired acceleration in steps per sec^2\n */\n\nBoard.prototype.accelStepperAcceleration = function(deviceNum, acceleration) {\n\n  var data = [\n    START_SYSEX,\n    ACCELSTEPPER,\n    0x08, // STEPPER_SET_ACCELERATION from firmware\n    deviceNum,\n  ];\n\n  Array.prototype.push.apply(data, encodeCustomFloat(acceleration));\n  data.push(END_SYSEX);\n\n  writeToTransport(this, data);\n};\n\n\n/**\n * Asks the arduino to set the max speed for a stepper\n * @param {number} deviceNum Device number for the stepper (range 0-9)\n * @param {number} speed Desired speed or maxSpeed in steps per second\n * @param {function} [callback]\n */\n\nBoard.prototype.accelStepperSpeed = function(deviceNum, speed) {\n\n  var data = [\n    START_SYSEX,\n    ACCELSTEPPER,\n    0x09, // STEPPER_SET_SPEED from firmware\n    deviceNum];\n\n  Array.prototype.push.apply(data, encodeCustomFloat(speed));\n  data.push(END_SYSEX);\n\n  writeToTransport(this, data);\n};\n\n/**\n * Asks the arduino to configure a multiStepper group\n * @param {object} opts Options:\n *    {number} groupNum: Group number for the multiSteppers (range 0-5)\n *    {number} devices: array of accelStepper device numbers in group\n **/\n\nBoard.prototype.multiStepperConfig = function(opts) {\n\n  var data = [\n    START_SYSEX,\n    ACCELSTEPPER,\n    0x20, // MULTISTEPPER_CONFIG from firmware\n    opts.groupNum\n  ];\n\n  Array.prototype.push.apply(data, opts.devices);\n\n  data.push(END_SYSEX);\n  writeToTransport(this, data);\n};\n\n/**\n * Asks the arduino to move a multiStepper group\n * @param {object} opts Options:\n *    {number} groupNum: Group number for the multiSteppers (range 0-5)\n *    {number} positions: array of absolute stepper positions\n **/\n\nBoard.prototype.multiStepperTo = function(groupNum, positions, callback) {\n\n  var data = [\n    START_SYSEX,\n    ACCELSTEPPER,\n    0x21, // MULTISTEPPER_TO from firmware\n    groupNum\n  ];\n\n  positions.forEach( function(position) {\n    Array.prototype.push.apply(data, encode32BitSignedInteger(position));\n  });\n\n  data.push(END_SYSEX);\n  writeToTransport(this, data);\n\n  if (callback) {\n    this.once(\"multi-stepper-done-\" + groupNum, callback);\n  }\n\n};\n\n/**\n * Asks the arduino to stop a multiStepper group\n * @param {object} opts Options:\n *    {number} groupNum: Group number for the multiSteppers (range 0-5)\n **/\n\nBoard.prototype.multiStepperStop = function(groupNum) {\n\n  var data = [\n    START_SYSEX,\n    ACCELSTEPPER,\n    0x23, // MULTISTEPPER_STOP from firmware\n    groupNum,\n    END_SYSEX\n  ];\n\n  writeToTransport(this, data);\n\n};\n\n/**\n * Stepper functions to support AdvancedFirmata's asynchronous control of stepper motors\n * https://github.com/soundanalogous/AdvancedFirmata\n */\n\n/**\n * Asks the arduino to configure a stepper motor with the given config to allow asynchronous control of the stepper\n * @param {number} deviceNum Device number for the stepper (range 0-5, expects steppers to be setup in order from 0 to 5)\n * @param {number} type One of this.STEPPER.TYPE.*\n * @param {number} stepsPerRev Number of steps motor takes to make one revolution\n * @param {number} stepOrMotor1Pin If using EasyDriver type stepper driver, this is direction pin, otherwise it is motor 1 pin\n * @param {number} dirOrMotor2Pin If using EasyDriver type stepper driver, this is step pin, otherwise it is motor 2 pin\n * @param {number} [motorPin3] Only required if type == this.STEPPER.TYPE.FOUR_WIRE\n * @param {number} [motorPin4] Only required if type == this.STEPPER.TYPE.FOUR_WIRE\n */\n\nBoard.prototype.stepperConfig = function(deviceNum, type, stepsPerRev, dirOrMotor1Pin, dirOrMotor2Pin, motorPin3, motorPin4) {\n  var data = [\n    START_SYSEX,\n    STEPPER,\n    0x00, // STEPPER_CONFIG from firmware\n    deviceNum,\n    type,\n    stepsPerRev & 0x7F, (stepsPerRev >> 7) & 0x7F,\n    dirOrMotor1Pin,\n    dirOrMotor2Pin,\n  ];\n  if (type === this.STEPPER.TYPE.FOUR_WIRE) {\n    data.push(motorPin3, motorPin4);\n  }\n  data.push(END_SYSEX);\n  writeToTransport(this, data);\n};\n\n/**\n * Asks the arduino to move a stepper a number of steps at a specific speed\n * (and optionally with and acceleration and deceleration)\n * speed is in units of .01 rad/sec\n * accel and decel are in units of .01 rad/sec^2\n * TODO: verify the units of speed, accel, and decel\n * @param {number} deviceNum Device number for the stepper (range 0-5)\n * @param {number} direction One of this.STEPPER.DIRECTION.*\n * @param {number} steps Number of steps to make\n * @param {number} speed\n * @param {number|function} accel Acceleration or if accel and decel are not used, then it can be the callback\n * @param {number} [decel]\n * @param {function} [callback]\n */\n\nBoard.prototype.stepperStep = function(deviceNum, direction, steps, speed, accel, decel, callback) {\n  if (typeof accel === \"function\") {\n    callback = accel;\n    accel = 0;\n    decel = 0;\n  }\n\n  var data = [\n    START_SYSEX,\n    STEPPER,\n    0x01, // STEPPER_STEP from firmware\n    deviceNum,\n    direction, // one of this.STEPPER.DIRECTION.*\n    steps & 0x7F, (steps >> 7) & 0x7F, (steps >> 14) & 0x7f,\n    speed & 0x7F, (speed >> 7) & 0x7F\n  ];\n  if (accel > 0 || decel > 0) {\n    data.push(\n      accel & 0x7F, (accel >> 7) & 0x7F,\n      decel & 0x7F, (decel >> 7) & 0x7F\n    );\n  }\n  data.push(END_SYSEX);\n  writeToTransport(this, data);\n  this.once(\"stepper-done-\" + deviceNum, callback);\n};\n\n/**\n * Asks the Arduino to configure a hardware or serial port.\n * @param {object} options Options:\n *   portId {number} The serial port to use (HW_SERIAL1, HW_SERIAL2, HW_SERIAL3, SW_SERIAL0,\n *   SW_SERIAL1, SW_SERIAL2, SW_SERIAL3)\n *   baud {number} The baud rate of the serial port\n *   rxPin {number} [SW Serial only] The RX pin of the SoftwareSerial instance\n *   txPin {number} [SW Serial only] The TX pin of the SoftwareSerial instance\n */\n\nBoard.prototype.serialConfig = function(options) {\n\n  var portId;\n  var baud;\n  var rxPin;\n  var txPin;\n\n  /* istanbul ignore else */\n  if (typeof options === \"object\" && options !== null) {\n    portId = options.portId;\n    baud = options.baud;\n    rxPin = options.rxPin;\n    txPin = options.txPin;\n  }\n\n  /* istanbul ignore else */\n  if (typeof portId === \"undefined\") {\n    throw new Error(\"portId must be specified, see SERIAL_PORT_IDs for options.\");\n  }\n\n  baud = baud || 57600;\n\n  var data = [\n    START_SYSEX,\n    SERIAL_MESSAGE,\n    SERIAL_CONFIG | portId,\n    baud & 0x007F,\n    (baud >> 7) & 0x007F,\n    (baud >> 14) & 0x007F\n  ];\n  if (portId > 7 && typeof rxPin !== \"undefined\" && typeof txPin !== \"undefined\") {\n    data.push(rxPin);\n    data.push(txPin);\n  } else if (portId > 7) {\n    throw new Error(\"Both RX and TX pins must be defined when using Software Serial.\");\n  }\n\n  data.push(END_SYSEX);\n  writeToTransport(this, data);\n};\n\n/**\n * Write an array of bytes to the specified serial port.\n * @param {number} portId The serial port to write to.\n * @param {Array} inBytes An array of bytes to write to the serial port.\n */\n\nBoard.prototype.serialWrite = function(portId, inBytes) {\n  var data = [\n    START_SYSEX,\n    SERIAL_MESSAGE,\n    SERIAL_WRITE | portId,\n  ];\n  for (var i = 0, len = inBytes.length; i < len; i++) {\n    data.push(inBytes[i] & 0x007F);\n    data.push((inBytes[i] >> 7) & 0x007F);\n  }\n  data.push(END_SYSEX);\n  /* istanbul ignore else */\n  if (inBytes.length > 0) {\n    writeToTransport(this, data);\n  }\n};\n\n/**\n * Start continuous reading of the specified serial port. The port is checked for data each\n * iteration of the main Arduino loop.\n * @param {number} portId The serial port to start reading continuously.\n * @param {number} maxBytesToRead [Optional] The maximum number of bytes to read per iteration.\n * If there are less bytes in the buffer, the lesser number of bytes will be returned. A value of 0\n * indicates that all available bytes in the buffer should be read.\n * @param {function} callback A function to call when we have received the bytes.\n */\n\nBoard.prototype.serialRead = function(portId, maxBytesToRead, callback) {\n  var data = [\n    START_SYSEX,\n    SERIAL_MESSAGE,\n    SERIAL_READ | portId,\n    this.SERIAL_MODES.CONTINUOUS_READ\n  ];\n\n  if (arguments.length === 2 && typeof maxBytesToRead === \"function\") {\n    callback = maxBytesToRead;\n  } else {\n    data.push(maxBytesToRead & 0x007F);\n    data.push((maxBytesToRead >> 7) & 0x007F);\n  }\n\n  data.push(END_SYSEX);\n  writeToTransport(this, data);\n\n  this.on(\"serial-data-\" + portId, callback);\n};\n\n/**\n * Stop continuous reading of the specified serial port. This does not close the port, it stops\n * reading it but keeps the port open.\n * @param {number} portId The serial port to stop reading.\n */\n\nBoard.prototype.serialStop = function(portId) {\n  writeToTransport(this, [\n    START_SYSEX,\n    SERIAL_MESSAGE,\n    SERIAL_READ | portId,\n    this.SERIAL_MODES.STOP_READING,\n    END_SYSEX,\n  ]);\n\n  this.removeAllListeners(\"serial-data-\" + portId);\n};\n\n/**\n * Close the specified serial port.\n * @param {number} portId The serial port to close.\n */\n\nBoard.prototype.serialClose = function(portId) {\n  writeToTransport(this, [\n    START_SYSEX,\n    SERIAL_MESSAGE,\n    SERIAL_CLOSE | portId,\n    END_SYSEX,\n  ]);\n};\n\n/**\n * Flush the specified serial port. For hardware serial, this waits for the transmission of\n * outgoing serial data to complete. For software serial, this removed any buffered incoming serial\n * data.\n * @param {number} portId The serial port to flush.\n */\n\nBoard.prototype.serialFlush = function(portId) {\n  writeToTransport(this, [\n    START_SYSEX,\n    SERIAL_MESSAGE,\n    SERIAL_FLUSH | portId,\n    END_SYSEX,\n  ]);\n};\n\n/**\n * For SoftwareSerial only. Only a single SoftwareSerial instance can read data at a time.\n * Call this method to set this port to be the reading port in the case there are multiple\n * SoftwareSerial instances.\n * @param {number} portId The serial port to listen on.\n */\n\nBoard.prototype.serialListen = function(portId) {\n  // listen only applies to software serial ports\n  if (portId < 8) {\n    return;\n  }\n  writeToTransport(this, [\n    START_SYSEX,\n    SERIAL_MESSAGE,\n    SERIAL_LISTEN | portId,\n    END_SYSEX,\n  ]);\n};\n\n/**\n * Allow user code to handle arbitrary sysex responses\n *\n * @param {number} commandByte The commandByte must be associated with some message\n *                             that's expected from the slave device. The handler is\n *                             called with an array of _raw_ data from the slave. Data\n *                             decoding must be done within the handler itself.\n *\n *                             Use Board.decode(data) to extract useful values from\n *                             the incoming response data.\n *\n *  @param {function} handler Function which handles receipt of responses matching\n *                            commandByte.\n */\n\nBoard.prototype.sysexResponse = function(commandByte, handler) {\n  if (Board.SYSEX_RESPONSE[commandByte]) {\n    throw new Error(commandByte + \" is not an available SYSEX_RESPONSE byte\");\n  }\n\n  Board.SYSEX_RESPONSE[commandByte] = function(board) {\n    handler.call(board, board.currentBuffer.slice(2, -1));\n  };\n\n  return this;\n};\n\n/**\n * Allow user code to send arbitrary sysex messages\n *\n * @param {Array} message The message array is expected to be all necessary bytes\n *                        between START_SYSEX and END_SYSEX (non-inclusive). It will\n *                        be assumed that the data in the message array is\n *                        already encoded as 2 7-bit bytes LSB first.\n *\n *\n */\n\nBoard.prototype.sysexCommand = function(message) {\n\n  if (!message || !message.length) {\n    throw new Error(\"Sysex Command cannot be empty\");\n  }\n\n  var data = message.slice();\n\n  data.unshift(START_SYSEX);\n  data.push(END_SYSEX);\n\n  writeToTransport(this, data);\n  return this;\n};\n\n\n/**\n * Send SYSTEM_RESET to arduino\n */\n\nBoard.prototype.reset = function() {\n  writeToTransport(this, [SYSTEM_RESET]);\n};\n\n/**\n * Board.isAcceptablePort Determines if a `port` object (from SerialPort.list(...))\n * is a valid Arduino (or similar) device.\n * @return {Boolean} true if port can be connected to by Firmata\n */\n\nBoard.isAcceptablePort = function(port) {\n  var rport = /usb|acm|^com/i;\n\n  if (rport.test(port.comName)) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Board.requestPort(callback) Request an acceptable port to connect to.\n * callback(error, port)\n */\n\nBoard.requestPort = function(callback) {\n  com.list(function(error, ports) {\n    var port = ports.find(function(port) {\n      if (Board.isAcceptablePort(port)) {\n        return port;\n      }\n    });\n\n    if (port) {\n      callback(null, port);\n    } else {\n      callback(new Error(\"No Acceptable Port Found\"), null);\n    }\n  });\n};\n\n// For backwards compatibility\nBoard.Board = Board;\nBoard.SYSEX_RESPONSE = SYSEX_RESPONSE;\nBoard.MIDI_RESPONSE = MIDI_RESPONSE;\n\n// Expose encode/decode for custom sysex messages\nBoard.encode = function(data) {\n  var encoded = [];\n  var length = data.length;\n\n  for (var i = 0; i < length; i++) {\n    encoded.push(\n      data[i] & 0x7F,\n      (data[i] >> 7) & 0x7F\n    );\n  }\n\n  return encoded;\n};\n\nBoard.decode = function(data) {\n  var decoded = [];\n\n  if (data.length % 2 !== 0) {\n    throw new Error(\"Board.decode(data) called with odd number of data bytes\");\n  }\n\n  while (data.length) {\n    var lsb = data.shift();\n    var msb = data.shift();\n    decoded.push(lsb | (msb << 7));\n  }\n\n  return decoded;\n};\n\n// The following are used internally.\n\nfunction encode32BitSignedInteger(data) {\n  var encoded = [];\n  var negative = data < 0;\n\n  data = Math.abs(data);\n\n  encoded.push(\n    data & 0x7F,\n    (data >> 7) & 0x7F,\n    (data >> 14) & 0x7F,\n    (data >> 21) & 0x7F,\n    (data >> 28) & 0x07\n  );\n\n  if (negative) {\n    encoded[encoded.length - 1] |= 0x08;\n  }\n\n  return encoded;\n}\n\nfunction decode32BitSignedInteger(bytes) {\n  var result = (bytes[0] & 0x7f) |\n    ((bytes[1] & 0x7f) << 7) |\n    ((bytes[2] & 0x7f) << 14) |\n    ((bytes[3] & 0x7f) << 21) |\n    ((bytes[4] & 0x07) << 28);\n\n  if (bytes[4] >> 3) {\n    result *= -1;\n  }\n\n  return result;\n}\n\nconst MAX_SIGNIFICAND = Math.pow(2, 23);\n\nfunction encodeCustomFloat(input) {\n  var encoded = [];\n  var exponent = 0;\n  var sign = input < 0 ? 1 : 0;\n\n  input = Math.abs(input);\n\n  var base10 = Math.floor(Math.log10(input));\n\n  // Shift decimal to start of significand\n  exponent += base10;\n  input /= Math.pow(10, base10);\n\n  // Shift decimal to the right as far as we can\n  while (!Number.isInteger(input) && input < MAX_SIGNIFICAND) {\n    exponent -= 1;\n    input *= 10;\n  }\n\n  // Reduce precision if necessary\n  while (input > MAX_SIGNIFICAND) {\n    exponent += 1;\n    input /= 10;\n  }\n\n  input = Math.trunc(input);\n  exponent += 11;\n\n  encoded = [\n    input & 0x7f,\n    (input >> 7) & 0x7f,\n    (input >> 14) & 0x7f,\n    (input >> 21) & 0x03 | (exponent & 0x0f) << 2 | (sign & 0x01) << 6\n  ];\n\n  return encoded;\n}\n\nfunction decodeCustomFloat(input) {\n  var result = input[0] |\n    (input[1] << 7) |\n    (input[2] << 14) |\n    (input[3] & 0x03) << 21;\n  var exponent = ((input[3] >> 2) & 0x0f) - 11;\n  var sign = (input[3] >> 6) & 0x01;\n\n  if (sign) {\n    result *= -1;\n  }\n  return result * Math.pow(10, exponent);\n}\n\n\n/* istanbul ignore else */\nif (process.env.IS_TEST_MODE) {\n  Board.test = {\n    writeToTransport: writeToTransport,\n    i2cPeripheralSettings: function(board) {\n      return i2cActive.get(board);\n    },\n    get i2cActive() {\n      return i2cActive;\n    },\n    encode32BitSignedInteger,\n    decode32BitSignedInteger,\n    encodeCustomFloat,\n    decodeCustomFloat,\n  };\n}\n\nmodule.exports = Board;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer, __webpack_require__(/*! ./../../../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/johnny-five/node_modules/firmata/lib/firmata.js?");

/***/ }),

/***/ "./node_modules/johnny-five/node_modules/firmata/lib/onewireutils.js":
/*!***************************************************************************!*\
  !*** ./node_modules/johnny-five/node_modules/firmata/lib/onewireutils.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nconst Encoder7Bit = __webpack_require__(/*! ./encoder7bit */ \"./node_modules/johnny-five/node_modules/firmata/lib/encoder7bit.js\");\nconst OneWireUtils = {\n  crc8(data) {\n    let crc = 0;\n\n    for (let inbyte of data) {\n      for (let n = 8; n; n--) {\n        const mix = (crc ^ inbyte) & 0x01;\n        crc >>= 1;\n\n        if (mix) {\n          crc ^= 0x8C;\n        }\n\n        inbyte >>= 1;\n      }\n    }\n\n    return crc;\n  },\n\n  readDevices(data) {\n    const deviceBytes = Encoder7Bit.from7BitArray(data);\n    const devices = [];\n\n    for (let i = 0; i < deviceBytes.length; i += 8) {\n      const device = deviceBytes.slice(i, i + 8);\n\n      if (device.length !== 8) {\n        continue;\n      }\n\n      const check = OneWireUtils.crc8(device.slice(0, 7));\n\n      if (check !== device[7]) {\n        console.error(\"ROM invalid!\");\n      }\n\n      devices.push(device);\n    }\n\n    return devices;\n  }\n};\n\nmodule.exports = OneWireUtils;\n\n\n//# sourceURL=webpack:///./node_modules/johnny-five/node_modules/firmata/lib/onewireutils.js?");

/***/ }),

/***/ "./node_modules/lodash.clonedeep/index.js":
/*!************************************************!*\
  !*** ./node_modules/lodash.clonedeep/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, module) {/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports =  true && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))\n\n//# sourceURL=webpack:///./node_modules/lodash.clonedeep/index.js?");

/***/ }),

/***/ "./node_modules/lodash.debounce/index.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash.debounce/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/lodash.debounce/index.js?");

/***/ }),

/***/ "./node_modules/lodash.padend/index.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash.padend/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991,\n    MAX_INTEGER = 1.7976931348623157e+308,\n    NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20f0',\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * Gets the size of an ASCII `string`.\n *\n * @private\n * @param {string} string The string inspect.\n * @returns {number} Returns the string size.\n */\nvar asciiSize = baseProperty('length');\n\n/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\n/**\n * Gets the number of symbols in `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the string size.\n */\nfunction stringSize(string) {\n  return hasUnicode(string)\n    ? unicodeSize(string)\n    : asciiSize(string);\n}\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\n/**\n * Gets the size of a Unicode `string`.\n *\n * @private\n * @param {string} string The string inspect.\n * @returns {number} Returns the string size.\n */\nfunction unicodeSize(string) {\n  var result = reUnicode.lastIndex = 0;\n  while (reUnicode.test(string)) {\n    result++;\n  }\n  return result;\n}\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n    nativeFloor = Math.floor;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.repeat` which doesn't coerce arguments.\n *\n * @private\n * @param {string} string The string to repeat.\n * @param {number} n The number of times to repeat the string.\n * @returns {string} Returns the repeated string.\n */\nfunction baseRepeat(string, n) {\n  var result = '';\n  if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\n    return result;\n  }\n  // Leverage the exponentiation by squaring algorithm for a faster repeat.\n  // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n  do {\n    if (n % 2) {\n      result += string;\n    }\n    n = nativeFloor(n / 2);\n    if (n) {\n      string += string;\n    }\n  } while (n);\n\n  return result;\n}\n\n/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\n}\n\n/**\n * Creates the padding for `string` based on `length`. The `chars` string\n * is truncated if the number of characters exceeds `length`.\n *\n * @private\n * @param {number} length The padding length.\n * @param {string} [chars=' '] The string used as padding.\n * @returns {string} Returns the padding for `string`.\n */\nfunction createPadding(length, chars) {\n  chars = chars === undefined ? ' ' : baseToString(chars);\n\n  var charsLength = chars.length;\n  if (charsLength < 2) {\n    return charsLength ? baseRepeat(chars, length) : chars;\n  }\n  var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n  return hasUnicode(chars)\n    ? castSlice(stringToArray(result), 0, length).join('')\n    : result.slice(0, length);\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Pads `string` on the right side if it's shorter than `length`. Padding\n * characters are truncated if they exceed `length`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to pad.\n * @param {number} [length=0] The padding length.\n * @param {string} [chars=' '] The string used as padding.\n * @returns {string} Returns the padded string.\n * @example\n *\n * _.padEnd('abc', 6);\n * // => 'abc   '\n *\n * _.padEnd('abc', 6, '_-');\n * // => 'abc_-_'\n *\n * _.padEnd('abc', 3);\n * // => 'abc'\n */\nfunction padEnd(string, length, chars) {\n  string = toString(string);\n  length = toInteger(length);\n\n  var strLength = length ? stringSize(string) : 0;\n  return (length && strLength < length)\n    ? (string + createPadding(length - strLength, chars))\n    : string;\n}\n\nmodule.exports = padEnd;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/lodash.padend/index.js?");

/***/ }),

/***/ "./node_modules/nanotimer/lib/nanoTimer.js":
/*!*************************************************!*\
  !*** ./node_modules/nanotimer/lib/nanoTimer.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process, setImmediate, clearImmediate) {function NanoTimer(log){\r\n\r\n    var version = process.version;\r\n\tvar major = version.split('.')[0];\r\n\tmajor = major.split('v')[1];\r\n    var minor = version.split('.')[1];\r\n    if ((major == 0) && (minor < 10)){\r\n        console.log('Error: Please update to the latest version of node! This library requires 0.10.x or later');\r\n        process.exit(0);\r\n    }\r\n\t\r\n\t//Time reference variables\r\n    this.intervalT1 = null;\r\n\tthis.timeOutT1 = null;\r\n    this.intervalCount = 1; \r\n\t\r\n\t//Deferred reference indicator variables.  Indicate whether the timer used/will use the deferred call. ie - delay/interval > 25ms\r\n    this.deferredInterval = false;\r\n    this.deferredTimeout = false;\r\n\t\r\n\t//Deferred reference variables.  Used to clear the native js timeOut calls\r\n\tthis.deferredTimeoutRef = null;\r\n\tthis.deferredIntervalRef = null;\r\n\t\r\n\t//Callback reference variables.  Used to be able to still successfully call callbacks when timeouts or intervals are cleared.\r\n\tthis.timeoutCallbackRef = null;\r\n\tthis.intervalCallbackRef = null;\r\n\t\r\n\t//Immediate reference variables. Used to clear functions scheduled with setImmediate from running in the event timeout/interval is cleared.\r\n\tthis.timeoutImmediateRef = null;\r\n\tthis.intervalImmediateRef = null;\r\n\t\r\n\tthis.intervalErrorChecked = false;\r\n\t\r\n\tthis.intervalType = \"\";\r\n    \r\n    if(log){\r\n        this.logging = true;\r\n    }\r\n}\r\n\r\nNanoTimer.prototype.time = function(task, args, format, callback){\r\n  //Asynchronous task\r\n    if(callback){\r\n        var t1 = process.hrtime();\r\n        \r\n        \r\n        if(args){\r\n        \r\n            args.push(function(){\r\n                var time = process.hrtime(t1);\r\n                if(format == 's'){\r\n                    callback(time[0] + time[1]/1000000000);\r\n                } else if (format == 'm'){\r\n                    callback(time[0]/1000 + time[1]/1000000);\r\n                } else if (format == 'u'){\r\n                    callback(time[0]/1000000 + time[1]/1000);\r\n                } else if (format == 'n'){\r\n                    callback(time[0]/1000000000 + time[1]);\r\n                } else {\r\n                    callback(time); \r\n                }\r\n            });\r\n           \r\n            task.apply(null, args);\r\n        } else {\r\n            task(function(){\r\n                var time = process.hrtime(t1);\r\n                if(format == 's'){\r\n                    callback(time[0] + time[1]/1000000000);\r\n                } else if (format == 'm'){\r\n                    callback(time[0]/1000 + time[1]/1000000);\r\n                } else if (format == 'u'){\r\n                    callback(time[0]/1000000 + time[1]/1000);\r\n                } else if (format == 'n'){\r\n                    callback(time[0]/1000000000 + time[1]);\r\n                } else {\r\n                    callback(time); \r\n                }\r\n            });\r\n        }\r\n        \r\n    //Synchronous task\r\n    } else {\r\n        var t1 = process.hrtime();\r\n        \r\n        if(args){\r\n            task.apply(null, args);\r\n        } else{\r\n            task();\r\n        }\r\n        \r\n        var t2 = process.hrtime(t1);\r\n        \r\n        if(format == 's'){\r\n            return t2[0] + t2[1]/1000000000;\r\n        } else if (format == 'm'){\r\n            return t2[0]/1000 + t2[1]/1000000;\r\n        } else if (format == 'u'){\r\n            return t2[0]/1000000 + t2[1]/1000;\r\n        } else if (format == 'n'){\r\n            return t2[0]/1000000000 + t2[1];\r\n        } else {\r\n            return process.hrtime(t1);\r\n        } \r\n    } \r\n};\r\n\r\nNanoTimer.prototype.setInterval = function(task, args, interval, callback){\r\n\r\n\tif(!this.intervalErrorChecked){\r\n\t\t//Task error handling\r\n\t\tif(!task){\r\n\t\t\tconsole.log(\"A task function must be specified to setInterval\");\r\n\t\t\tprocess.exit(1);\r\n\t\t} else {\r\n\t\t\tif(typeof(task) != \"function\"){\r\n\t\t\t\tconsole.log(\"Task argument to setInterval must be a function reference\");\r\n\t\t\t\tprocess.exit(1);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//Interval error handling\r\n\t\tif(!interval){\r\n\t\t\tconsole.log(\"An interval argument must be specified\");\r\n\t\t\tprocess.exit(1);\r\n\t\t} else {\r\n\t\t\tif(typeof(interval) != \"string\"){\r\n\t\t\t\tconsole.log(\"Interval argument to setInterval must be a string specified as an integer followed by 's' for seconds, 'm' for milli, 'u' for micro, and 'n' for nanoseconds. Ex. 2u\");\r\n\t\t\t\tprocess.exit(1);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//This ref is used if deferred timeout is cleared, so the callback can still be accessed\r\n\t\tif(callback){\r\n\t\t\tif(typeof(callback) != \"function\"){\r\n\t\t\t\tconsole.log(\"Callback argument to setInterval must be a function reference\");\r\n\t\t\t\tprocess.exit(1);\r\n\t\t\t} else {\r\n\t\t\t\tthis.intervalCallbackRef = callback;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tthis.intervalType = interval[interval.length-1];\r\n\t\t\r\n\t\tif(this.intervalType == 's'){\r\n\t\t\tthis.intervalTime = interval.slice(0, interval.length-1) * 1000000000;\r\n\t\t} else if(this.intervalType == 'm'){\r\n\t\t\tthis.intervalTime = interval.slice(0, interval.length-1) * 1000000;\r\n\t\t} else if(this.intervalType == 'u'){\r\n\t\t\tthis.intervalTime = interval.slice(0, interval.length-1) * 1000;\r\n\t\t} else if(this.intervalType == 'n'){\r\n\t\t\tthis.intervalTime = interval.slice(0, interval.length-1);\r\n\t\t} else {\r\n\t\t\tconsole.log('Error with argument: ' + interval + ': Incorrect interval format. Format is an integer followed by \"s\" for seconds, \"m\" for milli, \"u\" for micro, and \"n\" for nanoseconds. Ex. 2u');\r\n\t\t\tprocess.exit(1);\r\n\t\t}\r\n\t\t\r\n\t\tthis.intervalErrorChecked = true;\r\n\t}\r\n\r\n    //Avoid dereferencing inside of function objects later\r\n\t//Must be performed on every execution \r\n    var thisTimer = this;\r\n    \r\n    if(this.intervalTime > 0){\r\n        \r\n        //Check and set constant t1 value.\r\n        if(this.intervalT1 == null){\r\n            this.intervalT1 = process.hrtime();\r\n        }\r\n        \r\n        //Check for overflow.  Every 8,000,000 seconds (92.6 days), this will overflow\r\n        //and the reference time T1 will be re-acquired.  This is the only case in which error will \r\n        //propagate.\r\n        if(this.intervalTime*this.intervalCount > 8000000000000000){\r\n            this.intervalT1 = process.hrtime();\r\n            this.intervalCount = 1;\r\n        }\r\n\t\t\r\n        \r\n        //Get comparison time\r\n        this.difArray = process.hrtime(this.intervalT1);\r\n        this.difTime = (this.difArray[0] * 1000000000) + this.difArray[1];\r\n        \r\n\t\t//If updated time < expected time, continue\r\n        //Otherwise, run task and update counter\r\n\t\tif(this.difTime < (this.intervalTime*this.intervalCount)){\r\n\t\t\t\r\n\t\t\t//Can potentially defer to less accurate setTimeout if intervaltime > 25ms\r\n\t\t\tif(this.intervalTime > 25000000){\r\n\t\t\t\tif(this.deferredInterval == false){\r\n\t\t\t\t\tthis.deferredInterval = true;\r\n\t\t\t\t\tmsDelay = (this.intervalTime - 25000000) / 1000000.0;\r\n\t\t\t\t\tthis.deferredIntervalRef = setTimeout(function(){thisTimer.setInterval(task, args, interval, callback);}, msDelay);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.deferredIntervalRef = null;\r\n\t\t\t\t\tthis.intervalImmediateRef = setImmediate(function(){thisTimer.setInterval(task, args, interval, callback);});\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.intervalImmediateRef = setImmediate(function(){thisTimer.setInterval(task, args, interval, callback);});\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t\r\n\t\t\tthis.intervalImmediateRef = null;\r\n\t\t\t\r\n\t\t\tif(this.logging){\r\n\t\t\t\tconsole.log('nanotimer log: ' + 'cycle time at - ' + this.difTime);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif(args){\r\n\t\t\t\ttask.apply(null, args);\r\n\t\t\t} else {\r\n\t\t\t\ttask();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//Check if the intervalT1 is still not NULL. If it is, that means the task cleared the interval so it should not run again.\r\n\t\t\tif(this.intervalT1){\r\n\t\t\t\tthis.intervalCount++;\r\n\t\t\t\tthis.deferredInterval = false;\r\n\t\t\t\tthis.intervalImmediateRef = setImmediate(function(){thisTimer.setInterval(task, args, interval, callback);});\r\n\t\t\t}\r\n\t\t}\r\n        \r\n    //If interval = 0, run as fast as possible.\r\n    } else {\r\n        \r\n      //Check and set constant t1 value.\r\n        if(this.intervalT1 == null){\r\n            this.intervalT1 = process.hrtime();\r\n            this.intervalContinue = true;\r\n        }\r\n        \r\n        if(this.intervalContinue == true) {\r\n            if(args){\r\n                task.apply(null, args);\r\n            } else {\r\n                task();\r\n            }\r\n            setImmediate(function(){thisTimer.setInterval(task, args, interval, callback);});\r\n        } else {\r\n            this.intervalT1 = null;\r\n            this.intervalCount = 1;\r\n            callback();\r\n        }  \r\n    }\r\n};\r\n\r\nNanoTimer.prototype.setTimeout = function(task, args, delay, callback){\r\n\r\n\t//Task error handling\r\n\tif(!task){\r\n\t\tconsole.log(\"A task function must be specified to setTimeout\");\r\n\t\tprocess.exit(1);\r\n\t} else {\r\n\t\tif(typeof(task) != \"function\"){\r\n\t\t\tconsole.log(\"Task argument to setTimeout must be a function reference\");\r\n\t\t\tprocess.exit(1);\r\n\t\t}\r\n\t}\r\n\t\r\n\t//Delay error handling\r\n\tif(!delay){\r\n\t\tconsole.log(\"A delay argument must be specified\");\r\n\t\tprocess.exit(1);\r\n\t} else {\r\n\t\tif(typeof(delay) != \"string\"){\r\n\t\t\tconsole.log(\"Delay argument to setTimeout must be a string specified as an integer followed by 's' for seconds, 'm' for milli, 'u' for micro, and 'n' for nanoseconds. Ex. 2u\");\r\n\t\t\tprocess.exit(1);\r\n\t\t}\r\n\t}\r\n\t\r\n\t//This ref is used if deferred timeout is cleared, so the callback can still be accessed\r\n\tif(callback){\r\n\t\tif(typeof(callback) != \"function\"){\r\n\t\t\tconsole.log(\"Callback argument to setTimeout must be a function reference\");\r\n\t\t\tprocess.exit(1);\r\n\t\t} else {\r\n\t\t\tthis.timeoutCallbackRef = callback;\r\n\t\t}\r\n\t}\r\n    \r\n    //Avoid dereferencing\r\n    var thisTimer = this;\r\n    \r\n\tvar delayType = delay[delay.length-1];\r\n\r\n\tif(delayType == 's'){\r\n\t\tvar delayTime = delay.slice(0, delay.length-1) * 1000000000;\r\n\t} else if(delayType == 'm'){\r\n\t\tvar delayTime = delay.slice(0, delay.length-1) * 1000000;\r\n\t} else if(delayType == 'u'){\r\n\t\tvar delayTime = delay.slice(0, delay.length-1) * 1000;\r\n\t} else if(delayType == 'n'){\r\n\t\tvar delayTime = delay.slice(0, delay.length-1);\r\n\t} else {\r\n\t\tconsole.log('Error with argument: ' + delay + ': Incorrect delay format. Format is an integer followed by \"s\" for seconds, \"m\" for milli, \"u\" for micro, and \"n\" for nanoseconds. Ex. 2u');\r\n\t\tprocess.exit(1);\r\n\t}\r\n    \r\n    //Set marker\r\n\tif(this.timeOutT1 == null){\r\n\t\tthis.timeOutT1 = process.hrtime();\r\n\t}\r\n\t\r\n\t\r\n\tvar difArray = process.hrtime(this.timeOutT1);\r\n\tvar difTime = (difArray[0] * 1000000000) + difArray[1];\r\n    \r\n    \r\n\tif(difTime < delayTime){\r\n\t\t//Can potentially defer to less accurate setTimeout if delayTime > 25ms\r\n\t\tif(delayTime > 25000000){\r\n\t\t\tif(this.deferredTimeout == false){\r\n\t\t\t\tthis.deferredTimeout = true;\r\n\t\t\t\tmsDelay = (delayTime - 25000000) / 1000000.0;\r\n\t\t\t\tthis.deferredTimeoutRef = setTimeout(function(){thisTimer.setTimeout(task, args, delay, callback);}, msDelay);\r\n\t\t\t} else {\r\n\t\t\t\tthis.deferredTimeoutRef = null;\r\n\t\t\t\tthis.timeoutImmediateRef = setImmediate(function(){thisTimer.setTimeout(task, args, delay, callback);});\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.timeoutImmediateRef = setImmediate(function(){thisTimer.setTimeout(task, args, delay, callback);});\r\n\t\t}\r\n\t} else {\r\n\t\tthis.timeoutImmediateRef = null;\r\n\t\tthis.timeOutT1 = null;\r\n\t\tthis.deferredTimeout = false;\r\n\t\t\r\n\t\tif(this.logging == true){\r\n\t\t\tconsole.log('nanotimer log: ' + 'actual wait - ' + difTime);\r\n\t\t}\r\n\t\t\r\n\t\tif(args){\r\n\t\t\ttask.apply(null, args);\r\n\t\t} else{\r\n\t\t\ttask();\r\n\t\t}\r\n\t\t\r\n\t\tif(callback){\r\n\t\t\tvar data = {'waitTime':difTime};\r\n\t\t\tcallback(data);\r\n\t\t}\r\n\r\n\t}\r\n};\r\n\r\nNanoTimer.prototype.clearInterval = function(){\r\n\tif(this.deferredIntervalRef){\r\n\t\tclearTimeout(this.deferredIntervalRef);\r\n\t\t\r\n\t\tthis.deferredInterval = false;\r\n\t}\r\n\t\r\n\tif(this.intervalImmediateRef){\r\n\t\tclearImmediate(this.intervalImmediateRef);\r\n\t}\r\n\t\r\n\tthis.intervalT1 = null;\r\n\tthis.intervalCount = 1;\r\n\tthis.intervalErrorChecked = false;\r\n\t\r\n\tif(this.intervalCallbackRef){\r\n\t\tthis.intervalCallbackRef();\r\n\t}\r\n};\r\n\r\nNanoTimer.prototype.clearTimeout = function(){\r\n\t\r\n\tif(this.deferredTimeoutRef){\r\n\t\tclearTimeout(this.deferredTimeoutRef);\r\n\t\t\r\n\t\tvar difArray = process.hrtime(this.timeOutT1);\r\n\t\tvar difTime = (difArray[0] * 1000000000) + difArray[1];\r\n\t\t\r\n\t\tthis.deferredTimeout = false;\r\n\t}\r\n\t\r\n\tif(this.timeoutImmediateRef){\r\n\t\tclearImmediate(this.timeoutImmediateRef);\r\n\t}\r\n\t\r\n\tthis.timeOutT1 = null;\r\n\t\r\n\tif(this.timeoutCallbackRef){\r\n\t\tvar data = {'waitTime':difTime};\r\n\t\tthis.timeoutCallbackRef(data);\r\n\t}\r\n};\r\n\r\nmodule.exports = NanoTimer;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./../../timers-browserify/main.js */ \"./node_modules/timers-browserify/main.js\").setImmediate, __webpack_require__(/*! ./../../timers-browserify/main.js */ \"./node_modules/timers-browserify/main.js\").clearImmediate))\n\n//# sourceURL=webpack:///./node_modules/nanotimer/lib/nanoTimer.js?");

/***/ }),

/***/ "./node_modules/node-led/alphaChars.js":
/*!*********************************************!*\
  !*** ./node_modules/node-led/alphaChars.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = [\n  0b0000000000000001,\n  0b0000000000000010,\n  0b0000000000000100,\n  0b0000000000001000,\n  0b0000000000010000,\n  0b0000000000100000,\n  0b0000000001000000,\n  0b0000000010000000,\n  0b0000000100000000,\n  0b0000001000000000,\n  0b0000010000000000,\n  0b0000100000000000,\n  0b0001000000000000,\n  0b0010000000000000,\n  0b0100000000000000,\n  0b1000000000000000,\n  0b0000000000000000,\n  0b0000000000000000,\n  0b0000000000000000,\n  0b0000000000000000,\n  0b0000000000000000,\n  0b0000000000000000,\n  0b0000000000000000,\n  0b0000000000000000,\n  0b0001001011001001,\n  0b0001010111000000,\n  0b0001001011111001,\n  0b0000000011100011,\n  0b0000010100110000,\n  0b0001001011001000,\n  0b0011101000000000,\n  0b0001011100000000,\n  0b0000000000000000, //\n  0b0000000000000110, // !\n  0b0000001000100000, // \"\n  0b0001001011001110, // #\n  0b0001001011101101, // $\n  0b0000110000100100, // %\n  0b0010001101011101, // &\n  0b0000010000000000, // '\n  0b0010010000000000, // (\n  0b0000100100000000, // )\n  0b0011111111000000, // *\n  0b0001001011000000, // +\n  0b0000100000000000, // ,\n  0b0000000011000000, // -\n  0b0000000000000000, // .\n  0b0000110000000000, // /\n  0b0000110000111111, // 0\n  0b0000000000000110, // 1\n  0b0000000011011011, // 2\n  0b0000000010001111, // 3\n  0b0000000011100110, // 4\n  0b0010000001101001, // 5\n  0b0000000011111101, // 6\n  0b0000000000000111, // 7\n  0b0000000011111111, // 8\n  0b0000000011101111, // 9\n  0b0001001000000000, // :\n  0b0000101000000000, // ;\n  0b0010010000000000, // <\n  0b0000000011001000, // =\n  0b0000100100000000, // >\n  0b0001000010000011, // ?\n  0b0000001010111011, // @\n  0b0000000011110111, // A\n  0b0001001010001111, // B\n  0b0000000000111001, // C\n  0b0001001000001111, // D\n  0b0000000011111001, // E\n  0b0000000001110001, // F\n  0b0000000010111101, // G\n  0b0000000011110110, // H\n  0b0001001000000000, // I\n  0b0000000000011110, // J\n  0b0010010001110000, // K\n  0b0000000000111000, // L\n  0b0000010100110110, // M\n  0b0010000100110110, // N\n  0b0000000000111111, // O\n  0b0000000011110011, // P\n  0b0010000000111111, // Q\n  0b0010000011110011, // R\n  0b0000000011101101, // S\n  0b0001001000000001, // T\n  0b0000000000111110, // U\n  0b0000110000110000, // V\n  0b0010100000110110, // W\n  0b0010110100000000, // X\n  0b0001010100000000, // Y\n  0b0000110000001001, // Z\n  0b0000000000111001, // [\n  0b0010000100000000, //\n  0b0000000000001111, // ]\n  0b0000110000000011, // ^\n  0b0000000000001000, // _\n  0b0000000100000000, // `\n  0b0001000001011000, // a\n  0b0010000001111000, // b\n  0b0000000011011000, // c\n  0b0000100010001110, // d\n  0b0000100001011000, // e\n  0b0000000001110001, // f\n  0b0000010010001110, // g\n  0b0001000001110000, // h\n  0b0001000000000000, // i\n  0b0000000000001110, // j\n  0b0011011000000000, // k\n  0b0000000000110000, // l\n  0b0001000011010100, // m\n  0b0001000001010000, // n\n  0b0000000011011100, // o\n  0b0000000101110000, // p\n  0b0000010010000110, // q\n  0b0000000001010000, // r\n  0b0010000010001000, // s\n  0b0000000001111000, // t\n  0b0000000000011100, // u\n  0b0010000000000100, // v\n  0b0010100000010100, // w\n  0b0010100011000000, // x\n  0b0010000000001100, // y\n  0b0000100001001000, // z\n  0b0000100101001001, // {\n  0b0001001000000000, // |\n  0b0010010010001001, // }\n  0b0000010100100000, // ~\n  0b0011111111111111\n];\n\n\n//# sourceURL=webpack:///./node_modules/node-led/alphaChars.js?");

/***/ }),

/***/ "./node_modules/node-led/index.js":
/*!****************************************!*\
  !*** ./node_modules/node-led/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\nvar alphaChars = __webpack_require__(/*! ./alphaChars */ \"./node_modules/node-led/alphaChars.js\");\nvar numChars = __webpack_require__(/*! ./numChars */ \"./node_modules/node-led/numChars.js\");\nvar padend = __webpack_require__(/*! lodash.padend */ \"./node_modules/lodash.padend/index.js\");\n\nfunction Backpack(io, options){\n\n  if(io.io){\n    //allow j5 board to be passed in\n    this.io = io.io;\n  }else{\n    this.io = io;\n  }\n\n  options = options || {};\n\n  this.options = options;\n\n  this.address = options.address || 0x70;\n\n  this.io.i2cConfig(0);\n  this.io.i2cWrite(this.address, [0x21]); // turn on oscillator\n  this.io.i2cWrite(this.address, [0x81]); // disp on\n  this.setBrightness(options.brightness || 0xF); // 0x0 to 0xF);\n}\n\n\nBackpack.prototype.setBrightness = function(brightness) {\n    this.io.i2cWrite(this.address, [0xE0 | brightness]);\n};\n\nBackpack.prototype.clearDisplay = function() {\n    this.io.i2cWrite(this.address, 0, [0,0,0,0,0,0,0,0]);\n};\n\n\n/*** 8x8 Matrix backpack *********************************/\n\nfunction Matrix8x8(io, options){\n  Backpack.apply(this, arguments);\n}\n\nutil.inherits(Matrix8x8, Backpack);\n\nMatrix8x8.prototype.clearDisplay = function() {\n    this.io.i2cWrite(this.address, 0, [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);\n};\n\nMatrix8x8.prototype.drawBitmap = function(data) {\n  var splitBits = [];\n  data.forEach(function(i){\n    splitBits.push(i & 0xFF);\n    splitBits.push(i >> 8);\n  });\n  this.io.i2cWrite(this.address, 0, this.rotateBuffer(splitBits));\n};\n\nMatrix8x8.prototype.rotateBuffer = function(buf){\n  var tempBuf = [];\n  buf.forEach( function(value) {\n    //Then shift last bit over if switched on it'll switch on 2^7\n      var rotated = (value >> 1) | (value << 7);\n      //Casting the 16-bit integer to 8-bit\n      var eightBitArray = new Uint8Array([rotated]);\n      //return the 8-bit value\n     tempBuf.push(eightBitArray[0]); \n  })\n\n  return tempBuf;\n};\n\n\n/*** 8x16 Matrix backpack *********************************/\n\nfunction Matrix8x16(io, options){\n  Backpack.apply(this, arguments);\n}\n\n\nutil.inherits(Matrix8x16, Backpack);\n\n\nMatrix8x16.prototype.drawBitmap = function(data) {\n  //render the thing\n\n};\n\n\n\n/*** 8x8 Bi-Color Matrix backpack *********************************/\n\nfunction BicolorMatrix(io, options){\n  Backpack.apply(this, arguments);\n}\n\n\nutil.inherits(BicolorMatrix, Backpack);\n\n\nBicolorMatrix.prototype.drawBitmap = function(data) {\n  //render the thing\n};\n\n\n\n\n/*** Alphanumeric 4 character backpack *********************************/\n\nfunction AlphaNum4(io, options){\n  Backpack.apply(this, arguments);\n}\n\n\nutil.inherits(AlphaNum4, Backpack);\n\n\nAlphaNum4.prototype.writeText = function(str) {\n  var desiredBits = padend(str, 4, ' ').substring(0, 4).split('').map(function(c){\n    return alphaChars[c.charCodeAt(0)] || 0;\n  });\n  var output = [];\n  desiredBits.forEach(function(i){\n    output.push(i & 0xFF);\n    output.push(i >> 8);\n  });\n  this.io.i2cWrite(this.address, 0, output);\n};\n\n\n/*** 7-segment display x 4 backpack *********************************/\n\nfunction SevenSegment(io, options){\n  Backpack.apply(this, arguments);\n\n}\n\n\nutil.inherits(SevenSegment, Backpack);\n\nSevenSegment.prototype.clearDisplay = function() {\n    this.io.i2cWrite(this.address, 0, [0,0,0,0,0,0,0,0,0,0]);\n};\n\n\n\nSevenSegment.prototype.writeText = function(str) {\n  str = String(str);\n  var preOutput = [];\n  str = str.toLowerCase();\n  var splits = padend(str, 4, ' ').split('');\n  var currObj = {};\n  var hasColon = false;\n  for (var i = 0; i < splits.length; i++) {\n    if (splits[i] == ':') {\n      hasColon = true;\n    } else if (splits[i] == '.') {\n\n      if(preOutput[preOutput.length - 1]){\n        preOutput[preOutput.length - 1].hasPeriod = true;\n      }\n\n    } else {\n      currObj.character = splits[i];\n      preOutput.push(currObj);\n      currObj = {};\n    }\n  };\n  var finalOutput = [0,0,0,0,0,0,0,0,0,0];\n  if (preOutput[0]) {\n   finalOutput[0] = (numChars[preOutput[0].character] || 0) + (preOutput[0].hasPeriod ? 128 : 0);\n  }\n\n  if(preOutput[1]) {\n    finalOutput[2] = (numChars[preOutput[1].character] || 0) + (preOutput[1].hasPeriod ? 128 : 0);\n  }\n\n  if(hasColon){\n    finalOutput[4] = 255;\n  }\n\n  if(preOutput[2]) {\n    finalOutput[6] = (numChars[preOutput[2].character] || 0) + (preOutput[2].hasPeriod ? 128 : 0);\n  }\n\n  if(preOutput[3]) {\n    finalOutput[8] = (numChars[preOutput[3].character] || 0) + (preOutput[3].hasPeriod ? 128 : 0);\n  }\n\n  this.io.i2cWrite(this.address, 0, finalOutput);\n};\n\n\n/*** Bargraph 24 backpack *********************************/\n\nfunction Bargraph24(io, options){\n  Backpack.apply(this, arguments);\n}\n\n\nutil.inherits(Bargraph24, Backpack);\n\nfunction flipByte(b){\n var bits = [];\n var total = 0;\n for(var i = 0; i < 8; i++){\n   bits.unshift((b >> i) & 1);\n }\n bits.forEach(function(bit, idx){\n   total += (bit << idx);\n });\n\n return total;\n}\n\nBargraph24.prototype.drawBitmap = function(rm, gm) {\n  if (Array.isArray(rm)){\n    gm = rm[1];\n    rm = rm[0];\n  }\n  var output = new Array(6);\n  output = output.map(flipByte);\n  // first bytes\n  output[0] = ((rm >> 20) << 4) + ((rm >> 8) & 0xF);\n  output[1] = ((gm >> 20) << 4) + ((gm >> 8) & 0xF);\n  // second bytes\n  output[2] = (((rm >> 12) & 0xF) << 4) + ((rm >> 4) & 0xF);\n  output[3] = (((gm >> 12) & 0xF) << 4) + ((gm >> 4) & 0xF);\n  // thrid bytes\n  output[4] = (((rm >> 4) & 0xF) << 4) + (rm & 0xF);\n  output[5] = (((gm >> 4) & 0xF) << 4) + (gm & 0xF);\n\n  this.io.i2cWrite(this.address, 0, output);\n};\n\nBargraph24.prototype.drawGraph = function(data) {\n  //render the thing\n};\n\n\n\nmodule.exports = {\n  Backpack: Backpack,\n  Matrix8x8: Matrix8x8,\n  Matrix8x16: Matrix8x16,\n  AlphaNum4: AlphaNum4,\n  SevenSegment: SevenSegment,\n  Bargraph24: Bargraph24\n}\n\n\n\n\n//# sourceURL=webpack:///./node_modules/node-led/index.js?");

/***/ }),

/***/ "./node_modules/node-led/numChars.js":
/*!*******************************************!*\
  !*** ./node_modules/node-led/numChars.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = {\n  '0': 0x3F, /* 0 */\n  '1': 0x06, /* 1 */\n  '2': 0x5B, /* 2 */\n  '3': 0x4F, /* 3 */\n  '4': 0x66, /* 4 */\n  '5': 0x6D, /* 5 */\n  '6': 0x7D, /* 6 */\n  '7': 0x07, /* 7 */\n  '8': 0x7F, /* 8 */\n  '9': 0x6F, /* 9 */\n  'a': 0x77, /* a */\n  'b': 0x7C, /* b */\n  'c': 0x39, /* C */\n  'd': 0x5E, /* d */\n  'e': 0x79, /* E */\n  'f': 0x71 /* F */\n};\n\n\n//# sourceURL=webpack:///./node_modules/node-led/numChars.js?");

/***/ }),

/***/ "./node_modules/node-pixel/lib/pixel.js":
/*!**********************************************!*\
  !*** ./node_modules/node-pixel/lib/pixel.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Buffer, process, global) {\n\n// Defines a set of WS2812 LED Pixels for use\n\n// TODO:\n// Pixels can be arranged into different structures // NICE TO HAVE\n// Do we have a grid which can be 1D, 2D or 3D and any size\n// Pixels needs to have a length, various deets on where it is (clock etc)\n// Keyframing // NICE TO HAVE\n// Pixel grid should be able to:\n//      - Set pixels in a range from X->Y a colour\n\nvar ColorString = __webpack_require__(/*! color-string */ \"./node_modules/color-string/index.js\"); // used for color parsing\nvar events = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\n\n// create a helper to output an int so messages can be shorter\nColorString.colorValue = function colorValue (colors, g_table) {\n    // colors are assumed to be an array of [r, g, b] bytes\n    // colorValue returns a packed value able to be pushed to firmata rather than\n    // text values.\n    // if gtable is passed then it should use the supplied gamma\n    // correction table to correct the received value.\n\n    // before sending, account for gamma correction.\n    colors[0] = g_table[colors[0]];\n    colors[1] = g_table[colors[1]];\n    colors[2] = g_table[colors[2]];\n\n    return ((colors[0] << 16) + (colors[1] << 8) + (colors[2]));\n}\n\n// CONSTANTS\nconst START_SYSEX = 0xF0,\nSTRING_DATA =       0x71,\nEND_SYSEX =         0xF7,\nFIRMATA_7BIT_MASK = 0x7F,\nPIXEL_SHIFT_WRAP =  0x40,\nPIXEL_COMMAND =     0x51,\nPIXEL_OFF =         0x00,\nPIXEL_CONFIG =      0x01,\nPIXEL_SHOW =        0x02,\nPIXEL_SET_PIXEL =   0x03,\nPIXEL_SET_STRIP =   0x04,\nPIXEL_SHIFT =       0x05,\nSHIFT_FORWARD =     0x20,\nSHIFT_BACKWARD =    0x00;\n\nconst MAX_STRIPS = 8;\n\nconst PIN_DEFAULT = 6; // use this if not supplied\n\nconst I2C_DEFAULT =   0x42;\n\nconst GAMMA_DEFAULT = 1.0; // set to 1.0 in 0.9, 2.8 in 0.10\n\nvar Controllers = {\n    FIRMATA: {\n        initialize: {\n            value: function(opts) {\n\n                var MAX_PIXELS = 216; // based on # bytes available in firmata\n                var strip_length = opts.length || 6; // just an arbitrary val\n                var data_pin = opts.data || PIN_DEFAULT;\n                var color_order = opts.color_order || COLOR_ORDER.GRB; // default GRB\n                var strip_definition = opts.strips || new Array();\n                var skip_firmware_check = !!opts.skip_firmware_check;\n                // do firmata / IO checks\n                var firmata = opts.firmata || undefined;\n                if (firmata == undefined) {\n                    try {\n                        firmata = opts.board.io;\n                    } catch (e) {\n                        if (e instanceof TypeError) {\n                            // there's no board\n                            firmata = undefined;\n                        }\n                    }\n                }\n                // check if we're *still* undefined\n                if (firmata == undefined) {\n                    let err = new Error(\"A firmata or board object is required\");\n                    err.name = \"NoFirmataError\";\n                    throw err;\n                }\n\n                if (firmata.firmware.name !== 'node_pixel_firmata.ino' && !skip_firmware_check) {\n                    let err = new Error(\"Please upload NodePixel Firmata to the board\");\n                    err.name = \"IncorrectFirmataVersionError\";\n                    throw err;\n                }\n\n                // figure out where we are writing to\n                var port = firmata.sp || firmata;\n\n                if (port.write === undefined) {\n                    let err = new Error(\"Node Pixel FIRMATA controller requires IO that can write out\");\n                    err.name = \"NoWritablePortError\";\n                    throw err;\n                }\n\n                var gamma = opts.gamma || GAMMA_DEFAULT; // Changing to 2.8 in v0.10\n\n                // set up the gamma table\n                var gtable = create_gamma_table(256, gamma, this.dep_warning.gamma);\n\n\n\n                // work out the map of strips and pixels.\n                if (typeof(strip_definition[0]) == \"undefined\") {\n                    // there is nothing specified so it's probably a single strip\n                    // using the length and pin shorthand\n                    strip_definition.push( {\n                        pin: data_pin,\n                        color_order: color_order,\n                        length: strip_length,\n                    });\n                }\n\n                // put in check if it's gone over value\n                if (strip_definition.length > MAX_STRIPS) {\n                    var err = new RangeError(\"Maximum number of strips \" + MAX_STRIPS + \" exceeded\");\n                    this.emit(\"error\", err);\n                }\n\n                var total_length = 0;\n                strip_definition.forEach(function(data) {\n                    total_length += data.length;\n                });\n\n                // put in check if there are too many pixels.\n                if (total_length > MAX_PIXELS) {\n                    var err = new RangeError(\"Maximum number of pixels \" + MAX_PIXELS + \" exceeded\");\n                    this.emit(\"error\", err);\n                }\n\n                var pixels = [];\n\n                for (var i=0; i< total_length; i++) {\n                    pixels.push(new Pixel({\n                        addr: i,\n                        firmata: firmata,\n                        port: port,\n                        controller: \"FIRMATA\",\n                        strip: this,\n                    }) );\n                }\n\n                strips.set(this, {\n                    pixels: pixels,\n                    data: data_pin,\n                    firmata: firmata,\n                    port: port,\n                    gtable: gtable,\n                    gamma: gamma,\n                });\n\n                // now send the config message with length and data point.\n                var data   = [];\n\n                data[0] = START_SYSEX;\n                data[1] = PIXEL_COMMAND;\n                data[2] = PIXEL_CONFIG;\n                strip_definition.forEach(function(strip) {\n                    data.push( (strip.color_order << 5) | strip.pin);\n                    data.push( strip.length & FIRMATA_7BIT_MASK);\n                    data.push( (strip.length >> 7) & FIRMATA_7BIT_MASK);\n                });\n                data.push(END_SYSEX);\n\n                port.write(new Buffer(data), function(error, res) {\n                    var err = null;\n                    if (error) {\n                        err = error;\n                        this.emit(\"error\", err);\n                    }\n                    // there is a weird bug in OSX which sometimes causes\n                    // a segfault if you try to write to fast. As such\n                    // just delay the ready event by 1msec because even this\n                    // is faster than hooman will perceive as a delay\n                    setTimeout(() => {\n                        this.emit(\"ready\", err);\n                    }, 1);\n\n                }.bind(this) );\n            },\n        },\n        show: {\n            value: function() {\n\n                // call the frame on the strip.\n                var strip = strips.get(this);\n\n                var data   = [];\n                data[0] = START_SYSEX;\n                data[1] = PIXEL_COMMAND;\n                data[2] = PIXEL_SHOW;\n                data[3] = END_SYSEX;\n\n                // now just write that to the port and it should show the frame.\n                strip.port.write(new Buffer(data));\n            },\n        },\n        strip_color: {\n            value: function(color) {\n                // colour work is already done this just sets it the appropriate\n                // way.\n                var strip = strips.get(this);\n                var data   = [];\n\n                data[0] = START_SYSEX;\n                data[1] = PIXEL_COMMAND;\n                data[2] = PIXEL_SET_STRIP;\n                data[3] = color & FIRMATA_7BIT_MASK;\n                data[4] = (color >> 7) & FIRMATA_7BIT_MASK;\n                data[5] = (color >> 14) & FIRMATA_7BIT_MASK;\n                data[6] = (color >> 21) & FIRMATA_7BIT_MASK;\n                data[7] = END_SYSEX;\n\n                strip.port.write(new Buffer(data));\n            },\n        },\n        _shift: {\n            value: function(amt, direction, wrap) {\n                // shifts the strip in the appropriate direction.\n                //\n                let wrap_val = wrap ? PIXEL_SHIFT_WRAP : 0;\n                let strip = strips.get(this);\n                let data = [];\n                data[0] = START_SYSEX;\n                data[1] = PIXEL_COMMAND;\n                data[2] = PIXEL_SHIFT;\n                data[3] = (amt | direction | wrap_val) & FIRMATA_7BIT_MASK;\n                data[4] = END_SYSEX;\n\n                strip.port.write(new Buffer(data));\n            },\n        },\n    },\n    I2CBACKPACK: {\n        initialize: {\n            value: function(opts) {\n\n                var MAX_PIXELS = 500; // based on # bytes available in firmata\n                var strip_length = opts.length || 6; // just an arbitrary val\n                var strip_definition = opts.strips || new Array();\n                var color_order = opts.color_order || COLOR_ORDER.GRB; // default GRB\n                var gamma = opts.gamma || GAMMA_DEFAULT; // Changing to 2.8 in v0.10\n\n                // set up the gamma table\n                var gtable = create_gamma_table(256, gamma, this.dep_warning.gamma);\n\n                var io = opts.firmata || opts.board.io;\n\n                if (!opts.address) {\n                    opts.address = I2C_DEFAULT;\n                }\n\n                if (io == undefined) {\n                    let err = new Error(\"An IO object is required to I2C controller\");\n                    err.name = \"NoIOError\";\n                    throw err;\n                }\n\n                // work out the map of strips and pixels.\n                if (typeof(strip_definition[0]) == \"undefined\") {\n                    // there is nothing specified so it's probably a single strip\n                    // using the length and colour type.\n                    strip_definition.push( {\n                        color_order: color_order,\n                        length: strip_length,\n                    });\n                } else if (parseInt(strip_definition[0]) != NaN) {\n                    // we have the array of pin lengths but do we have the colour\n\n                    for (var i = 0; i< strip_definition.length; i++) {\n                        var len = strip_definition[i];\n                        strip_definition[i] = {\n                            color_order: color_order,\n                            length: len,\n                        };\n                    }\n                }\n\n                // put in check if it's gone over.\n                if (strip_definition.length > MAX_STRIPS) {\n                    var err = new RangeError(\"Maximum number of strips \" + MAX_STRIPS + \" exceeded\");\n                    this.emit(\"error\", err);\n                }\n\n                var total_length = 0;\n                strip_definition.forEach(function(data) {\n                    total_length += data.length;\n                });\n\n                // put in check if there are too many pixels.\n                if (total_length > MAX_PIXELS) {\n                    var err = new RangeError(\"Maximum number of pixels \" + MAX_PIXELS + \" exceeded\");\n                    this.emit(\"error\", err);\n                }\n\n                var pixels = [];\n\n                for (var i=0; i < total_length; i++) {\n                    pixels.push(new Pixel({\n                        addr: i,\n                        io: io,\n                        controller: \"I2CBACKPACK\",\n                        i2c_address: opts.address,\n                        strip: this,\n                    }) );\n                }\n\n                strips.set(this, {\n                    pixels: pixels,\n                    io: io,\n                    i2c_address: opts.address,\n                    gtable: gtable,\n                    gamma: gamma,\n                });\n\n                // now send the config message with length and data point.\n                var data   = [];\n\n                data.push(PIXEL_CONFIG);\n                strip_definition.forEach(function(strip) {\n                    data.push( (strip.color_order << 5) | strip.pin);\n                    data.push( strip.length & FIRMATA_7BIT_MASK);\n                    data.push( (strip.length >> 7) & FIRMATA_7BIT_MASK);\n                });\n                // send the I2C config message.\n                io.i2cConfig(opts);\n                process.nextTick(function() {\n                    try {\n                        io.i2cWrite(opts.address, data);\n                    } catch (e) {\n                        if (e instanceof Error && e.name == \"EIO\") {\n                            this.emit(\"np_i2c_write_error\", data);\n                        }\n                    }\n                    process.nextTick(function() {\n                        this.emit(\"ready\", null)\n                    }.bind(this) );\n                }.bind(this) );\n            },\n        },\n        show: {\n            value: function() {\n                var strip = strips.get(this);\n                try {\n                    strip.io.i2cWrite(strip.i2c_address, [PIXEL_SHOW]);\n                } catch (e) {\n                    if (e instanceof Error && e.name == \"EIO\") {\n                        this.emit(\"np_i2c_write_error\", \"PIXEL_SHOW\");\n                    }\n                }\n            },\n        },\n        strip_color: {\n            value: function(color) {\n                var strip = strips.get(this);\n                var data   = [];\n\n                data[0] = PIXEL_SET_STRIP;\n\n                data[1] = color & FIRMATA_7BIT_MASK;\n                data[2] = (color >> 7) & FIRMATA_7BIT_MASK;\n                data[3] = (color >> 14) & FIRMATA_7BIT_MASK;\n                data[4] = (color >> 21) & FIRMATA_7BIT_MASK;\n                try {\n                    strip.io.i2cWrite(strip.i2c_address, data);\n                } catch (e) {\n                    if (e instanceof Error && e.name == \"EIO\") {\n                        this.emit(\"np_i2c_write_error\", data);\n                    }\n                }\n            },\n        },\n        _shift: {\n            value: function(amt, direction, wrap) {\n                // shifts the strip in the appropriate direction.\n                //\n                let wrap_val = wrap ? PIXEL_SHIFT_WRAP : 0;\n                let strip = strips.get(this);\n                let data = [];\n                data[0] = PIXEL_SHIFT;\n                data[1] = (amt | direction | wrap_val) & FIRMATA_7BIT_MASK;\n                try {\n                    strip.io.i2cWrite(strip.i2c_address, data);\n                } catch (e) {\n                    if (e instanceof Error && e.name == \"EIO\") {\n                        this.emit(\"np_i2c_write_error\", data);\n                    }\n                }\n            },\n        },\n    },\n};\n\n// helper function for building gamma values\nfunction create_gamma_table(steps, gamma, warning) {\n    // used to build a gamma table for a particular value\n\n    if (! warning && gamma == GAMMA_DEFAULT && ! global.IS_TEST_MODE) {\n        console.info(\"INFO: Default gamma behaviour is changing\");\n        console.info(\"0.9 - gamma=1.0 - consistent with pre-gamma values\");\n        console.info(\"0.10 - gamma=2.8 - default fix for WS2812 LEDs\");\n        warning = true;\n    }\n\n    var g_table = new Array(steps);\n    for (let i = 0; i < steps; i++) {\n        g_table[i] = Math.floor(Math.pow((i / 255.0), gamma) * 255 + 0.5);\n    }\n\n    return g_table;\n}\n\nvar strips = new WeakMap();\n\nfunction Strip(opts) {\n\n    // opts contains an object with.\n    // data: data pin for the pixel strip // DEPRECATED will be phased out.\n    // length: length of the pixel strip. // DEPRECATED, will be phased out.\n    // board: johnny five board object.\n    // controller: controller type to use\n    // firmata: actual firmata object if using firmata\n    // stripShape: an array that contains lengths or optionally data pins and\n    // lengths for each of them.\n    //      eg: [ [6, 30], [12, 20], [7, 10] ] which would be 3 strips attached\n    //      to pins 6, 12 and 7 and make a strip 60 pixels long.\n    //      Otherwise [ 30, 20, 10 ] which would be 3 strips on PORTD 0-2 but\n    //      still a strip 60 pixels long\n    // gamma: A user specified value for gamma correction for the strip.\n    //      default is 1.0 but will be changed to 2.8 over versions\n\n    if (!(this instanceof Strip)) {\n        return new Strip(opts);\n    }\n\n    var controller;\n\n    if (typeof opts.controller === \"string\") {\n        controller = Controllers[opts.controller];\n    } else {\n        controller = opts.controller || Controllers[\"FIRMATA\"];\n    }\n\n    this.dep_warning = {\n        stripLength: false,\n        gammaValue: (! typeof opts.gamma === 'undefined'),\n    };\n\n    Object.defineProperties(this, controller);\n\n    Object.defineProperty(this, 'length', {\n        get: function() {\n            let strip = strips.get(this);\n            return strip.pixels.length;\n        },\n    });\n\n    Object.defineProperty(this, 'gamma', {\n        get: function() {\n            let strip = strips.get(this);\n            return strip.gamma;\n        },\n    });\n\n    Object.defineProperty(this, 'gtable', {\n        get: function() {\n            let strip = strips.get(this);\n            return strip.gtable;\n        },\n    });\n\n    if (typeof this.initialize === \"function\") {\n        this.initialize(opts);\n    }\n}\n\nutil.inherits(Strip, events.EventEmitter);\n\nStrip.prototype.pixel = function(addr) {\n    var strip = strips.get(this);\n\n    return strip.pixels[addr];\n};\n\nStrip.prototype.colour = Strip.prototype.color = function(color, opts) {\n    // sets the color of the entire strip\n    // use a particular form to set the color either\n    // color = hex value or named colors\n    // or set color null and set opt which is an object as {rgb: [rx, gx, bx]}\n    // values where x is an 8-bit value (0-255);\n    var strip = strips.get(this);\n\n    var stripcolor = null;\n\n    if (color) {\n        // use text to determine the color\n        if(typeof(color) === \"object\") {\n            // we have an RGB array value\n            stripcolor = color;\n        } else {\n            try {\n                stripcolor = ColorString.get(color).value;\n            } catch (e) {\n                if (e instanceof TypeError && ColorString.get(color) === null ) {\n                    stripcolor = null;\n                }\n            }\n        }\n    }\n\n    if (stripcolor != null) {\n        // fill out the values for the pixels and then update the strip\n\n        for (var i = 0; i < strip.pixels.length; i++) {\n            strip.pixels[i].color(color, {sendmsg: false});\n        }\n\n        // set the whole strip color to the appropriate int value\n        this.strip_color(ColorString.colorValue(stripcolor, strip.gtable));\n\n    } else {\n        console.log(\"Supplied colour couldn't be parsed: \" + color);\n    }\n}\n\nStrip.prototype.off = Strip.prototype.clear = function() {\n    // sets the strip to 'black', effectively setting it to 'off'\n    this.color([0, 0, 0]);\n    this.show();\n};\n\nStrip.prototype.shift = function(amt, direction, wrap) {\n    // public version of the shift function independent of the controller.\n    // this looks after the actual internal shifting of the pixels within the\n    // js side and then calls the controller to mirror the same function.\n\n    if (amt > 0) {\n\n        let strip = strips.get(this);\n\n        // take a copy of the pixels at the end that is being towards\n        let start_element = 0;\n        if (direction == SHIFT_FORWARD) {\n            start_element = this.length - amt;\n        }\n        let tmp_pixels = strip.pixels.splice(start_element, amt);\n\n        while (tmp_pixels.length > 0) {\n            let px = tmp_pixels.pop();\n\n            // set the pixel off if not wrapping.\n            if (! wrap) {\n                px.color(\"#000\");\n            }\n\n            if (direction == SHIFT_FORWARD) {\n                strip.pixels.unshift(px);\n            } else {\n                strip.pixels.push(px);\n            }\n        }\n\n        // renumber the items so the addresses are correct for display\n        strip.pixels.forEach((px, index) => {\n            px.address = index;\n        });\n\n        // now get the firmware to update appropriately as well.\n        this._shift(amt, direction, wrap);\n    }\n};\n\nStrip.prototype.stripLength = function() {\n    // gets the number of pixels in the strip\n\n    let strip = strips.get(this);\n\n    if (! this.dep_warning.stripLength) {\n        console.info(\"ERROR: strip.stripLength() is deprecated in favour of strip.length\");\n        console.info(\"0.8 - notice\");\n        console.info(\"0.9 - error\");\n        console.info(\"0.10 - removal\");\n        this.dep_warning.stripLength = true;\n    }\n\n    throw new Error({\n        name: \"NotImplemented\",\n        message: \"stripLength is no longer supported, use strip.length\",\n        toString: function() { return \"NotImplemented: stripLength is no longer supported\" },\n    });\n};\n\nvar pixels = new WeakMap();\n\n// controllers for the pixel side as well.\nvar Pixel_Controllers = {\n    FIRMATA: {\n        initialize: {\n            value: function(opts) {\n                // initialises the base object\n\n                var pixel = {\n                    address: opts.addr,\n                    id: opts.addr,\n                    color: {\n                        r: 0, g: 0, b: 0, hexcode: \"#000000\", color: \"black\", rgb: [0,0,0],\n                    },\n                    firmata: opts.firmata,\n                    port: opts.port,\n                    parent: opts.strip,\n                };\n\n                return pixel;\n            },\n        },\n        pixel_color: {\n            value: function(color) {\n                // sets the actual pixel colour\n                var pixel = pixels.get(this);\n\n                var data   = [];\n\n                data.push(START_SYSEX);\n                data.push(PIXEL_COMMAND);\n                data.push(PIXEL_SET_PIXEL);\n                data.push(pixel.address & FIRMATA_7BIT_MASK);\n                data.push((pixel.address >> 7) & FIRMATA_7BIT_MASK);\n                data.push(color & FIRMATA_7BIT_MASK);\n                data.push((color >> 7) & FIRMATA_7BIT_MASK);\n                data.push((color >> 14) & FIRMATA_7BIT_MASK);\n                data.push((color >> 21) & FIRMATA_7BIT_MASK);\n                data.push(END_SYSEX);\n\n                pixel.port.write(new Buffer(data));\n            },\n        },\n    },\n    I2CBACKPACK: {\n        initialize: {\n            value: function(opts) {\n                // initialises the base object\n\n                var pixel = {\n                    address: opts.addr,\n                    id: opts.addr,\n                    color: {\n                        r: 0, g: 0, b: 0, hexcode: \"#000000\", color: \"black\", rgb: [0,0,0],\n                    },\n                    io: opts.io,\n                    i2c_address: opts.i2c_address,\n                    parent: opts.strip\n                };\n\n                return pixel;\n            },\n        },\n        pixel_color: {\n            value: function(color) {\n                // sets the actual pixel colour\n                var pixel = pixels.get(this);\n\n                var data   = [];\n\n                data.push(PIXEL_SET_PIXEL);\n                data.push(pixel.address & FIRMATA_7BIT_MASK);\n                data.push((pixel.address >> 7) & FIRMATA_7BIT_MASK);\n                data.push(color & FIRMATA_7BIT_MASK);\n                data.push((color >> 7) & FIRMATA_7BIT_MASK);\n                data.push((color >> 14) & FIRMATA_7BIT_MASK);\n                data.push((color >> 21) & FIRMATA_7BIT_MASK);\n\n                pixel.io.i2cWrite(pixel.i2c_address, data);\n            },\n        },\n    },\n};\n\n\nfunction Pixel(opts) {\n\n    if (!(this instanceof Pixel)) {\n        return new Pixel(opts);\n    }\n\n    // we can assume this is set because the controller is set by the strip.\n    var controller = Pixel_Controllers[opts.controller];\n\n    Object.defineProperties(this, controller);\n\n    // we use this to be able to update the address of the\n    // pixel in the array if we do shift operations.\n    Object.defineProperty(this, 'address', {\n        get: function() {\n            let pixel = pixels.get(this);\n            return pixel.address;\n        },\n        set: function(newAddress) {\n            let pixel = pixels.get(this);\n            pixel.address = newAddress;\n        },\n    });\n\n    pixels.set(this, this.initialize(opts));\n}\n\nPixel.prototype.off = Pixel.prototype.clear = function () {\n    // sets the pixel value to [0, 0, 0]. Equivalent to calling\n    // `strip.off()` but for an individual pixel.\n    this.color([0, 0, 0]);\n}\n\nPixel.prototype.colour = Pixel.prototype.color = function(color, opts) {\n    // use a particular form to set the color either\n    // color = hex value or named colors or array of colors\n    // opts can contain _sendmsg_ as bool. If set to false message won't be\n    // sent to firmata - useful for strip level updates to keep message choke down\n\n    var pixel = pixels.get(this);\n\n    var options = opts || {};\n    var sendmsg = true;\n    if (options.sendmsg != undefined) { sendmsg = options.sendmsg; }\n\n    var pixelcolor = null;\n\n    if (color) {\n        // get the color based on a string\n        if(typeof(color) === \"object\") {\n            // we have an RGB array value\n            pixelcolor = {\n                model: 'rgb',\n                value: color\n            };\n        } else {\n            pixelcolor = ColorString.get(color);\n        }\n    } else {\n        return pixel.color;\n    }\n\n    if (pixelcolor != null) {\n        // fill out the values for the pixel and then send the message to update\n        // it on the strip\n\n        pixel.color.r = pixelcolor.value[0];\n        pixel.color.g = pixelcolor.value[1];\n        pixel.color.b = pixelcolor.value[2];\n        pixel.color.hexcode = ColorString.to.hex(pixelcolor.value);\n        pixel.color.color = ColorString.to.keyword(pixelcolor.value);\n        if (pixelcolor.value.length == 4) {\n            pixelcolor.value.pop();\n        }\n        pixel.color.rgb = pixelcolor.value;\n\n\n        //console.log(pixel.parent.gtable);\n        color = ColorString.colorValue(pixelcolor.value, pixel.parent.gtable);\n        if (sendmsg) {\n            // TODO probably should be pulling the color off the obj rather than\n            // sending it to this function....\n            this.pixel_color(color);\n        }\n    } else {\n        console.log(\"Color supplied couldn't be parsed: \" + color);\n    }\n};\n\nvar COLOR_ORDER = {\n    GRB: 0x00,\n    RGB: 0x01,\n    BRG: 0x02,\n};\n\nmodule.exports = {\n    Strip: Strip,\n    COLOR_ORDER: COLOR_ORDER,\n    FORWARD: SHIFT_FORWARD,\n    BACKWARD: SHIFT_BACKWARD,\n};\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/node-pixel/lib/pixel.js?");

/***/ }),

/***/ "./node_modules/oled-js/oled.js":
/*!**************************************!*\
  !*** ./node_modules/oled-js/oled.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(Buffer) {var Oled = function(board, five, opts) {\n\n  this.HEIGHT = opts.height || 32;\n  this.WIDTH = opts.width || 128;\n  this.ADDRESS = opts.address || 0x3C;\n  this.PROTOCOL = (opts.address) ? 'I2C' : 'SPI';\n  this.MICROVIEW = opts.microview || false;\n  this.SLAVEPIN = opts.slavePin || 12;\n  this.RESETPIN = opts.resetPin || 4;\n  this.DATA = opts.data || 0x40;\n  this.COMMAND = opts.command || 0x00;\n\n  // create command buffers\n  this.DISPLAY_OFF = 0xAE;\n  this.DISPLAY_ON = 0xAF;\n  this.SET_DISPLAY_CLOCK_DIV = 0xD5;\n  this.SET_MULTIPLEX = 0xA8;\n  this.SET_DISPLAY_OFFSET = 0xD3;\n  this.SET_START_LINE = 0x00;\n  this.CHARGE_PUMP = 0x8D;\n  this.EXTERNAL_VCC = false;\n  this.MEMORY_MODE = 0x20;\n  this.SEG_REMAP = 0xA1; // using 0xA0 will flip screen\n  this.COM_SCAN_DEC = 0xC8;\n  this.COM_SCAN_INC = 0xC0;\n  this.SET_COM_PINS = 0xDA;\n  this.SET_CONTRAST = 0x81;\n  this.SET_PRECHARGE = 0xd9;\n  this.SET_VCOM_DETECT = 0xDB;\n  this.DISPLAY_ALL_ON_RESUME = 0xA4;\n  this.NORMAL_DISPLAY = 0xA6;\n  this.COLUMN_ADDR = 0x21;\n  this.PAGE_ADDR = 0x22;\n  this.INVERT_DISPLAY = 0xA7;\n  this.ACTIVATE_SCROLL = 0x2F;\n  this.DEACTIVATE_SCROLL = 0x2E;\n  this.SET_VERTICAL_SCROLL_AREA = 0xA3;\n  this.RIGHT_HORIZONTAL_SCROLL = 0x26;\n  this.LEFT_HORIZONTAL_SCROLL = 0x27;\n  this.VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL = 0x29;\n  this.VERTICAL_AND_LEFT_HORIZONTAL_SCROLL = 0x2A;\n\n  this.cursor_x = 0;\n  this.cursor_y = 0;\n\n  // new blank buffer\n  this.buffer = new Buffer((this.WIDTH * this.HEIGHT) / 8);\n  this.buffer.fill(0x00);\n\n  this.dirtyBytes = [];\n\n  // this is necessary as we're not natively sitting within johnny-five lib\n  this.board = board;\n  this.five = five;\n\n  var config = {\n    '128x32': {\n      'multiplex': 0x1F,\n      'compins': 0x02,\n      'coloffset': 0\n    },\n    '128x64': {\n      'multiplex': 0x3F,\n      'compins': 0x12,\n      'coloffset': 0\n    },\n    '96x16': {\n      'multiplex': 0x0F,\n      'compins': 0x2,\n      'coloffset': 0,\n    },\n    // this is blended microview / normal 64 x 48, currently wip\n    '64x48': {\n      'multiplex': 0x2F,\n      'compins': 0x12,\n      'coloffset': (this.MICROVIEW) ? 32 : 0\n    }\n  };\n\n  // microview is wip\n  if (this.MICROVIEW) {\n    // microview spi pins\n    this.SPIconfig = {\n      'dcPin': 8,\n      'ssPin': 10,\n      'rstPin': 7,\n      'clkPin': 13,\n      'mosiPin': 11\n    };\n  } else if (this.PROTOCOL === 'SPI') {\n    // generic spi pins\n    this.SPIconfig = {\n      'dcPin': 11,\n      'ssPin': this.SLAVEPIN,\n      'rstPin': 13,\n      'clkPin': 10,\n      'mosiPin': 9\n    };\n  }\n\n  var screenSize = this.WIDTH + 'x' + this.HEIGHT;\n  this.screenConfig = config[screenSize];\n\n  if (this.PROTOCOL === 'I2C') {\n    this._setUpI2C(opts);\n  } else {\n    this._setUpSPI();\n  }\n\n  this._initialise();\n}\n\nOled.prototype._initialise = function() {\n\n  // sequence of bytes to initialise with\n  var initSeq = [\n    this.DISPLAY_OFF,\n    this.SET_DISPLAY_CLOCK_DIV, 0x80,\n    this.SET_MULTIPLEX, this.screenConfig.multiplex, // set the last value dynamically based on screen size requirement\n    this.SET_DISPLAY_OFFSET, 0x00, // sets offset pro to 0\n    this.SET_START_LINE,\n    this.CHARGE_PUMP, 0x14, // charge pump val\n    this.MEMORY_MODE, 0x00, // 0x0 act like ks0108\n    this.SEG_REMAP, // screen orientation\n    this.COM_SCAN_DEC, // screen orientation change to INC to flip\n    this.SET_COM_PINS, this.screenConfig.compins, // com pins val sets dynamically to match each screen size requirement\n    this.SET_CONTRAST, 0x8F, // contrast val\n    this.SET_PRECHARGE, 0xF1, // precharge val\n    this.SET_VCOM_DETECT, 0x40, // vcom detect\n    this.DISPLAY_ALL_ON_RESUME,\n    this.NORMAL_DISPLAY,\n    this.DISPLAY_ON\n  ];\n\n  var i, initSeqLen = initSeq.length;\n\n  // write init seq commands\n  for (i = 0; i < initSeqLen; i ++) {\n    this._transfer('cmd', initSeq[i]);\n  }\n}\n\nOled.prototype._setUpSPI = function() {\n\n    // set up spi pins\n    this.dcPin = new this.five.Pin(this.SPIconfig.dcPin);\n    this.ssPin = new this.five.Pin(this.SPIconfig.ssPin);\n    this.clkPin = new this.five.Pin(this.SPIconfig.clkPin);\n    this.mosiPin = new this.five.Pin(this.SPIconfig.mosiPin);\n    // reset won't be used as it causes a bunch of default initialisations\n    this.rstPin = new this.five.Pin(this.SPIconfig.rstPin);\n\n    // get the screen out of default mode\n    this.rstPin.low();\n    this.rstPin.high();\n    // Set SS to high so a connected chip will be \"deselected\" by default\n    this.ssPin.high();\n}\n\nOled.prototype._setUpI2C = function(opts) {\n  // enable i2C in firmata\n  this.board.io.i2cConfig(opts);\n  // set up reset pin and hold high\n  this.rstPin = new this.five.Pin(this.RESETPIN);\n  this.rstPin.low();\n  this.rstPin.high();\n}\n\n// writes both commands and data buffers to this device\nOled.prototype._transfer = function(type, val) {\n  var control;\n  if (type === 'data') {\n    control = this.DATA;\n  } else if (type === 'cmd') {\n    control = this.COMMAND;\n  } else {\n    return;\n  }\n\n  if (this.PROTOCOL === 'I2C') {\n    // send control and actual val\n    this.board.io.i2cWrite(this.ADDRESS, [control, val]);\n  } else {\n    // send val via SPI, no control byte\n    this._writeSPI(val, type);\n  }\n}\n\nOled.prototype._writeSPI = function(byte, mode) {\n  var bit;\n\n  // set dc to low if command byte, high if data byte\n  if (mode === 'cmd') {\n    this.dcPin.low();\n  } else {\n    this.dcPin.high();\n  }\n\n  // select the device as slave\n  this.ssPin.low();\n\n  for (bit = 7; bit >= 0; bit--) {\n\n    // pull clock low\n    this.clkPin.low();\n\n    // shift out a bit for mosi\n    if (byte & (1 << bit)) {\n      this.mosiPin.high();\n    } else {\n      this.mosiPin.low();\n    }\n\n    // pull clock high to collect bit\n    this.clkPin.high();\n\n  }\n\n  // turn off slave select so other devices can use SPI\n  // don't be an SPI hogging jerk basically\n  this.ssPin.high();\n}\n\n// read a byte from the oled\nOled.prototype._readI2C = function(fn) {\n  this.board.io.i2cReadOnce(this.ADDRESS, 1, function(data) {\n    fn(data);\n  });\n}\n\n// sometimes the oled gets a bit busy with lots of bytes.\n// Read the response byte to see if this is the case\nOled.prototype._waitUntilReady = function(callback) {\n  var done,\n      oled = this;\n\n  function tick(callback) {\n    oled._readI2C(function(byte) {\n      // read the busy byte in the response\n      busy = byte >> 7 & 1;\n      if (!busy) {\n        // if not busy, it's ready for callback\n        callback();\n      } else {\n        console.log('I\\'m busy!');\n        setTimeout(tick, 0);\n      }\n    });\n  };\n\n  if (this.PROTOCOL === 'I2C') {\n    setTimeout(function(){tick(callback)}, 0);\n  } else {\n    callback();\n  }\n}\n\n// set starting position of a text string on the oled\nOled.prototype.setCursor = function(x, y) {\n  this.cursor_x = x;\n  this.cursor_y = y;\n}\n\n// write text to the oled\nOled.prototype.writeString = function(font, size, string, color, wrap, linespacing, sync) {\n  var immed = (typeof sync === 'undefined') ? true : sync;\n  var wordArr = string.split(' '),\n      len = wordArr.length,\n      // start x offset at cursor pos\n      offset = this.cursor_x,\n      padding = 0, letspace = 1;\n  var leading = linespacing || 2;\n\n  // loop through words\n  for (var w = 0; w < len; w += 1) {\n    // put the word space back in\n    wordArr[w] += ' ';\n    var stringArr = wordArr[w].split(''),\n        slen = stringArr.length,\n        compare = (font.width * size * slen) + (size * (len -1));\n\n    // wrap words if necessary\n    if (wrap && len > 1 && (offset >= (this.WIDTH - compare)) ) {\n      offset = 1;\n      this.cursor_y += (font.height * size) + size + leading;\n      this.setCursor(offset, this.cursor_y);\n    }\n\n    // loop through the array of each char to draw\n    for (var i = 0; i < slen; i += 1) {\n      // look up the position of the char, pull out the buffer slice\n      var charBuf = this._findCharBuf(font, stringArr[i]);\n      // read the bits in the bytes that make up the char\n      var charBytes = this._readCharBytes(charBuf);\n      // draw the entire character\n      this._drawChar(font, charBytes, size, false);\n\n      // calc new x position for the next char, add a touch of padding too if it's a non space char\n      padding = (stringArr[i] === ' ') ? 0 : size + letspace;\n      offset += (font.width * size) + padding;\n\n      // wrap letters if necessary\n      if (wrap && (offset >= (this.WIDTH - font.width - letspace))) {\n        offset = 1;\n        this.cursor_y += (font.height * size) + size + leading;\n      }\n      // set the 'cursor' for the next char to be drawn, then loop again for next char\n      this.setCursor(offset, this.cursor_y);\n    }\n  }\n  if (immed) {\n    this._updateDirtyBytes(this.dirtyBytes);\n  }\n}\n\n// draw an individual character to the screen\nOled.prototype._drawChar = function(font, byteArray, size, sync) {\n  // take your positions...\n  var x = this.cursor_x,\n      y = this.cursor_y;\n\n  var pagePos = 0;\n  var c = 0;\n  // loop through the byte array containing the hexes for the char\n  for (var i = 0; i < byteArray.length; i += 1) {\n    pagePos = Math.floor(i / font.width) * 8;\n    for (var j = 0; j < 8; j += 1) {\n      // pull color out\n      var color = byteArray[i][j],\n          xpos, ypos;\n      // standard font size\n      if (size === 1) {\n        xpos = x + c;\n        ypos = y + j + pagePos;\n        this.drawPixel([xpos, ypos, color], false);\n      } else {\n        // MATH! Calculating pixel size multiplier to primitively scale the font\n        xpos = x + (i * size);\n        ypos = y + (j * size);\n        this.fillRect(xpos, ypos, size, size, color, false);\n      }\n    }\n    c = (c < font.width -1) ? c += 1 : 0;\n  }\n}\n\n// get character bytes from the supplied font object in order to send to framebuffer\nOled.prototype._readCharBytes = function(byteArray) {\n  var bitArr = [],\n      bitCharArr = [];\n  // loop through each byte supplied for a char\n  for (var i = 0; i < byteArray.length; i += 1) {\n    // set current byte\n    var byte = byteArray[i];\n    // read each byte\n    for (var j = 0; j < 8; j += 1) {\n      // shift bits right until all are read\n      var bit = byte >> j & 1;\n      bitArr.push(bit);\n    }\n    // push to array containing flattened bit sequence\n    bitCharArr.push(bitArr);\n    // clear bits for next byte\n    bitArr = [];\n  }\n  return bitCharArr;\n}\n\n// find where the character exists within the font object\nOled.prototype._findCharBuf = function(font, c) {\n  var charLength = Math.ceil((font.width * font.height) / 8);\n  // use the lookup array as a ref to find where the current char bytes start\n  var cBufPos = font.lookup.indexOf(c) * charLength;\n  // slice just the current char's bytes out of the fontData array and return\n  var cBuf = font.fontData.slice(cBufPos, cBufPos + charLength);\n  return cBuf;\n}\n\n// send the entire framebuffer to the oled\nOled.prototype.update = function() {\n  // wait for oled to be ready\n  this._waitUntilReady(function() {\n    // set the start and endbyte locations for oled display update\n    var displaySeq = [\n      this.COLUMN_ADDR,\n      this.screenConfig.coloffset,\n      this.screenConfig.coloffset + this.WIDTH - 1, // column start and end address\n      this.PAGE_ADDR, 0, (this.HEIGHT / 8) - 1 // page start and end address\n    ];\n\n    var displaySeqLen = displaySeq.length,\n        bufferLen = this.buffer.length,\n        i, v;\n\n    // send intro seq\n    for (i = 0; i < displaySeqLen; i += 1) {\n      this._transfer('cmd', displaySeq[i]);\n    }\n\n    // write buffer data\n    for (v = 0; v < bufferLen; v += 1) {\n      this._transfer('data', this.buffer[v]);\n    }\n\n  }.bind(this));\n\n  // now that all bytes are synced, reset dirty state\n  this.dirtyBytes = [];\n}\n\n// send dim display command to oled\nOled.prototype.dimDisplay = function(bool) {\n  var contrast;\n\n  if (bool) {\n    contrast = 0; // Dimmed display\n  } else {\n    contrast = 0xCF; // Bright display\n  }\n\n  this._transfer('cmd', this.SET_CONTRAST);\n  this._transfer('cmd', contrast);\n}\n\n// turn oled off\nOled.prototype.turnOffDisplay = function() {\n  this._transfer('cmd', this.DISPLAY_OFF);\n}\n\n// turn oled on\nOled.prototype.turnOnDisplay = function() {\n  this._transfer('cmd', this.DISPLAY_ON);\n}\n\n// clear all pixels currently on the display\nOled.prototype.clearDisplay = function(sync) {\n  var immed = (typeof sync === 'undefined') ? true : sync;\n  // write off pixels\n  //this.buffer.fill(0x00);\n  for (var i = 0; i < this.buffer.length; i += 1) {\n    if (this.buffer[i] !== 0x00) {\n      this.buffer[i] = 0x00;\n      if (this.dirtyBytes.indexOf(i) === -1) {\n        this.dirtyBytes.push(i);\n      }\n    }\n  }\n  if (immed) {\n    this._updateDirtyBytes(this.dirtyBytes);\n  }\n}\n\n// invert pixels on oled\nOled.prototype.invertDisplay = function(bool) {\n  if (bool) {\n    this._transfer('cmd', this.INVERT_DISPLAY); // inverted\n  } else {\n    this._transfer('cmd', this.NORMAL_DISPLAY); // non inverted\n  }\n}\n\n// draw an image pixel array on the screen\nOled.prototype.drawBitmap = function(pixels, sync) {\n  var immed = (typeof sync === 'undefined') ? true : sync;\n  var x, y,\n      pixelArray = [];\n\n  for (var i = 0; i < pixels.length; i++) {\n    x = Math.floor(i % this.WIDTH);\n    y = Math.floor(i / this.WIDTH);\n\n    this.drawPixel([x, y, pixels[i]], false);\n  }\n\n  if (immed) {\n    this._updateDirtyBytes(this.dirtyBytes);\n  }\n}\n\n// draw one or many pixels on oled\nOled.prototype.drawPixel = function(pixels, sync) {\n  var immed = (typeof sync === 'undefined') ? true : sync;\n\n  // handle lazy single pixel case\n  if (typeof pixels[0] !== 'object') pixels = [pixels];\n\n  pixels.forEach(function(el) {\n    // return if the pixel is out of range\n    var x = el[0], y = el[1], color = el[2];\n    if (x > this.WIDTH || y > this.HEIGHT) return;\n\n    // thanks, Martin Richards.\n    // I wanna can this, this tool is for devs who get 0 indexes\n    //x -= 1; y -=1;\n    var byte = 0,\n        page = Math.floor(y / 8),\n        pageShift = 0x01 << (y - 8 * page);\n\n    // is the pixel on the first row of the page?\n    (page == 0) ? byte = x : byte = x + (this.WIDTH * page);\n\n    // colors! Well, monochrome.\n    if (color === 'BLACK' || color === 0) {\n      this.buffer[byte] &= ~pageShift;\n    }\n    if (color === 'WHITE' || color > 0) {\n      this.buffer[byte] |= pageShift;\n    }\n\n    // push byte to dirty if not already there\n    if (this.dirtyBytes.indexOf(byte) === -1) {\n      this.dirtyBytes.push(byte);\n    }\n\n  }, this);\n\n  if (immed) {\n    this._updateDirtyBytes(this.dirtyBytes);\n  }\n}\n\n// looks at dirty bytes, and sends the updated bytes to the display\nOled.prototype._updateDirtyBytes = function(byteArray) {\n  var blen = byteArray.length, i,\n      displaySeq = [];\n\n  this._waitUntilReady(function() {\n    var pageStart = Infinity, pageEnd = 0;\n    var colStart = Infinity, colEnd = 0, any = false;\n\n    // iterate through dirty bytes\n    for (var i = 0; i < blen; i += 1) {\n      var b = byteArray[i];\n      if ((b >= 0) && (b < this.buffer.length)) {\n        var page = b / this.WIDTH | 0;\n        if (page < pageStart) pageStart = page;\n        if (page > pageEnd) pageEnd = page;\n        var col = b % this.WIDTH;\n        if (col < colStart) colStart = col;\n        if (col > colEnd) colEnd = col;\n        any = true;\n      }\n    }\n\n    if (!any) return;\n\n    var displaySeq = [\n      this.COLUMN_ADDR, colStart, colEnd, // column start and end address\n      this.PAGE_ADDR, pageStart, pageEnd // page start and end address\n    ];\n\n    var displaySeqLen = displaySeq.length, v, vp, vc;\n\n    // send intro seq\n    for (v = 0; v < displaySeqLen; v += 1) {\n      this._transfer('cmd', displaySeq[v]);\n    }\n    // send byte, then move on to next byte\n    for (vp = pageStart; vp <= pageEnd; vp += 1) {\n      for (vc = colStart; vc <= colEnd; vc += 1) {\n        this._transfer('data', this.buffer[this.WIDTH * vp + vc]);\n      }\n    }\n\n  }.bind(this));\n\n  // now that all bytes are synced, reset dirty state\n  this.dirtyBytes = [];\n}\n\n// using Bresenham's line algorithm\nOled.prototype.drawLine = function(x0, y0, x1, y1, color, sync) {\n  var immed = (typeof sync === 'undefined') ? true : sync;\n\n  var dx = Math.abs(x1 - x0), sx = x0 < x1 ? 1 : -1,\n      dy = Math.abs(y1 - y0), sy = y0 < y1 ? 1 : -1,\n      err = (dx > dy ? dx : -dy) / 2;\n\n  while (true) {\n    this.drawPixel([x0, y0, color], false);\n\n    if (x0 === x1 && y0 === y1) break;\n\n    var e2 = err;\n\n    if (e2 > -dx) {err -= dy; x0 += sx;}\n    if (e2 < dy) {err += dx; y0 += sy;}\n  }\n\n  if (immed) {\n    this._updateDirtyBytes(this.dirtyBytes);\n  }\n}\n\n// Draw an outlined  rectangle\nOled.prototype.drawRect = function(x, y, w, h, color, sync){\n  var immed = (typeof sync === 'undefined') ? true : sync;\n  //top\n  this.drawLine(x, y, x + w, y,color,false);\n\n  //left\n  this.drawLine(x, y + 1, x, y + h - 1, color, false);\n\n  //right\n  this.drawLine(x + w, y + 1, x + w, y + h - 1, color, false);\n\n  //bottom\n  this.drawLine(x, y + h - 1, x + w, y + h - 1, color, false);\n\n  if (immed) {\n    this._updateDirtyBytes(this.dirtyBytes);\n  }\n};\n\n// draw a filled rectangle on the oled\nOled.prototype.fillRect = function(x, y, w, h, color, sync) {\n  var immed = (typeof sync === 'undefined') ? true : sync;\n  // one iteration for each column of the rectangle\n  for (var i = x; i < x + w; i += 1) {\n    // draws a vert line\n    this.drawLine(i, y, i, y+h-1, color, false);\n  }\n  if (immed) {\n    this._updateDirtyBytes(this.dirtyBytes);\n  }\n}\n\n/**\n * Draw a circle outline\n *\n * This method is ad verbatim translation from the corresponding\n * method on the Adafruit GFX library\n * https://github.com/adafruit/Adafruit-GFX-Library\n */\nOled.prototype.drawCircle = function(x0, y0, r, color, sync) {\n  var immed = (typeof sync === 'undefined') ? true : sync;\n\n  var f = 1 - r;\n  var ddF_x = 1;\n  var ddF_y = -2 * r;\n  var x = 0;\n  var y = r;\n\n  this.drawPixel(\n    [[x0, y0 + r, color],\n    [x0, y0 - r, color],\n    [x0 + r, y0, color],\n    [x0 - r, y0, color]],\n    false\n  );\n\n  while(x < y) {\n    if (f >=0) {\n      y--;\n      ddF_y += 2;\n      f += ddF_y;\n    }\n    x++;\n    ddF_x += 2;\n    f += ddF_x;\n\n    this.drawPixel(\n      [[x0 + x, y0 + y, color],\n      [x0 - x, y0 + y, color],\n      [x0 + x, y0 - y, color],\n      [x0 - x, y0 - y, color],\n      [x0 + y, y0 + x, color],\n      [x0 - y, y0 + x, color],\n      [x0 + y, y0 - x, color],\n      [x0 - y, y0 - x, color]],\n      false\n    );\n  }\n\n  if (immed) {\n    this._updateDirtyBytes(this.dirtyBytes);\n  }\n};\n\n// activate scrolling for rows start through stop\nOled.prototype.startScroll = function(dir, start, stop) {\n  var scrollHeader,\n      cmdSeq = [];\n\n  switch (dir) {\n    case 'right':\n      cmdSeq.push(this.RIGHT_HORIZONTAL_SCROLL); break;\n    case 'left':\n      cmdSeq.push(this.LEFT_HORIZONTAL_SCROLL); break;\n    case 'left diagonal':\n      cmdSeq.push(\n        this.SET_VERTICAL_SCROLL_AREA,\n        0x00,\n        this.HEIGHT,\n        this.VERTICAL_AND_LEFT_HORIZONTAL_SCROLL,\n        0x00,\n        start,\n        0x00,\n        stop,\n        0x01,\n        this.ACTIVATE_SCROLL\n      );\n      break;\n    case 'right diagonal':\n      cmdSeq.push(\n        this.SET_VERTICAL_SCROLL_AREA,\n        0x00,\n        this.HEIGHT,\n        this.VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL,\n        0x00,\n        start,\n        0x00,\n        stop,\n        0x01,\n        this.ACTIVATE_SCROLL\n      );\n      break;\n  }\n\n  this._waitUntilReady(function() {\n    if(dir === 'right' || dir === 'left'){\n      cmdSeq.push(\n        0x00, start,\n        0x00, stop,\n        0x00, 0xFF,\n        this.ACTIVATE_SCROLL\n      );\n    }\n\n    var i, cmdSeqLen = cmdSeq.length;\n\n    for (i = 0; i < cmdSeqLen; i += 1) {\n      this._transfer('cmd', cmdSeq[i]);\n    }\n  }.bind(this));\n}\n\n// stop scrolling display contents\nOled.prototype.stopScroll = function() {\n  this._transfer('cmd', this.DEACTIVATE_SCROLL); // stahp\n}\n\nmodule.exports = Oled;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack:///./node_modules/oled-js/oled.js?");

/***/ }),

/***/ "./node_modules/process-nextick-args/index.js":
/*!****************************************************!*\
  !*** ./node_modules/process-nextick-args/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {\n\nif (!process.version ||\n    process.version.indexOf('v0.') === 0 ||\n    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {\n  module.exports = { nextTick: nextTick };\n} else {\n  module.exports = process\n}\n\nfunction nextTick(fn, arg1, arg2, arg3) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('\"callback\" argument must be a function');\n  }\n  var len = arguments.length;\n  var args, i;\n  switch (len) {\n  case 0:\n  case 1:\n    return process.nextTick(fn);\n  case 2:\n    return process.nextTick(function afterTickOne() {\n      fn.call(null, arg1);\n    });\n  case 3:\n    return process.nextTick(function afterTickTwo() {\n      fn.call(null, arg1, arg2);\n    });\n  case 4:\n    return process.nextTick(function afterTickThree() {\n      fn.call(null, arg1, arg2, arg3);\n    });\n  default:\n    args = new Array(len - 1);\n    i = 0;\n    while (i < args.length) {\n      args[i++] = arguments[i];\n    }\n    return process.nextTick(function afterTick() {\n      fn.apply(null, args);\n    });\n  }\n}\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/process-nextick-args/index.js?");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack:///./node_modules/process/browser.js?");

/***/ }),

/***/ "./node_modules/readable-stream/duplex-browser.js":
/*!********************************************************!*\
  !*** ./node_modules/readable-stream/duplex-browser.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./lib/_stream_duplex.js */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\n\n\n//# sourceURL=webpack:///./node_modules/readable-stream/duplex-browser.js?");

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_duplex.js":
/*!************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_duplex.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n\n\n/*<replacement>*/\n\nvar pna = __webpack_require__(/*! process-nextick-args */ \"./node_modules/process-nextick-args/index.js\");\n/*</replacement>*/\n\n/*<replacement>*/\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    keys.push(key);\n  }return keys;\n};\n/*</replacement>*/\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar util = __webpack_require__(/*! core-util-is */ \"./node_modules/core-util-is/lib/util.js\");\nutil.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n/*</replacement>*/\n\nvar Readable = __webpack_require__(/*! ./_stream_readable */ \"./node_modules/readable-stream/lib/_stream_readable.js\");\nvar Writable = __webpack_require__(/*! ./_stream_writable */ \"./node_modules/readable-stream/lib/_stream_writable.js\");\n\nutil.inherits(Duplex, Readable);\n\n{\n  // avoid scope creep, the keys array can then be collected\n  var keys = objectKeys(Writable.prototype);\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false) this.readable = false;\n\n  if (options && options.writable === false) this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended) return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  pna.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});\n\nDuplex.prototype._destroy = function (err, cb) {\n  this.push(null);\n  this.end();\n\n  pna.nextTick(cb, err);\n};\n\n//# sourceURL=webpack:///./node_modules/readable-stream/lib/_stream_duplex.js?");

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_passthrough.js":
/*!*****************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_passthrough.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n\n\nmodule.exports = PassThrough;\n\nvar Transform = __webpack_require__(/*! ./_stream_transform */ \"./node_modules/readable-stream/lib/_stream_transform.js\");\n\n/*<replacement>*/\nvar util = __webpack_require__(/*! core-util-is */ \"./node_modules/core-util-is/lib/util.js\");\nutil.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};\n\n//# sourceURL=webpack:///./node_modules/readable-stream/lib/_stream_passthrough.js?");

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_readable.js":
/*!**************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_readable.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n/*<replacement>*/\n\nvar pna = __webpack_require__(/*! process-nextick-args */ \"./node_modules/process-nextick-args/index.js\");\n/*</replacement>*/\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/isarray/index.js\");\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\n\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = __webpack_require__(/*! ./internal/streams/stream */ \"./node_modules/readable-stream/lib/internal/streams/stream-browser.js\");\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = __webpack_require__(/*! safe-buffer */ \"./node_modules/safe-buffer/index.js\").Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = __webpack_require__(/*! core-util-is */ \"./node_modules/core-util-is/lib/util.js\");\nutil.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = __webpack_require__(/*! util */ 0);\nvar debug = void 0;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar BufferList = __webpack_require__(/*! ./internal/streams/BufferList */ \"./node_modules/readable-stream/lib/internal/streams/BufferList.js\");\nvar destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ \"./node_modules/readable-stream/lib/internal/streams/destroy.js\");\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);\n\n  // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var readableHwm = options.readableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ \"./node_modules/string_decoder/lib/string_decoder.js\").StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n  }\n});\n\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\nReadable.prototype._destroy = function (err, cb) {\n  this.push(null);\n  cb(err);\n};\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  var state = stream._readableState;\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n    if (er) {\n      stream.emit('error', er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        stream.emit('error', new Error('stream.push() after EOF'));\n      } else {\n        state.reading = false;\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n    }\n  }\n\n  return needMoreData(state);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    stream.emit('data', chunk);\n    stream.read(0);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n    if (state.needReadable) emitReadable(stream);\n  }\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ \"./node_modules/string_decoder/lib/string_decoder.js\").StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (n !== 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    pna.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('_read() is not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  // If the user pushes more data while we're writing to dest then we'll end up\n  // in ondata again. However, we only want to increase awaitDrain once because\n  // dest will only emit one 'drain' event for the multiple writes.\n  // => Introduce a guard on increasing awaitDrain.\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n    if (false === ret && !increasedAwaitDrain) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = { hasUnpiped: false };\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, unpipeInfo);\n    }return this;\n  }\n\n  // try to find the right one.\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this, unpipeInfo);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data') {\n    // Start flowing on next tick if stream isn't explicitly paused\n    if (this._readableState.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    var state = this._readableState;\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n      if (!state.reading) {\n        pna.nextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    pna.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null) {}\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  }\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  this._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._readableState.highWaterMark;\n  }\n});\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = fromListPartial(n, state.buffer, state.decoder);\n  }\n\n  return ret;\n}\n\n// Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromListPartial(n, list, hasStrings) {\n  var ret;\n  if (n < list.head.data.length) {\n    // slice is the same for buffers and strings\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    // first chunk is a perfect match\n    ret = list.shift();\n  } else {\n    // result spans more than one buffer\n    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n  }\n  return ret;\n}\n\n// Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n  while (p = p.next) {\n    var str = p.data;\n    var nb = n > str.length ? str.length : n;\n    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n    n -= nb;\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\n// Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBuffer(n, list) {\n  var ret = Buffer.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n  while (p = p.next) {\n    var buf = p.data;\n    var nb = n > buf.length ? buf.length : n;\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    pna.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/readable-stream/lib/_stream_readable.js?");

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_transform.js":
/*!***************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_transform.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n\n\nmodule.exports = Transform;\n\nvar Duplex = __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\n\n/*<replacement>*/\nvar util = __webpack_require__(/*! core-util-is */ \"./node_modules/core-util-is/lib/util.js\");\nutil.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) {\n    return this.emit('error', new Error('write callback called multiple times'));\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n\n  cb(er);\n\n  var rs = this._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  };\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  // When the writable side finishes, then flush out anything remaining.\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function') {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('_transform() is not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  var _this2 = this;\n\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n    _this2.emit('close');\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');\n\n  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');\n\n  return stream.push(null);\n}\n\n//# sourceURL=webpack:///./node_modules/readable-stream/lib/_stream_transform.js?");

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_writable.js":
/*!**************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_writable.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n\n\n/*<replacement>*/\n\nvar pna = __webpack_require__(/*! process-nextick-args */ \"./node_modules/process-nextick-args/index.js\");\n/*</replacement>*/\n\nmodule.exports = Writable;\n\n/* <replacement> */\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = __webpack_require__(/*! core-util-is */ \"./node_modules/core-util-is/lib/util.js\");\nutil.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n/*</replacement>*/\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: __webpack_require__(/*! util-deprecate */ \"./node_modules/util-deprecate/browser.js\")\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = __webpack_require__(/*! ./internal/streams/stream */ \"./node_modules/readable-stream/lib/internal/streams/stream-browser.js\");\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = __webpack_require__(/*! safe-buffer */ \"./node_modules/safe-buffer/index.js\").Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\nvar destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ \"./node_modules/readable-stream/lib/internal/streams/destroy.js\");\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream) {\n  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var writableHwm = options.writableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // if _final has been called\n  this.finalCalled = false;\n\n  // drain event flag.\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})();\n\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function (object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function (object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\n\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\n    return new Writable(options);\n  }\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n\n    if (typeof options.writev === 'function') this._writev = options.writev;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  pna.nextTick(cb, er);\n}\n\n// Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  if (er) {\n    stream.emit('error', er);\n    pna.nextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function') cb = nop;\n\n  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    pna.nextTick(cb, er);\n    // this can emit finish, and it will always happen\n    // after error\n    pna.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n    // this can emit finish, but finish must\n    // always follow error\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    var allBuffers = true;\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n    buffer.allBuffers = allBuffers;\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('_write() is not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n    if (err) {\n      stream.emit('error', err);\n    }\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function') {\n      state.pendingcb++;\n      state.finalCalled = true;\n      pna.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    prefinish(stream, state);\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  }\n  if (state.corkedRequestsFree) {\n    state.corkedRequestsFree.next = corkReq;\n  } else {\n    state.corkedRequestsFree = corkReq;\n  }\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  get: function () {\n    if (this._writableState === undefined) {\n      return false;\n    }\n    return this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._writableState.destroyed = value;\n  }\n});\n\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\nWritable.prototype._destroy = function (err, cb) {\n  this.end();\n  cb(err);\n};\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./../../timers-browserify/main.js */ \"./node_modules/timers-browserify/main.js\").setImmediate, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/readable-stream/lib/_stream_writable.js?");

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/BufferList.js":
/*!*************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/BufferList.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Buffer = __webpack_require__(/*! safe-buffer */ \"./node_modules/safe-buffer/index.js\").Buffer;\nvar util = __webpack_require__(/*! util */ 1);\n\nfunction copyBuffer(src, target, offset) {\n  src.copy(target, offset);\n}\n\nmodule.exports = function () {\n  function BufferList() {\n    _classCallCheck(this, BufferList);\n\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  BufferList.prototype.push = function push(v) {\n    var entry = { data: v, next: null };\n    if (this.length > 0) this.tail.next = entry;else this.head = entry;\n    this.tail = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.unshift = function unshift(v) {\n    var entry = { data: v, next: this.head };\n    if (this.length === 0) this.tail = entry;\n    this.head = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.shift = function shift() {\n    if (this.length === 0) return;\n    var ret = this.head.data;\n    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n    --this.length;\n    return ret;\n  };\n\n  BufferList.prototype.clear = function clear() {\n    this.head = this.tail = null;\n    this.length = 0;\n  };\n\n  BufferList.prototype.join = function join(s) {\n    if (this.length === 0) return '';\n    var p = this.head;\n    var ret = '' + p.data;\n    while (p = p.next) {\n      ret += s + p.data;\n    }return ret;\n  };\n\n  BufferList.prototype.concat = function concat(n) {\n    if (this.length === 0) return Buffer.alloc(0);\n    if (this.length === 1) return this.head.data;\n    var ret = Buffer.allocUnsafe(n >>> 0);\n    var p = this.head;\n    var i = 0;\n    while (p) {\n      copyBuffer(p.data, ret, i);\n      i += p.data.length;\n      p = p.next;\n    }\n    return ret;\n  };\n\n  return BufferList;\n}();\n\nif (util && util.inspect && util.inspect.custom) {\n  module.exports.prototype[util.inspect.custom] = function () {\n    var obj = util.inspect({ length: this.length });\n    return this.constructor.name + ' ' + obj;\n  };\n}\n\n//# sourceURL=webpack:///./node_modules/readable-stream/lib/internal/streams/BufferList.js?");

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/destroy.js":
/*!**********************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/destroy.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*<replacement>*/\n\nvar pna = __webpack_require__(/*! process-nextick-args */ \"./node_modules/process-nextick-args/index.js\");\n/*</replacement>*/\n\n// undocumented cb() API, needed for core, not for public API\nfunction destroy(err, cb) {\n  var _this = this;\n\n  var readableDestroyed = this._readableState && this._readableState.destroyed;\n  var writableDestroyed = this._writableState && this._writableState.destroyed;\n\n  if (readableDestroyed || writableDestroyed) {\n    if (cb) {\n      cb(err);\n    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {\n      pna.nextTick(emitErrorNT, this, err);\n    }\n    return this;\n  }\n\n  // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n\n  if (this._readableState) {\n    this._readableState.destroyed = true;\n  }\n\n  // if this is a duplex stream mark the writable part as destroyed as well\n  if (this._writableState) {\n    this._writableState.destroyed = true;\n  }\n\n  this._destroy(err || null, function (err) {\n    if (!cb && err) {\n      pna.nextTick(emitErrorNT, _this, err);\n      if (_this._writableState) {\n        _this._writableState.errorEmitted = true;\n      }\n    } else if (cb) {\n      cb(err);\n    }\n  });\n\n  return this;\n}\n\nfunction undestroy() {\n  if (this._readableState) {\n    this._readableState.destroyed = false;\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n  }\n\n  if (this._writableState) {\n    this._writableState.destroyed = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n  }\n}\n\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\n\nmodule.exports = {\n  destroy: destroy,\n  undestroy: undestroy\n};\n\n//# sourceURL=webpack:///./node_modules/readable-stream/lib/internal/streams/destroy.js?");

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/stream-browser.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/stream-browser.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\n\n\n//# sourceURL=webpack:///./node_modules/readable-stream/lib/internal/streams/stream-browser.js?");

/***/ }),

/***/ "./node_modules/readable-stream/passthrough.js":
/*!*****************************************************!*\
  !*** ./node_modules/readable-stream/passthrough.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./readable */ \"./node_modules/readable-stream/readable-browser.js\").PassThrough\n\n\n//# sourceURL=webpack:///./node_modules/readable-stream/passthrough.js?");

/***/ }),

/***/ "./node_modules/readable-stream/readable-browser.js":
/*!**********************************************************!*\
  !*** ./node_modules/readable-stream/readable-browser.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ./lib/_stream_readable.js */ \"./node_modules/readable-stream/lib/_stream_readable.js\");\nexports.Stream = exports;\nexports.Readable = exports;\nexports.Writable = __webpack_require__(/*! ./lib/_stream_writable.js */ \"./node_modules/readable-stream/lib/_stream_writable.js\");\nexports.Duplex = __webpack_require__(/*! ./lib/_stream_duplex.js */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\nexports.Transform = __webpack_require__(/*! ./lib/_stream_transform.js */ \"./node_modules/readable-stream/lib/_stream_transform.js\");\nexports.PassThrough = __webpack_require__(/*! ./lib/_stream_passthrough.js */ \"./node_modules/readable-stream/lib/_stream_passthrough.js\");\n\n\n//# sourceURL=webpack:///./node_modules/readable-stream/readable-browser.js?");

/***/ }),

/***/ "./node_modules/readable-stream/transform.js":
/*!***************************************************!*\
  !*** ./node_modules/readable-stream/transform.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./readable */ \"./node_modules/readable-stream/readable-browser.js\").Transform\n\n\n//# sourceURL=webpack:///./node_modules/readable-stream/transform.js?");

/***/ }),

/***/ "./node_modules/readable-stream/writable-browser.js":
/*!**********************************************************!*\
  !*** ./node_modules/readable-stream/writable-browser.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./lib/_stream_writable.js */ \"./node_modules/readable-stream/lib/_stream_writable.js\");\n\n\n//# sourceURL=webpack:///./node_modules/readable-stream/writable-browser.js?");

/***/ }),

/***/ "./node_modules/safe-buffer/index.js":
/*!*******************************************!*\
  !*** ./node_modules/safe-buffer/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* eslint-disable node/no-deprecated-api */\nvar buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n\n\n//# sourceURL=webpack:///./node_modules/safe-buffer/index.js?");

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/setimmediate/setImmediate.js?");

/***/ }),

/***/ "./node_modules/simple-swizzle/index.js":
/*!**********************************************!*\
  !*** ./node_modules/simple-swizzle/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar isArrayish = __webpack_require__(/*! is-arrayish */ \"./node_modules/is-arrayish/index.js\");\n\nvar concat = Array.prototype.concat;\nvar slice = Array.prototype.slice;\n\nvar swizzle = module.exports = function swizzle(args) {\n\tvar results = [];\n\n\tfor (var i = 0, len = args.length; i < len; i++) {\n\t\tvar arg = args[i];\n\n\t\tif (isArrayish(arg)) {\n\t\t\t// http://jsperf.com/javascript-array-concat-vs-push/98\n\t\t\tresults = concat.call(results, slice.call(arg));\n\t\t} else {\n\t\t\tresults.push(arg);\n\t\t}\n\t}\n\n\treturn results;\n};\n\nswizzle.wrap = function (fn) {\n\treturn function () {\n\t\treturn fn(swizzle(arguments));\n\t};\n};\n\n\n//# sourceURL=webpack:///./node_modules/simple-swizzle/index.js?");

/***/ }),

/***/ "./node_modules/stream-browserify/index.js":
/*!*************************************************!*\
  !*** ./node_modules/stream-browserify/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Stream;\n\nvar EE = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n\ninherits(Stream, EE);\nStream.Readable = __webpack_require__(/*! readable-stream/readable.js */ \"./node_modules/readable-stream/readable-browser.js\");\nStream.Writable = __webpack_require__(/*! readable-stream/writable.js */ \"./node_modules/readable-stream/writable-browser.js\");\nStream.Duplex = __webpack_require__(/*! readable-stream/duplex.js */ \"./node_modules/readable-stream/duplex-browser.js\");\nStream.Transform = __webpack_require__(/*! readable-stream/transform.js */ \"./node_modules/readable-stream/transform.js\");\nStream.PassThrough = __webpack_require__(/*! readable-stream/passthrough.js */ \"./node_modules/readable-stream/passthrough.js\");\n\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream;\n\n\n\n// old-style streams.  Note that the pipe method (the only relevant\n// part of this class) is overridden in the Readable class.\n\nfunction Stream() {\n  EE.call(this);\n}\n\nStream.prototype.pipe = function(dest, options) {\n  var source = this;\n\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n\n  source.on('data', ondata);\n\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n\n  dest.on('drain', ondrain);\n\n  // If the 'end' option is not supplied, dest.end() will be called when\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend);\n    source.on('close', onclose);\n  }\n\n  var didOnEnd = false;\n  function onend() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    dest.end();\n  }\n\n\n  function onclose() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    if (typeof dest.destroy === 'function') dest.destroy();\n  }\n\n  // don't leave dangling pipes when there are errors.\n  function onerror(er) {\n    cleanup();\n    if (EE.listenerCount(this, 'error') === 0) {\n      throw er; // Unhandled stream error in pipe.\n    }\n  }\n\n  source.on('error', onerror);\n  dest.on('error', onerror);\n\n  // remove all the event listeners that were added.\n  function cleanup() {\n    source.removeListener('data', ondata);\n    dest.removeListener('drain', ondrain);\n\n    source.removeListener('end', onend);\n    source.removeListener('close', onclose);\n\n    source.removeListener('error', onerror);\n    dest.removeListener('error', onerror);\n\n    source.removeListener('end', cleanup);\n    source.removeListener('close', cleanup);\n\n    dest.removeListener('close', cleanup);\n  }\n\n  source.on('end', cleanup);\n  source.on('close', cleanup);\n\n  dest.on('close', cleanup);\n\n  dest.emit('pipe', source);\n\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\n  return dest;\n};\n\n\n//# sourceURL=webpack:///./node_modules/stream-browserify/index.js?");

/***/ }),

/***/ "./node_modules/string_decoder/lib/string_decoder.js":
/*!***********************************************************!*\
  !*** ./node_modules/string_decoder/lib/string_decoder.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n/*<replacement>*/\n\nvar Buffer = __webpack_require__(/*! safe-buffer */ \"./node_modules/safe-buffer/index.js\").Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}\n\n//# sourceURL=webpack:///./node_modules/string_decoder/lib/string_decoder.js?");

/***/ }),

/***/ "./node_modules/supports-color/browser.js":
/*!************************************************!*\
  !*** ./node_modules/supports-color/browser.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nmodule.exports = false;\n\n\n//# sourceURL=webpack:///./node_modules/supports-color/browser.js?");

/***/ }),

/***/ "./node_modules/temporal/lib/temporal.js":
/*!***********************************************!*\
  !*** ./node_modules/temporal/lib/temporal.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {var Emitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\n\n// Default resolution is 1ms\nvar resolutionDivisor = 1e6;\n\n// All APIs will be added to `exportable`, which is lastly\n// assigned as the value of module.exports\nvar exportable = new Emitter();\n\n// Object containing callback queues, keys are time in MS\nvar queue = {};\n\n// Store the last event time\nvar gLast = Date.now();\n\n// Actively processing queue\nvar isProcessing = false;\n\nvar tick = global.setImmediate || process.nextTick;\n\nvar hrTime = function() {\n  var hrtime = process.hrtime();\n  return Math.floor((hrtime[0] * 1e9 + hrtime[1]) / resolutionDivisor);\n};\n\nvar time = function() {\n  return Date.now();\n};\n\nvar getTime = time;\n\n/**\n * Task create a temporal task item\n * @param {Object} entry Options for entry {time, task}\n */\nfunction Task(entry) {\n  if (!(this instanceof Task)) {\n    return new Task(entry);\n  }\n\n  this.called = 0;\n  this.now = this.calledAt = getTime();\n\n  if (resolutionDivisor !== 1e6) {\n    entry.time = ~~(entry.time * (1e6 / resolutionDivisor));\n  }\n\n  // Side table property definitions\n  this.isRunnable = true;\n  this.later = this.now + entry.time;\n  this.task = entry.task;\n  this.type = entry.type;\n  this.time = entry.time;\n\n  if (this.later > gLast) {\n    gLast = this.later;\n  }\n\n  if (!queue[this.later]) {\n    queue[this.later] = [];\n  }\n  // console.log( entry.later, this );\n  queue[this.later].push(this);\n}\n\n// Inherit EventEmitter API\nutil.inherits(Task, Emitter);\n\n/**\n * Task.deriveOp (reduction)\n * (static)\n */\nTask.deriveOp = function(p, v) {\n  return v !== \"task\" ? v : p;\n};\n\n\n/**\n * stop Stop the current behaviour\n */\nTask.prototype.stop = function() {\n  this.isRunnable = false;\n  this.emit(\"stop\");\n};\n\nfunction Queue(tasks) {\n  this.refs = [];\n  this.add(tasks);\n}\n\nutil.inherits(Queue, Emitter);\n\nQueue.prototype.stop = function() {\n  this.refs.forEach(function(ref) {\n    ref.stop();\n  });\n\n  this.emit(\"stop\");\n};\n\nQueue.prototype.add = function(tasks) {\n  var op, item, task, ref;\n\n  this.cumulative = this.cumulative || 0;\n\n  while (tasks.length) {\n    item = tasks.shift();\n    op = Object.keys(item).reduce(Task.deriveOp, \"\");\n\n    this.cumulative += item[op];\n\n    // For the last task, ensure that an \"end\" event is\n    // emitted after the final callback is called.\n    if (tasks.length === 0) {\n      task = item.task;\n      item.task = temporald => {\n        task.call(this, temporald);\n\n        // Emit the end event _from_ within the _last_ task\n        // defined in the Queue tasks. Use the |tasks| array\n        // object as the access key.\n        this.emit(\"end\", temporald);\n\n        // Reset on last one in the queue\n        this.cumulative = 0;\n      };\n    }\n\n    if (op === \"loop\" && tasks.length === 0) {\n      // When transitioning from a \"delay\" to a \"loop\", allow\n      // the loop to iterate the amount of time given,\n      // but still start at the correct offset.\n      ref = exportable.delay(this.cumulative - item[op], () => {\n        ref = exportable.loop(item[op], item.task);\n\n        this.refs.push(ref);\n      });\n    } else {\n      ref = exportable[op](this.cumulative, item.task);\n    }\n\n    this.refs.push(ref);\n  }\n};\n\nexportable.queue = function(tasks) {\n  var queue = new Queue(tasks);\n  processQueue();\n  return queue;\n};\n\n// For more information about this approach:\n//\n//    https://dl.dropbox.com/u/3531958/empirejs/index.html\n//\n\nvar previousTime = getTime();\n\nfunction processQueue() {\n\n  if (!isProcessing) {\n    isProcessing = true;\n    exportable.emit(\"busy\");\n  }\n\n  var now = getTime();\n  var entries = [];\n  var callProcessQueue = true;\n  var entry, i;\n\n  // Nothing scheduled, don't call processQueue again\n  if (gLast <= now) {\n    callProcessQueue = false;\n  }\n\n  for (i = previousTime; i <= now; i++) {\n    // Accumlate entries\n    [].push.apply(entries, queue[i] || []);\n  }\n\n  if (entries.length) {\n\n    // console.log(now, entries);\n    // console.log( entries );\n    while (entries.length) {\n      // Shift the entry out of the current list\n      entry = entries.shift();\n\n      // Execute the entry's callback, with\n      // \"entry\" as first arg\n      if (entry.isRunnable) {\n        entry.called++;\n        entry.calledAt = now;\n        entry.task.call(entry, entry);\n      }\n\n      // Additional \"loop\" handling\n      if (entry.type === \"loop\" && entry.isRunnable) {\n        // There is an active loop, so keep the\n        // processQueue active.\n        callProcessQueue = true;\n\n        // Calculate the next execution time\n        entry.later = now + entry.time;\n\n        // With sub-millisecond wait times, it's conceivable that the clock\n        // may have passed our next task time so make sure it runs\n        if (entry.later > gLast) {\n          gLast = entry.later;\n        }\n\n        // Create a queue entry if none exists\n        if (!queue[entry.later]) {\n          queue[entry.later] = [];\n        }\n\n        if (entry.isRunnable) {\n          // Push the entry into the queue\n          queue[entry.later].push(entry);\n        }\n      }\n    }\n\n    // Cleanup\n    for (i = previousTime; i <= now; i++) {\n      delete queue[i];\n    }\n\n    entries.length = 0;\n  }\n\n  previousTime = now;\n\n  if (callProcessQueue) {\n    tick(processQueue);\n  } else {\n    isProcessing = false;\n    exportable.emit(\"idle\");\n  }\n}\n\n[\"loop\", \"delay\"].forEach(function(type) {\n  exportable[type] = function(time, operation) {\n    if (typeof time === \"function\") {\n      operation = time;\n      time = 10;\n    }\n    var task = new Task({\n      time: time,\n      type: type,\n      task: operation\n    });\n\n    if (!isProcessing) {\n      processQueue();\n    }\n\n    return task;\n  };\n});\n\n// Alias \"delay\" as \"wait\" or \"defer\" (back compat with old compulsive API)\n// These aid only in user code that desires clarity in purpose.\n// Certain practical applications might be suited to\n// \"defer\" or \"wait\" vs. \"delay\"\n//\nexportable.wait = exportable.defer = exportable.delay;\n\nexportable.repeat = function(n, ms, callback) {\n  return exportable.loop(ms, function(context) {\n    callback(context);\n\n    if (context.called === n) {\n      this.stop();\n    }\n  });\n};\n\nexportable.clear = function() {\n  isProcessing = false;\n  exportable.removeAllListeners();\n  queue = {};\n};\n\nexportable.resolution = function(value) {\n  if (value === 0.1 || value === 0.01) {\n    resolutionDivisor = 1e6 * value;\n    getTime = hrTime;\n  } else {\n    resolutionDivisor = 1e6;\n    getTime = time;\n  }\n  previousTime = getTime();\n};\n\nmodule.exports = exportable;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/temporal/lib/temporal.js?");

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(/*! setimmediate */ \"./node_modules/setimmediate/setImmediate.js\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/timers-browserify/main.js?");

/***/ }),

/***/ "./node_modules/util-deprecate/browser.js":
/*!************************************************!*\
  !*** ./node_modules/util-deprecate/browser.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/util-deprecate/browser.js?");

/***/ }),

/***/ "./node_modules/util/support/isBufferBrowser.js":
/*!******************************************************!*\
  !*** ./node_modules/util/support/isBufferBrowser.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}\n\n//# sourceURL=webpack:///./node_modules/util/support/isBufferBrowser.js?");

/***/ }),

/***/ "./node_modules/util/util.js":
/*!***********************************!*\
  !*** ./node_modules/util/util.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ \"./node_modules/util/support/isBufferBrowser.js\");\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/util/util.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n\n\n//# sourceURL=webpack:///(webpack)/buildin/module.js?");

/***/ }),

/***/ "./node_modules/webusb-serial/index.js":
/*!*********************************************!*\
  !*** ./node_modules/webusb-serial/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Buffer) {\n\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\nvar stream = __webpack_require__(/*! stream */ \"./node_modules/stream-browserify/index.js\");\n\nvar DEFAULT_FILTERS = [\n  { 'vendorId': 0x2341, 'productId': 0x8036 }, // Arduino Leonardo\n  { 'vendorId': 0x2341, 'productId': 0x8037 }, // Arduino Micro\n  { 'vendorId': 0x239a, 'productId': 0x8011 } // Adafruit Circuit Playground\n];\n\n\nfunction WebUSBSerialPort(options) {\n  var self = this;\n\n  options = options || {};\n  self.filters = options.filters || DEFAULT_FILTERS;\n\n  function handleDevice(device) {\n    self.device = device;\n\n    var readLoop = function(){\n      self.device.transferIn(5, 64).then(function(result){\n        self.emit('data', new Buffer(result.data.buffer));\n        readLoop();\n      }, function(error){\n        self.emit('emit', error);\n      });\n    };\n\n    self.device.open()\n      .then(function(){\n        return self.device.configuration;\n      })\n      .then(function(config){\n        if (config.configurationValue == 1) {\n          return {};\n        } else {\n          throw new Error(\"Need to setConfiguration(1).\");\n        }\n      })\n      .catch(function(error){\n        return self.device.setConfiguration(1);\n      })\n      .then(function(){\n        return self.device.claimInterface(2);\n      })\n      .then(function(){\n        return  self.device.controlTransferOut({\n          'requestType': 'class',\n          'recipient': 'interface',\n          'request': 0x22,\n          'value': 0x01,\n          'index': 0x02});\n      })\n      .then(function() {\n        self.emit('open');\n        readLoop();\n      });\n  }\n\n  if(options.device) {\n    handleDevice(options.device);\n  }\n  else{\n    navigator.usb.requestDevice({filters: self.filters })\n    .then(handleDevice)\n    .catch(function(err){\n      self.emit('error', err);\n    });\n  }\n  \n}\n\nutil.inherits(WebUSBSerialPort, stream.Stream);\n\n\nWebUSBSerialPort.prototype.open = function (callback) {\n  this.emit('open');\n  if (callback) {\n    callback();\n  }\n\n};\n\n\n\nWebUSBSerialPort.prototype.write = function (data, callback) {\n  this.device.transferOut(4, data)\n  .then(function(){\n    if(callback){\n      callback(null);\n    }\n  })\n  .catch(function(error){\n    if(callback){\n      callback(error);\n    }\n  });\n\n};\n\n\n\nWebUSBSerialPort.prototype.close = function (callback) {\n  var self = this;\n  self.device.controlTransferOut({\n              'requestType': 'class',\n              'recipient': 'interface',\n              'request': 0x22,\n              'value': 0x00,\n              'index': 0x02})\n    .then(function(){\n      self.device.close();\n      if(callback){\n        callback();\n      }\n    });\n\n};\n\nWebUSBSerialPort.prototype.flush = function (callback) {\n  if(callback){\n    callback();\n  }\n};\n\nWebUSBSerialPort.prototype.drain = function (callback) {\n  if(callback){\n    callback();\n  }\n};\n\nWebUSBSerialPort.DEFAULT_FILTERS = DEFAULT_FILTERS;\n\nmodule.exports = WebUSBSerialPort;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack:///./node_modules/webusb-serial/index.js?");

/***/ }),

/***/ "./src/j5.js":
/*!*******************!*\
  !*** ./src/j5.js ***!
  \*******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process, global) {process.hrtime = __webpack_require__(/*! browser-process-hrtime */ \"./node_modules/browser-process-hrtime/index.js\");\nconst j5 = __webpack_require__(/*! johnny-five */ \"./node_modules/johnny-five/lib/johnny-five.js\");\n\nj5.usbSerial = __webpack_require__(/*! webusb-serial */ \"./node_modules/webusb-serial/index.js\");\nj5.firmata = __webpack_require__(/*! firmata */ \"./node_modules/firmata/lib/firmata.js\");\nj5.nodeLed = __webpack_require__(/*! node-led */ \"./node_modules/node-led/index.js\");\nj5.nodePixel = __webpack_require__(/*! node-pixel */ \"./node_modules/node-pixel/lib/pixel.js\");\nj5.oledJS = __webpack_require__(/*! oled-js */ \"./node_modules/oled-js/oled.js\");\n\nconst { EventEmitter } = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\nj5.events = new EventEmitter();\n\nj5.handleElementInit = function(btn) {\n  navigator.usb.getDevices().then(function(devices){\n    if(devices.length){\n      const device = devices[0];\n      btn.style.display = 'none';\n      const serial = new p5.j5.usbSerial({device});\n      j5.events.emit('serial', serial);\n    }\n  })\n  .catch((err) => {\n    console.log('err', err);\n  });\n\n  btn.addEventListener(\"click\", function( event ) {\n    // display the current click count inside the clicked div\n    console.log(event);\n    const device = new p5.j5.usbSerial();\n    console.log('serial device', device);\n    j5.events.emit('serial', device);\n    btn.style.display = 'none';\n  }, false);\n\n  j5.events.once('boardReady', () => {\n    console.log('board ready');\n  });\n\n}\n\n\nif(global.p5) {\n  const p5 = global.p5;\n  p5.j5 = j5;\n  p5.five = j5;\n  p5.prototype.registerPreloadMethod('loadBoard', p5.prototype);\n  p5.prototype.loadBoard = function (options = {}, callback, onerror) {\n    console.log('loading board', options);\n    let clickElement;\n    if(options.element) {\n      clickElement = document.getElementById(\"authBtn\");\n    } else {\n      clickElement = document.createElement('button');\n      clickElement.innerText = 'Authorize USB Device';\n      document.body.appendChild(clickElement);\n    }\n    j5.handleElementInit(clickElement);\n\n    // Create an object which will clone data from async function and return it.\n    // We will need to update that object below, not overwrite/reassign it.\n    // It is crucial for the preload() to keep the original pointer/reference.\n    // Declaring variables with const assures they won't be reassigned by mistake.\n    const ret = {};\n    const self = this;\n\n    console.log('loadBoard starting', Date.now(), ret, options, callback, onerror);\n  \n    j5.events.once('serial', (port) => {\n      console.log('port once', port);\n\n      const io = new j5.firmata.Board(port);\n      const board = new j5.Board({io, repl: false, timeout: 15000});\n      board.on('ready', () => {\n        ret.board = board;\n        // Check whether callback is indeed a function.\n        if (typeof callback == 'function') {\n          callback({}); // do the callback.\n        }\n        if (typeof self._decrementPreload === 'function') {\n          self._decrementPreload();\n        }\n        j5.events.emit('boardReady');\n        j5.io = io;\n        j5.board = board;\n\n      });\n\n    });\n\n  \n    // Return the object which has been filled with the data above.\n    return ret;\n  };\n\n}\n\nmodule.exports = j5;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./src/j5.js?");

/***/ }),

/***/ "./src/noop.js":
/*!*********************!*\
  !*** ./src/noop.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function() {};\n\n//# sourceURL=webpack:///./src/noop.js?");

/***/ }),

/***/ 0:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* (ignored) */\n\n//# sourceURL=webpack:///util_(ignored)?");

/***/ }),

/***/ 1:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* (ignored) */\n\n//# sourceURL=webpack:///util_(ignored)?");

/***/ })

/******/ });